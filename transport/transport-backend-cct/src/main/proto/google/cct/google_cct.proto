// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google_cct;

option java_package = "com.google.android.datatransport.cct.proto";
option java_multiple_files = true;

message LogEvent {
    int64 event_time_ms = 1;

    int32 event_code = 11;

    int64 event_uptime_ms = 17;

    bytes source_extension = 6;

    string source_extension_js = 8;

    string source_extension_json = 13;

    sint64 timezone_offset_seconds = 15;

    NetworkConnectionInfo network_connection_info = 23;
}

message NetworkConnectionInfo {
    enum NetworkType {
        MOBILE = 0;
        WIFI = 1;
        MOBILE_MMS = 2;
        MOBILE_SUPL = 3;
        MOBILE_DUN = 4;
        MOBILE_HIPRI = 5;
        WIMAX = 6;
        BLUETOOTH = 7;
        DUMMY = 8;
        ETHERNET = 9;
        MOBILE_FOTA = 10;
        MOBILE_IMS = 11;
        MOBILE_CBS = 12;
        WIFI_P2P = 13;
        MOBILE_IA = 14;
        MOBILE_EMERGENCY = 15;
        PROXY = 16;
        VPN = 17;

        NONE = -1;
    }

    enum MobileSubtype {
        UNKNOWN_MOBILE_SUBTYPE = 0;
        GPRS = 1;
        EDGE = 2;
        UMTS = 3;
        CDMA = 4;
        EVDO_0 = 5;
        EVDO_A = 6;
        RTT = 7;
        HSDPA = 8;
        HSUPA = 9;
        HSPA = 10;
        IDEN = 11;
        EVDO_B = 12;
        LTE = 13;
        EHRPD = 14;
        HSPAP = 15;
        GSM = 16;
        TD_SCDMA = 17;
        IWLAN = 18;
        LTE_CA = 19;

        // COMBINED has value -1 in NetworkIdentity.java, but is given the value
        // 100 here to save (disk) space. The value -1 takes up the full 10 bytes in
        // a varint for enums, but the value 100 only takes up 1 byte.
        COMBINED = 100;
    }

    NetworkType network_type = 1;

    MobileSubtype mobile_subtype = 2;
}

message AndroidClientInfo {

    // This comes from android.os.Build.VERSION.SDK_INT.
    int32 sdk_version = 3;

    // Textual description of the client platform.  e.g., "Nexus 4".
    // This comes from android.os.Build.MODEL.
    string model = 4;

    // The name of the overall product. e.g., "occam".
    // This comes from android.os.Build.Product.
    string product = 5;

    // The name of the hardware (from the kernel command line or /proc).
    // This comes from android.os.Build.Hardware.  e.g., "mako".
    string hardware = 8;

    // The name of the industrial design.  e.g., "mako".
    // This comes from android.os.Build.Device.
    string device = 9;

    // This comes from android.os.Build.ID.  e.g., something like "JRN54F".
    string os_build = 6;

    // The client application version. The java int version in the android package
    // converted to string.
    string application_build = 7;

    // The mobile country code / mobile network code (MCC/MNC).
    // e.g., 310004 for Verizon USA.
    string mcc_mnc = 10;

    // The chosen locale from the client. e.g., "en_US", "ko_KR", "en_GB".
    // NB: Often set as just locale-derived language; e.g., "en", "ko".
    string locale = 11;

    // Locale-derived country, chosen by the user; e.g., "US", "KR", "JP".
    string country = 12;

    // The manufacturer of the hardware.
    // This comes from android.os.Build.MANUFACTURER
    string manufacturer = 13;

    // The brand the software is customized for, if any.  Often a carrier name.
    // e.g. "google"
    // from http://developer.android.com/reference/android/os/Build.html#BRAND
    string brand = 14;

    // The name of the underlying board
    // e.g. "tuna"
    // from http://developer.android.com/reference/android/os/Build.html#BOARD
    string board = 15;

    // Radio version as reported by device, if available at reporting time
    // e.g. "I9250XXLJ1"
    // from
    // http://developer.android.com/reference/android/os/Build.html#getRadioVersion()
    string radio_version = 16;

    // Device model/build fingerprint.
    // This comes from android.os.Build.FINGERPRINT.
    string fingerprint = 17;

    // The type of build, like "user" or "eng".
    // This comes from android.os.Build.TYPE
    string type = 26;

    // The "ro.oem.key1" system property.
    string ro_oem_key1 = 27;

    // List of native platforms (CPU types) supported by the device, e.g.
    // "armeabi".
    //
    // On L+ devices, this is Build.SUPPORTED_ABIS. On older devices, it is
    // [Build.CPU_ABI] or, if Build.CPU_ABI2 is present, [Build.CPU_ABI,
    // Build.CPU_ABI2]. In any case, the device's preference order is maintained.
    repeated string native_platform = 31;
}

message ClientInfo {

    enum ClientType {
        UNKNOWN = 0;
        ANDROID = 4; // TODO(haneym): Change to FIRELOG_ANDROID.
    }

    // The client type for this client. One of the enum values defined above.
    ClientType client_type = 1;

    AndroidClientInfo android_client_info = 2;
}

message BatchedLogRequest {
    repeated LogRequest log_request = 1;
}

message LogRequest {

    int64 request_time_ms = 4;

    // Current time since boot in milliseconds, including time spent in sleep,
    // according to the same clock as the one used to set
    // the 'event_uptime_ms' values in the LogEvent protos above.
    int64 request_uptime_ms = 8;

    // The ClientInfo at log time.
    ClientInfo client_info = 1;

    int32 log_source = 2;

    repeated LogEvent log_event = 3;

    repeated bytes serialized_log_events = 5;

    QosTierConfiguration.QosTier qos_tier = 9;

    // Different types schedulers for log upload.
    enum SchedulerType {
        UNKNOWN_SCHEDULER = 0;
        ASAP = 1;  // As soon as possible used when log store is full.
        DEFAULT_PERIODIC = 2;
        QOS_FAST_ONEOFF = 3;
        QOS_DEFAULT_PERIODIC = 4;
        QOS_UNMETERED_PERIODIC = 5;
    }
}

message QosTierConfiguration {

    enum QosTier {
        DEFAULT = 0;

        UNMETERED_ONLY = 1;

        UNMETERED_OR_DAILY = 2;

        FAST_IF_RADIO_AWAKE = 3;

        NEVER = 4;
    }

    // For Android, please use log_source_name.
    string log_source_name = 1;
    QosTier qos_tier = 2;
    int32 log_source = 3;
}

message QosTiersOverride {
    // Quality of Service tiers enforced by server for overriding client
    // qos_tier setting in event logging.
    // This usually happens when server is burdened with fast qos tiers.
    repeated QosTierConfiguration qos_tier_configuration = 1;

    // The fingerprint of the qos_tier_configuration field.
    int64 qos_tier_fingerprint = 2;
}

message LogResponse {
    // Client should wait for next_request_wait_millis before sending the next
    // log request.
    int64 next_request_wait_millis = 1;

    // Quality of Service tiers enforced by server for overriding client
    // qos_tier setting in event logging.
    QosTiersOverride qos_tier = 3;
}