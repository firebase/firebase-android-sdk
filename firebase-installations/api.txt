// Signature format: 2.0
package com.google.firebase.installations {

  public class FirebaseInstallations {
    method @NonNull public Task<Void> delete();
    method @NonNull public Task<InstallationTokenResult> getAuthToken(int);
    method @NonNull public Task<String> getId();
    method @NonNull public static com.google.firebase.installations.FirebaseInstallations getInstance();
    method @NonNull public static com.google.firebase.installations.FirebaseInstallations getInstance(@NonNull FirebaseApp);
  }

  public class FirebaseInstallationsException {
    ctor public FirebaseInstallationsException(@NonNull com.google.firebase.installations.FirebaseInstallationsException.Status);
    ctor public FirebaseInstallationsException(@NonNull String, @NonNull com.google.firebase.installations.FirebaseInstallationsException.Status);
    ctor public FirebaseInstallationsException(@NonNull String, @NonNull com.google.firebase.installations.FirebaseInstallationsException.Status, @NonNull Throwable);
    method @NonNull public com.google.firebase.installations.FirebaseInstallationsException.Status getStatus();
  }

  public enum FirebaseInstallationsException.Status {
    enum_constant public static final com.google.firebase.installations.FirebaseInstallationsException.Status CLIENT_ERROR;
    enum_constant public static final com.google.firebase.installations.FirebaseInstallationsException.Status SDK_INTERNAL_ERROR;
  }

}

package com.google.firebase.installations.local {

  public class PersistedFid {
    ctor public PersistedFid(@NonNull FirebaseApp);
    method @NonNull public boolean clear();
    method @NonNull public boolean insertOrUpdatePersistedFidEntry(@NonNull com.google.firebase.installations.local.PersistedFidEntry);
    method @Nullable public com.google.firebase.installations.local.PersistedFidEntry readPersistedFidEntryValue();
  }

  public enum PersistedFid.RegistrationStatus {
    enum_constant public static final com.google.firebase.installations.local.PersistedFid.RegistrationStatus PENDING;
    enum_constant public static final com.google.firebase.installations.local.PersistedFid.RegistrationStatus REGISTERED;
    enum_constant public static final com.google.firebase.installations.local.PersistedFid.RegistrationStatus REGISTER_ERROR;
    enum_constant public static final com.google.firebase.installations.local.PersistedFid.RegistrationStatus UNREGISTERED;
  }

  public abstract class PersistedFidEntry {
    ctor public PersistedFidEntry();
    method @NonNull public static com.google.firebase.installations.local.PersistedFidEntry.Builder builder();
    method @Nullable public abstract String getAuthToken();
    method public abstract long getExpiresInSecs();
    method @NonNull public abstract String getFirebaseInstallationId();
    method @Nullable public abstract String getRefreshToken();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFid.RegistrationStatus getRegistrationStatus();
    method public abstract long getTokenCreationEpochInSecs();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder toBuilder();
  }

  public abstract static class PersistedFidEntry.Builder {
    ctor public PersistedFidEntry.Builder();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry build();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setAuthToken(@Nullable String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setExpiresInSecs(long);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setFirebaseInstallationId(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setRefreshToken(@Nullable String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setRegistrationStatus(@NonNull com.google.firebase.installations.local.PersistedFid.RegistrationStatus);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedFidEntry.Builder setTokenCreationEpochInSecs(long);
  }

}

package com.google.firebase.installations.remote {

  public class FirebaseInstallationServiceClient {
    ctor public FirebaseInstallationServiceClient(@NonNull Context);
    method @NonNull public com.google.firebase.installations.remote.InstallationResponse createFirebaseInstallation(@NonNull String, @NonNull String, @NonNull String, @NonNull String) throws com.google.firebase.installations.remote.FirebaseInstallationServiceException;
    method @NonNull public void deleteFirebaseInstallation(@NonNull String, @NonNull String, @NonNull String, @NonNull String) throws com.google.firebase.installations.remote.FirebaseInstallationServiceException;
    method @NonNull public InstallationTokenResult generateAuthToken(@NonNull String, @NonNull String, @NonNull String, @NonNull String) throws com.google.firebase.installations.remote.FirebaseInstallationServiceException;
  }

  public class FirebaseInstallationServiceException {
    ctor public FirebaseInstallationServiceException(@NonNull com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status);
    ctor public FirebaseInstallationServiceException(@NonNull String, @NonNull com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status);
    ctor public FirebaseInstallationServiceException(@NonNull String, @NonNull com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status, @NonNull Throwable);
    method @NonNull public com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status getStatus();
  }

  public enum FirebaseInstallationServiceException.Status {
    enum_constant public static final com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status NETWORK_ERROR;
    enum_constant public static final com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status SERVER_ERROR;
    enum_constant public static final com.google.firebase.installations.remote.FirebaseInstallationServiceException.Status UNAUTHORIZED;
  }

  public abstract class InstallationResponse {
    ctor public InstallationResponse();
    method @NonNull public static com.google.firebase.installations.remote.InstallationResponse.Builder builder();
    method @NonNull public abstract InstallationTokenResult getAuthToken();
    method @NonNull public abstract String getName();
    method @NonNull public abstract String getRefreshToken();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder toBuilder();
  }

  public abstract static class InstallationResponse.Builder {
    ctor public InstallationResponse.Builder();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse build();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setAuthToken(@NonNull InstallationTokenResult);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setName(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setRefreshToken(@NonNull String);
  }

}

