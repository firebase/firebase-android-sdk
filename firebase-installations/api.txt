// Signature format: 2.0
package com.google.firebase.installations {

  public class FirebaseInstallations implements com.google.firebase.installations.FirebaseInstallationsApi {
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> delete();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.String> getId();
    method @NonNull public static com.google.firebase.installations.FirebaseInstallations getInstance();
    method @NonNull public static com.google.firebase.installations.FirebaseInstallations getInstance(@NonNull com.google.firebase.FirebaseApp);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.installations.InstallationTokenResult> getToken(@com.google.firebase.installations.FirebaseInstallationsApi.AuthTokenOption int);
  }

  public class FirebaseInstallationsException extends com.google.firebase.FirebaseException {
    ctor public FirebaseInstallationsException(@NonNull com.google.firebase.installations.FirebaseInstallationsException.Status);
    ctor public FirebaseInstallationsException(@NonNull String, @NonNull com.google.firebase.installations.FirebaseInstallationsException.Status);
    ctor public FirebaseInstallationsException(@NonNull String, @NonNull com.google.firebase.installations.FirebaseInstallationsException.Status, @NonNull Throwable);
    method @NonNull public com.google.firebase.installations.FirebaseInstallationsException.Status getStatus();
  }

  public enum FirebaseInstallationsException.Status {
    enum_constant public static final com.google.firebase.installations.FirebaseInstallationsException.Status BAD_CONFIG;
  }

  public class RandomFidGenerator {
    ctor public RandomFidGenerator();
    method @NonNull public String createRandomFid();
  }

}

package com.google.firebase.installations.local {

  public class IidStore {
    ctor public IidStore(@NonNull com.google.firebase.FirebaseApp);
    method @Nullable public String readIid();
    method @Nullable public String readToken();
  }

  public class PersistedInstallation {
    ctor public PersistedInstallation(@NonNull com.google.firebase.FirebaseApp);
    method public void clearForTesting();
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry insertOrUpdatePersistedInstallationEntry(@NonNull com.google.firebase.installations.local.PersistedInstallationEntry);
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry readPersistedInstallationEntryValue();
  }

  public enum PersistedInstallation.RegistrationStatus {
    enum_constant public static final com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus ATTEMPT_MIGRATION;
    enum_constant public static final com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus NOT_GENERATED;
    enum_constant public static final com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus REGISTERED;
    enum_constant public static final com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus REGISTER_ERROR;
    enum_constant public static final com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus UNREGISTERED;
  }

  public abstract class PersistedInstallationEntry {
    ctor public PersistedInstallationEntry();
    method @NonNull public static com.google.firebase.installations.local.PersistedInstallationEntry.Builder builder();
    method @Nullable public abstract String getAuthToken();
    method public abstract long getExpiresInSecs();
    method @Nullable public abstract String getFirebaseInstallationId();
    method @Nullable public abstract String getFisError();
    method @Nullable public abstract String getRefreshToken();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus getRegistrationStatus();
    method public abstract long getTokenCreationEpochInSecs();
    method public boolean isErrored();
    method public boolean isNotGenerated();
    method public boolean isRegistered();
    method public boolean isUnregistered();
    method public boolean shouldAttemptMigration();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder toBuilder();
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withAuthToken(@NonNull String, long, long);
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withClearedAuthToken();
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withFisError(@NonNull String);
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withNoGeneratedFid();
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withRegisteredFid(@NonNull String, @NonNull String, long, @Nullable String, long);
    method @NonNull public com.google.firebase.installations.local.PersistedInstallationEntry withUnregisteredFid(@NonNull String);
    field @NonNull public static com.google.firebase.installations.local.PersistedInstallationEntry INSTANCE;
  }

  public abstract static class PersistedInstallationEntry.Builder {
    ctor public PersistedInstallationEntry.Builder();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry build();
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setAuthToken(@Nullable String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setExpiresInSecs(long);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setFirebaseInstallationId(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setFisError(@Nullable String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setRefreshToken(@Nullable String);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setRegistrationStatus(@NonNull com.google.firebase.installations.local.PersistedInstallation.RegistrationStatus);
    method @NonNull public abstract com.google.firebase.installations.local.PersistedInstallationEntry.Builder setTokenCreationEpochInSecs(long);
  }

}

package com.google.firebase.installations.remote {

  public class FirebaseInstallationServiceClient {
    ctor public FirebaseInstallationServiceClient(@NonNull android.content.Context, @Nullable com.google.firebase.platforminfo.UserAgentPublisher, @Nullable com.google.firebase.heartbeatinfo.HeartBeatInfo);
    method @NonNull public com.google.firebase.installations.remote.InstallationResponse createFirebaseInstallation(@NonNull String, @NonNull String, @NonNull String, @NonNull String, @Nullable String) throws java.io.IOException;
    method @NonNull public void deleteFirebaseInstallation(@NonNull String, @NonNull String, @NonNull String, @NonNull String) throws com.google.firebase.FirebaseException, java.io.IOException;
    method @NonNull public com.google.firebase.installations.remote.TokenResult generateAuthToken(@NonNull String, @NonNull String, @NonNull String, @NonNull String) throws java.io.IOException;
  }

  public abstract class InstallationResponse {
    ctor public InstallationResponse();
    method @NonNull public static com.google.firebase.installations.remote.InstallationResponse.Builder builder();
    method @Nullable public abstract com.google.firebase.installations.remote.TokenResult getAuthToken();
    method @Nullable public abstract String getFid();
    method @Nullable public abstract String getRefreshToken();
    method @Nullable public abstract com.google.firebase.installations.remote.InstallationResponse.ResponseCode getResponseCode();
    method @Nullable public abstract String getUri();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder toBuilder();
  }

  public abstract static class InstallationResponse.Builder {
    ctor public InstallationResponse.Builder();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse build();
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setAuthToken(@NonNull com.google.firebase.installations.remote.TokenResult);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setFid(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setRefreshToken(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setResponseCode(@NonNull com.google.firebase.installations.remote.InstallationResponse.ResponseCode);
    method @NonNull public abstract com.google.firebase.installations.remote.InstallationResponse.Builder setUri(@NonNull String);
  }

  public enum InstallationResponse.ResponseCode {
    enum_constant public static final com.google.firebase.installations.remote.InstallationResponse.ResponseCode BAD_CONFIG;
    enum_constant public static final com.google.firebase.installations.remote.InstallationResponse.ResponseCode OK;
  }

  public abstract class TokenResult {
    ctor public TokenResult();
    method @NonNull public static com.google.firebase.installations.remote.TokenResult.Builder builder();
    method @Nullable public abstract com.google.firebase.installations.remote.TokenResult.ResponseCode getResponseCode();
    method @Nullable public abstract String getToken();
    method @NonNull public abstract long getTokenExpirationTimestamp();
    method @NonNull public abstract com.google.firebase.installations.remote.TokenResult.Builder toBuilder();
  }

  public abstract static class TokenResult.Builder {
    ctor public TokenResult.Builder();
    method @NonNull public abstract com.google.firebase.installations.remote.TokenResult build();
    method @NonNull public abstract com.google.firebase.installations.remote.TokenResult.Builder setResponseCode(@NonNull com.google.firebase.installations.remote.TokenResult.ResponseCode);
    method @NonNull public abstract com.google.firebase.installations.remote.TokenResult.Builder setToken(@NonNull String);
    method @NonNull public abstract com.google.firebase.installations.remote.TokenResult.Builder setTokenExpirationTimestamp(long);
  }

  public enum TokenResult.ResponseCode {
    enum_constant public static final com.google.firebase.installations.remote.TokenResult.ResponseCode AUTH_ERROR;
    enum_constant public static final com.google.firebase.installations.remote.TokenResult.ResponseCode BAD_CONFIG;
    enum_constant public static final com.google.firebase.installations.remote.TokenResult.ResponseCode OK;
  }

}

