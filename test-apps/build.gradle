/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:4.1.0'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1'
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
}

apply from: '../sdkProperties.gradle'

allprojects {
    ext.testBuildType = project.getProperties().get("testBuildType", "debug")

    apply plugin: 'com.github.sherter.google-java-format'
    googleJavaFormat {
        toolVersion = '1.6'
    }
    tasks.googleJavaFormat {
        source '.'
        include '**/*.java'
    }

    repositories {
        //mavenLocal() can be overridden via GRADLE_OPTS="-Dmaven.repo.local=<path>"
        mavenLocal()
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    task copyRootGoogleServices(type: Copy) {
        from(System.env.FIREBASE_GOOGLE_SERVICES_PATH ?: "${rootDir}/google-services.json")
        into projectDir
        rename {
            'google-services.json'
        }
    }
    tasks.whenTaskAdded {
        if ( it.name == 'processReleaseGoogleServices') {
            it.dependsOn 'copyRootGoogleServices'
        }
        if ( it.name == 'processDebugGoogleServices') {
            it.dependsOn 'copyRootGoogleServices'
        }
    }

    if(file('test_setup.sh').exists()) {
        task setupSmokeTest {
            doLast {
                project.exec {
                    Map env = [:]

                    if (System.env.PROJECT_ID) {
                        env.put('PROJECT_ID', System.env.PROJECT_ID)
                    }
                    if (project.hasProperty('firebaseProjectId')) {
                        env.put('PROJECT_ID', project.firebaseProjectId)
                    }
                    if (!env.PROJECT_ID) {
                        throw new GradleException(
                                'Fireescape project id was not set. Use -PfirebaseProjectId',
                                new IllegalArgumentException())
                    }

                    if (System.env.FIREBASE_TOKEN) {
                        env.put('FIREBASE_TOKEN', System.env.FIREBASE_TOKEN)
                    }
                    if (project.hasProperty('firebaseToken')) {
                        env.put("FIREBASE_TOKEN", project.firebaseToken)
                    }
                    if(!env.FIREBASE_TOKEN) {
                        throw new GradleException('Firebase token was not set. Use -PfirebaseToken',
                                new IllegalArgumentException())
                    }

                    env.put('PATH', System.env.PATH)

                    workingDir projectDir.absolutePath
                    commandLine './test_setup.sh'

                    //Ensure firebase cli does not output project info
                    standardOutput = new ByteArrayOutputStream()

                    //Ensure firebase cli does not output project info
                    standardOutput = new ByteArrayOutputStream()

                    environment = env
                }
            }
        }
        tasks.whenTaskAdded {
            if ( it.name == 'connectedCheck') {
                it.dependsOn setupSmokeTest
                it.dependsOn rootProject.tasks.findByName("dependencyUpdates")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
