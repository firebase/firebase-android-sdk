// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//
// You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Proto for Firebase Remote Config Clientside Metrics
syntax = "proto2";

package com.google.firebase.remoteconfig.proto;

option java_package = "com.google.firebase.remoteconfig.proto";
option java_outer_classname = "ClientMetrics";

// Single unit of metrics data collected from Firebase integrated apps using the
// Remote Config SDK.
// Every clientside metrics related event that is logged will correspond to
// one of these enums.
message ClientLogEvent {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    FETCH = 1;
    ACTIVATE = 2;
  }

  // Identifier for the application that has been registered with Firebase.
  // The identifier includes the corresponding Google Cloud project number and
  // platform.
  required string app_id = 1;

  // The namespace of values being fetched from Remote Config. Used to
  // differentiate between third-party and first-party apps.
  required string namespace_id = 2;

  // The Firebase Installation ID, which is used to identify an instance of
  // Firebase for metric aggregation purposes.
  required string fid = 3;

  // The timestamp in milliseconds since epoch when the log was
  // recorded.
  required int64 timestamp_millis = 4;

  // The Remote Config client-side event that the metrics are being logged for.
  required EventType event_type = 5 [default = EVENT_TYPE_UNSPECIFIED];

  // The Firebase Remote Config SDK version.
  optional string sdk_version = 6;

  // A group of metrics about a fetch call to Firebase Remote Config.
  optional FetchEvent fetch_event = 7;
}

message FetchEvent {
  // This is the duration of time in milliseconds that it takes within the Fetch
  // event to send an HTTP request to the backend and receive a response
  optional int64 network_latency_millis = 1;
}
