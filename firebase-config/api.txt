// Signature format: 2.0
package com.google.firebase.remoteconfig {

  @com.google.auto.value.AutoValue public abstract class ConfigUpdate {
    ctor public ConfigUpdate();
    method @NonNull public static com.google.firebase.remoteconfig.ConfigUpdate create(@NonNull java.util.Set<java.lang.String>);
    method @NonNull public abstract java.util.Set<java.lang.String> getUpdatedKeys();
  }

  public interface ConfigUpdateListener {
    method public void onError(@NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException);
    method public void onUpdate(@NonNull com.google.firebase.remoteconfig.ConfigUpdate);
  }

  public interface ConfigUpdateListenerRegistration {
    method public void remove();
  }

  public class FirebaseRemoteConfig {
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Boolean> activate();
    method @NonNull public com.google.firebase.remoteconfig.ConfigUpdateListenerRegistration addOnConfigUpdateListener(@NonNull com.google.firebase.remoteconfig.ConfigUpdateListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo> ensureInitialized();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> fetch();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> fetch(long);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Boolean> fetchAndActivate();
    method @NonNull public java.util.Map<java.lang.String,com.google.firebase.remoteconfig.FirebaseRemoteConfigValue> getAll();
    method public boolean getBoolean(@NonNull String);
    method public double getDouble(@NonNull String);
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo getInfo();
    method @NonNull public static com.google.firebase.remoteconfig.FirebaseRemoteConfig getInstance();
    method @NonNull public static com.google.firebase.remoteconfig.FirebaseRemoteConfig getInstance(@NonNull com.google.firebase.FirebaseApp);
    method @NonNull public java.util.Set<java.lang.String> getKeysByPrefix(@NonNull String);
    method public long getLong(@NonNull String);
    method @NonNull public String getString(@NonNull String);
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigValue getValue(@NonNull String);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> reset();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> setConfigSettingsAsync(@NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> setDefaultsAsync(@NonNull java.util.Map<java.lang.String,java.lang.Object>);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> setDefaultsAsync(@XmlRes int);
    field public static final boolean DEFAULT_VALUE_FOR_BOOLEAN = false;
    field public static final byte[] DEFAULT_VALUE_FOR_BYTE_ARRAY;
    field public static final double DEFAULT_VALUE_FOR_DOUBLE = 0.0;
    field public static final long DEFAULT_VALUE_FOR_LONG = 0L; // 0x0L
    field public static final String DEFAULT_VALUE_FOR_STRING = "";
    field public static final int LAST_FETCH_STATUS_FAILURE = 1; // 0x1
    field public static final int LAST_FETCH_STATUS_NO_FETCH_YET = 0; // 0x0
    field public static final int LAST_FETCH_STATUS_SUCCESS = -1; // 0xffffffff
    field public static final int LAST_FETCH_STATUS_THROTTLED = 2; // 0x2
    field public static final int VALUE_SOURCE_DEFAULT = 1; // 0x1
    field public static final int VALUE_SOURCE_REMOTE = 2; // 0x2
    field public static final int VALUE_SOURCE_STATIC = 0; // 0x0
  }

  public class FirebaseRemoteConfigClientException extends com.google.firebase.remoteconfig.FirebaseRemoteConfigException {
    ctor public FirebaseRemoteConfigClientException(@NonNull String);
    ctor public FirebaseRemoteConfigClientException(@NonNull String, @Nullable Throwable);
    ctor public FirebaseRemoteConfigClientException(@NonNull String, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    ctor public FirebaseRemoteConfigClientException(@NonNull String, @Nullable Throwable, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
  }

  public class FirebaseRemoteConfigException extends com.google.firebase.FirebaseException {
    ctor public FirebaseRemoteConfigException(@NonNull String);
    ctor public FirebaseRemoteConfigException(@NonNull String, @Nullable Throwable);
    ctor public FirebaseRemoteConfigException(@NonNull String, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    ctor public FirebaseRemoteConfigException(@NonNull String, @Nullable Throwable, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code getCode();
  }

  public enum FirebaseRemoteConfigException.Code {
    method public int value();
    enum_constant public static final com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code CONFIG_UPDATE_MESSAGE_INVALID;
    enum_constant public static final com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code CONFIG_UPDATE_NOT_FETCHED;
    enum_constant public static final com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code CONFIG_UPDATE_STREAM_ERROR;
    enum_constant public static final com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code CONFIG_UPDATE_UNAVAILABLE;
    enum_constant public static final com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code UNKNOWN;
  }

  public class FirebaseRemoteConfigFetchThrottledException extends com.google.firebase.remoteconfig.FirebaseRemoteConfigException {
    ctor public FirebaseRemoteConfigFetchThrottledException(long);
    method public long getThrottleEndTimeMillis();
  }

  public interface FirebaseRemoteConfigInfo {
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings getConfigSettings();
    method public long getFetchTimeMillis();
    method public int getLastFetchStatus();
  }

  public class FirebaseRemoteConfigServerException extends com.google.firebase.remoteconfig.FirebaseRemoteConfigException {
    ctor public FirebaseRemoteConfigServerException(int, @NonNull String);
    ctor public FirebaseRemoteConfigServerException(int, @NonNull String, @Nullable Throwable);
    ctor public FirebaseRemoteConfigServerException(@NonNull String, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    ctor public FirebaseRemoteConfigServerException(int, @NonNull String, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    ctor public FirebaseRemoteConfigServerException(@NonNull String, @Nullable Throwable, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    ctor public FirebaseRemoteConfigServerException(int, @NonNull String, @Nullable Throwable, @NonNull com.google.firebase.remoteconfig.FirebaseRemoteConfigException.Code);
    method public int getHttpStatusCode();
  }

  public class FirebaseRemoteConfigSettings {
    method public long getFetchTimeoutInSeconds();
    method public long getMinimumFetchIntervalInSeconds();
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings.Builder toBuilder();
  }

  public static class FirebaseRemoteConfigSettings.Builder {
    ctor public FirebaseRemoteConfigSettings.Builder();
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings build();
    method public long getFetchTimeoutInSeconds();
    method public long getMinimumFetchIntervalInSeconds();
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings.Builder setFetchTimeoutInSeconds(long) throws java.lang.IllegalArgumentException;
    method @NonNull public com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings.Builder setMinimumFetchIntervalInSeconds(long);
  }

  public interface FirebaseRemoteConfigValue {
    method public boolean asBoolean() throws java.lang.IllegalArgumentException;
    method @NonNull public byte[] asByteArray();
    method public double asDouble() throws java.lang.IllegalArgumentException;
    method public long asLong() throws java.lang.IllegalArgumentException;
    method @NonNull public String asString();
    method public int getSource();
  }

}

