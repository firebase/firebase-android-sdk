// Signature format: 2.0
package com.google.firebase.dataconnect {

  @kotlinx.serialization.Serializable(with=AnyValueSerializer::class) public final class AnyValue {
    ctor public AnyValue(@NonNull java.util.Map<java.lang.String,?> value);
    ctor public AnyValue(@NonNull java.util.List<?> value);
    ctor public AnyValue(@NonNull String value);
    ctor public AnyValue(boolean value);
    ctor public AnyValue(double value);
    method public <T> T decode(@NonNull kotlinx.serialization.DeserializationStrategy<? extends T> deserializer, @Nullable kotlinx.serialization.modules.SerializersModule serializersModule = null);
    method public inline <reified T> T decode();
    method @NonNull public Object getValue();
    property @NonNull public final Object value;
    field @NonNull public static final com.google.firebase.dataconnect.AnyValue.Companion Companion;
  }

  public static final class AnyValue.Companion {
    method @NonNull public <T> com.google.firebase.dataconnect.AnyValue encode(@Nullable T value, @NonNull kotlinx.serialization.SerializationStrategy<? super T> serializer, @Nullable kotlinx.serialization.modules.SerializersModule serializersModule = null);
    method public inline <reified T> com.google.firebase.dataconnect.AnyValue encode(@Nullable T value);
    method @NonNull public com.google.firebase.dataconnect.AnyValue fromAny(@NonNull Object value);
    method @Nullable public com.google.firebase.dataconnect.AnyValue fromNullableAny(@Nullable Object value);
  }

  public final class ConnectorConfig {
    ctor public ConnectorConfig(@NonNull String connector, @NonNull String location, @NonNull String serviceId);
    method @NonNull public com.google.firebase.dataconnect.ConnectorConfig copy(@NonNull String connector = connector, @NonNull String location = location, @NonNull String serviceId = serviceId);
    method @NonNull public String getConnector();
    method @NonNull public String getLocation();
    method @NonNull public String getServiceId();
    property @NonNull public final String connector;
    property @NonNull public final String location;
    property @NonNull public final String serviceId;
  }

  public class DataConnectException extends java.lang.Exception {
    ctor public DataConnectException(@NonNull String message, @Nullable Throwable cause = null);
  }

  public final class DataConnectSettings {
    ctor public DataConnectSettings(@NonNull String host = "firebasedataconnect.googleapis.com", boolean sslEnabled = true);
    method @NonNull public com.google.firebase.dataconnect.DataConnectSettings copy(@NonNull String host = host, boolean sslEnabled = sslEnabled);
    method @NonNull public String getHost();
    method public boolean getSslEnabled();
    property @NonNull public final String host;
    property public final boolean sslEnabled;
  }

  public final class DataConnectSettingsKt {
  }

  public interface FirebaseDataConnect extends java.lang.AutoCloseable {
    method public void close();
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.FirebaseApp getApp();
    method @NonNull public com.google.firebase.dataconnect.ConnectorConfig getConfig();
    method @NonNull public com.google.firebase.dataconnect.DataConnectSettings getSettings();
    method public int hashCode();
    method @NonNull public <Data, Variables> com.google.firebase.dataconnect.MutationRef<Data,Variables> mutation(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @Nullable kotlin.jvm.functions.Function1<? super com.google.firebase.dataconnect.FirebaseDataConnect.MutationRefOptionsBuilder<Data,Variables>,kotlin.Unit> optionsBuilder = null);
    method @NonNull public <Data, Variables> com.google.firebase.dataconnect.QueryRef<Data,Variables> query(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @Nullable kotlin.jvm.functions.Function1<? super com.google.firebase.dataconnect.FirebaseDataConnect.QueryRefOptionsBuilder<Data,Variables>,kotlin.Unit> optionsBuilder = null);
    method @Nullable public suspend Object suspendingClose(@NonNull kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @NonNull public String toString();
    method public void useEmulator(@NonNull String host = "10.0.2.2", int port = 9399);
    property @NonNull public abstract com.google.firebase.FirebaseApp app;
    property @NonNull public abstract com.google.firebase.dataconnect.ConnectorConfig config;
    property @NonNull public abstract com.google.firebase.dataconnect.DataConnectSettings settings;
    field @NonNull public static final com.google.firebase.dataconnect.FirebaseDataConnect.Companion Companion;
  }

  public static final class FirebaseDataConnect.Companion {
  }

  public static interface FirebaseDataConnect.MutationRefOptionsBuilder<Data, Variables> {
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @Nullable public com.google.firebase.dataconnect.generated.GeneratedMutation<?,Data,Variables> getGeneratedMutation();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public void setDataSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    method public void setGeneratedMutation(@Nullable com.google.firebase.dataconnect.generated.GeneratedMutation<?,Data,Variables>);
    method public void setVariablesSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @Nullable public abstract com.google.firebase.dataconnect.generated.GeneratedMutation<?,Data,Variables> generatedMutation;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public static interface FirebaseDataConnect.QueryRefOptionsBuilder<Data, Variables> {
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @Nullable public com.google.firebase.dataconnect.generated.GeneratedQuery<?,Data,Variables> getGeneratedQuery();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public void setDataSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    method public void setGeneratedQuery(@Nullable com.google.firebase.dataconnect.generated.GeneratedQuery<?,Data,Variables>);
    method public void setVariablesSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @Nullable public abstract com.google.firebase.dataconnect.generated.GeneratedQuery<?,Data,Variables> generatedQuery;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public final class FirebaseDataConnectKt {
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect getInstance(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion, @NonNull com.google.firebase.FirebaseApp app, @NonNull com.google.firebase.dataconnect.ConnectorConfig config, @NonNull com.google.firebase.dataconnect.DataConnectSettings settings = com.google.firebase.dataconnect.DataConnectSettings());
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect getInstance(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion, @NonNull com.google.firebase.dataconnect.ConnectorConfig config, @NonNull com.google.firebase.dataconnect.DataConnectSettings settings = com.google.firebase.dataconnect.DataConnectSettings());
    method @NonNull public static com.google.firebase.dataconnect.LogLevel getLogLevel(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion);
    method public static void setLogLevel(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion, @NonNull com.google.firebase.dataconnect.LogLevel);
  }

  public enum LogLevel {
    method @NonNull public static com.google.firebase.dataconnect.LogLevel valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static com.google.firebase.dataconnect.LogLevel[] values();
    enum_constant public static final com.google.firebase.dataconnect.LogLevel DEBUG;
    enum_constant public static final com.google.firebase.dataconnect.LogLevel NONE;
    enum_constant public static final com.google.firebase.dataconnect.LogLevel WARN;
  }

  public interface MutationRef<Data, Variables> extends com.google.firebase.dataconnect.OperationRef<Data,Variables> {
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.MutationResult<Data,Variables>>);
  }

  public interface MutationResult<Data, Variables> extends com.google.firebase.dataconnect.OperationResult<Data,Variables> {
    method @NonNull public com.google.firebase.dataconnect.MutationRef<Data,Variables> getRef();
    property @NonNull public abstract com.google.firebase.dataconnect.MutationRef<Data,Variables> ref;
  }

  public interface OperationRef<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.OperationResult<Data,Variables>>);
    method @NonNull public com.google.firebase.dataconnect.FirebaseDataConnect getDataConnect();
    method @NonNull public kotlinx.serialization.DeserializationStrategy<Data> getDataDeserializer();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @NonNull public String getOperationName();
    method public Variables getVariables();
    method @NonNull public kotlinx.serialization.SerializationStrategy<Variables> getVariablesSerializer();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract com.google.firebase.dataconnect.FirebaseDataConnect dataConnect;
    property @NonNull public abstract kotlinx.serialization.DeserializationStrategy<Data> dataDeserializer;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @NonNull public abstract String operationName;
    property public abstract Variables variables;
    property @NonNull public abstract kotlinx.serialization.SerializationStrategy<Variables> variablesSerializer;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public interface OperationResult<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method public Data getData();
    method @NonNull public com.google.firebase.dataconnect.OperationRef<Data,Variables> getRef();
    method public int hashCode();
    method @NonNull public String toString();
    property public abstract Data data;
    property @NonNull public abstract com.google.firebase.dataconnect.OperationRef<Data,Variables> ref;
  }

  @kotlinx.serialization.Serializable(with=OptionalVariable.Serializer::class) public sealed interface OptionalVariable<T> {
    method @Nullable public T valueOrNull();
    method public T valueOrThrow();
  }

  public static final class OptionalVariable.Serializer<T> implements kotlinx.serialization.KSerializer<com.google.firebase.dataconnect.OptionalVariable<? extends T>> {
    ctor public OptionalVariable.Serializer(@NonNull kotlinx.serialization.KSerializer<T> elementSerializer);
    method @NonNull public com.google.firebase.dataconnect.OptionalVariable<T> deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.dataconnect.OptionalVariable<? extends T> value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
  }

  public static final class OptionalVariable.Undefined implements com.google.firebase.dataconnect.OptionalVariable {
    method @Nullable public Void valueOrNull();
    method @NonNull public Void valueOrThrow();
    field @NonNull public static final com.google.firebase.dataconnect.OptionalVariable.Undefined INSTANCE;
  }

  public static final class OptionalVariable.Value<T> implements com.google.firebase.dataconnect.OptionalVariable<T> {
    ctor public OptionalVariable.Value(@Nullable T value);
    method public T getValue();
    method public T valueOrNull();
    method public T valueOrThrow();
    property public final T value;
  }

  public interface QueryRef<Data, Variables> extends com.google.firebase.dataconnect.OperationRef<Data,Variables> {
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.QueryResult<Data,Variables>>);
    method @NonNull public com.google.firebase.dataconnect.QuerySubscription<Data,Variables> subscribe();
  }

  public interface QueryResult<Data, Variables> extends com.google.firebase.dataconnect.OperationResult<Data,Variables> {
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getRef();
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> ref;
  }

  public interface QuerySubscription<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method @NonNull public kotlinx.coroutines.flow.Flow<com.google.firebase.dataconnect.QuerySubscriptionResult<Data,Variables>> getFlow();
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getQuery();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract kotlinx.coroutines.flow.Flow<com.google.firebase.dataconnect.QuerySubscriptionResult<Data,Variables>> flow;
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> query;
  }

  public interface QuerySubscriptionResult<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getQuery();
    method @NonNull public Object getResult();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> query;
    property @NonNull public abstract Object result;
  }

}

package com.google.firebase.dataconnect.core {

  public final class DataConnectCredentialsTokenManagerKt {
  }

  public final class DataConnectGrpcClientKt {
  }

  public final class FirebaseDataConnectFactoryKt {
  }

  public final class LoggerKt {
  }

  public final class MutationRefImplKt {
  }

  public final class QueryRefImplKt {
  }

}

package com.google.firebase.dataconnect.generated {

  public interface GeneratedConnector {
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.dataconnect.FirebaseDataConnect getDataConnect();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract com.google.firebase.dataconnect.FirebaseDataConnect dataConnect;
  }

  public interface GeneratedMutation<C extends com.google.firebase.dataconnect.generated.GeneratedConnector, Data, Variables> extends com.google.firebase.dataconnect.generated.GeneratedOperation<C,Data,Variables> {
    method @NonNull public default com.google.firebase.dataconnect.MutationRef<Data,Variables> ref(@Nullable Variables variables);
  }

  public interface GeneratedOperation<Connector extends com.google.firebase.dataconnect.generated.GeneratedConnector, Data, Variables> {
    method @NonNull public Connector getConnector();
    method @NonNull public kotlinx.serialization.DeserializationStrategy<Data> getDataDeserializer();
    method @NonNull public String getOperationName();
    method @NonNull public kotlinx.serialization.SerializationStrategy<Variables> getVariablesSerializer();
    method @NonNull public default com.google.firebase.dataconnect.OperationRef<Data,Variables> ref(@Nullable Variables variables);
    method @NonNull public String toString();
    property @NonNull public abstract Connector connector;
    property @NonNull public abstract kotlinx.serialization.DeserializationStrategy<Data> dataDeserializer;
    property @NonNull public abstract String operationName;
    property @NonNull public abstract kotlinx.serialization.SerializationStrategy<Variables> variablesSerializer;
  }

  public interface GeneratedQuery<C extends com.google.firebase.dataconnect.generated.GeneratedConnector, Data, Variables> extends com.google.firebase.dataconnect.generated.GeneratedOperation<C,Data,Variables> {
    method @NonNull public default com.google.firebase.dataconnect.QueryRef<Data,Variables> ref(@Nullable Variables variables);
  }

}

package com.google.firebase.dataconnect.serializers {

  public final class AnyValueSerializer implements kotlinx.serialization.KSerializer<com.google.firebase.dataconnect.AnyValue> {
    method @NonNull public com.google.firebase.dataconnect.AnyValue deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.dataconnect.AnyValue value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.AnyValueSerializer INSTANCE;
  }

  public final class DateSerializer implements kotlinx.serialization.KSerializer<java.util.Date> {
    method @NonNull public java.util.Date deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull java.util.Date value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.DateSerializer INSTANCE;
  }

  public final class TimestampSerializer implements kotlinx.serialization.KSerializer<com.google.firebase.Timestamp> {
    method @NonNull public com.google.firebase.Timestamp deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.Timestamp value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.TimestampSerializer INSTANCE;
  }

  public final class UUIDSerializer implements kotlinx.serialization.KSerializer<java.util.UUID> {
    method @NonNull public java.util.UUID deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull java.util.UUID value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.UUIDSerializer INSTANCE;
  }

}

package com.google.firebase.dataconnect.util {

  public final class ProtoStructDecoderKt {
  }

  public final class ProtoStructEncoderKt {
  }

  public final class ProtoUtilKt {
  }

  public final class UtilKt {
  }

}

