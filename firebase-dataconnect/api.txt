// Signature format: 2.0
package com.google.firebase.dataconnect {

  @kotlinx.serialization.Serializable(with=AnyValueSerializer::class) public final class AnyValue {
    ctor public AnyValue(@NonNull java.util.Map<java.lang.String,?> value);
    ctor public AnyValue(@NonNull java.util.List<?> value);
    ctor public AnyValue(@NonNull String value);
    ctor public AnyValue(boolean value);
    ctor public AnyValue(double value);
    method @NonNull public Object getValue();
    property @NonNull public final Object value;
    field @NonNull public static final com.google.firebase.dataconnect.AnyValue.Companion Companion;
  }

  public static final class AnyValue.Companion {
  }

  public final class AnyValueKt {
    method public static <T> T decode(@NonNull com.google.firebase.dataconnect.AnyValue, @NonNull kotlinx.serialization.DeserializationStrategy<? extends T> deserializer, @Nullable kotlinx.serialization.modules.SerializersModule serializersModule = null);
    method public static inline <reified T> T decode(@NonNull com.google.firebase.dataconnect.AnyValue);
    method @NonNull public static <T> com.google.firebase.dataconnect.AnyValue encode(@NonNull com.google.firebase.dataconnect.AnyValue.Companion, @Nullable T value, @NonNull kotlinx.serialization.SerializationStrategy<? super T> serializer, @Nullable kotlinx.serialization.modules.SerializersModule serializersModule = null);
    method public static inline <reified T> com.google.firebase.dataconnect.AnyValue encode(@NonNull com.google.firebase.dataconnect.AnyValue.Companion, @Nullable T value);
    method @NonNull public static com.google.firebase.dataconnect.AnyValue fromAny(@NonNull com.google.firebase.dataconnect.AnyValue.Companion, @NonNull Object value);
    method @Nullable public static com.google.firebase.dataconnect.AnyValue fromNullableAny(@NonNull com.google.firebase.dataconnect.AnyValue.Companion, @Nullable Object value);
  }

  public final class ConnectorConfig {
    ctor public ConnectorConfig(@NonNull String connector, @NonNull String location, @NonNull String serviceId);
    method @NonNull public String getConnector();
    method @NonNull public String getLocation();
    method @NonNull public String getServiceId();
    property @NonNull public final String connector;
    property @NonNull public final String location;
    property @NonNull public final String serviceId;
  }

  public final class ConnectorConfigKt {
    method @NonNull public static com.google.firebase.dataconnect.ConnectorConfig copy(@NonNull com.google.firebase.dataconnect.ConnectorConfig, @NonNull String connector = connector, @NonNull String location = location, @NonNull String serviceId = serviceId);
  }

  public class DataConnectException extends java.lang.Exception {
    ctor public DataConnectException(@NonNull String message, @Nullable Throwable cause = null);
  }

  public final class DataConnectSettings {
    ctor public DataConnectSettings(@NonNull String host = "firebasedataconnect.googleapis.com", boolean sslEnabled = true);
    method @NonNull public String getHost();
    method public boolean getSslEnabled();
    property @NonNull public final String host;
    property public final boolean sslEnabled;
  }

  public final class DataConnectSettingsKt {
    method @NonNull public static com.google.firebase.dataconnect.DataConnectSettings copy(@NonNull com.google.firebase.dataconnect.DataConnectSettings, @NonNull String host = host, boolean sslEnabled = sslEnabled);
  }

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.WARNING, message="This declaration is \"experimental\": its signature and/or semantics " + "may change in backwards-incompatible ways at any time without notice, " + "up to and including complete removal. " + "If you have a use case that relies on this declaration please open a " + "\"feature request\" issue at https://github.com/firebase/firebase-android-sdk " + "requesting this declaration\'s promotion from \"experimental\" to \"fully-supported\".") @kotlin.annotation.MustBeDocumented @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalFirebaseDataConnect {
  }

  public interface FirebaseDataConnect extends java.lang.AutoCloseable {
    method public void close();
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.FirebaseApp getApp();
    method @NonNull public com.google.firebase.dataconnect.ConnectorConfig getConfig();
    method @NonNull public com.google.firebase.dataconnect.DataConnectSettings getSettings();
    method public int hashCode();
    method @NonNull public <Data, Variables> com.google.firebase.dataconnect.MutationRef<Data,Variables> mutation(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @Nullable kotlin.jvm.functions.Function1<? super com.google.firebase.dataconnect.FirebaseDataConnect.MutationRefOptionsBuilder<Data,Variables>,kotlin.Unit> optionsBuilder = null);
    method @NonNull public <Data, Variables> com.google.firebase.dataconnect.QueryRef<Data,Variables> query(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @Nullable kotlin.jvm.functions.Function1<? super com.google.firebase.dataconnect.FirebaseDataConnect.QueryRefOptionsBuilder<Data,Variables>,kotlin.Unit> optionsBuilder = null);
    method @Nullable public suspend Object suspendingClose(@NonNull kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @NonNull public String toString();
    method public void useEmulator(@NonNull String host = "10.0.2.2", int port = 9399);
    property @NonNull public abstract com.google.firebase.FirebaseApp app;
    property @NonNull public abstract com.google.firebase.dataconnect.ConnectorConfig config;
    property @NonNull public abstract com.google.firebase.dataconnect.DataConnectSettings settings;
    field @NonNull public static final com.google.firebase.dataconnect.FirebaseDataConnect.Companion Companion;
  }

  public enum FirebaseDataConnect.CallerSdkType {
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType[] values();
    enum_constant public static final com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType Base;
    enum_constant public static final com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType Generated;
  }

  public static final class FirebaseDataConnect.Companion {
  }

  public static interface FirebaseDataConnect.MutationRefOptionsBuilder<Data, Variables> {
    method @Nullable public com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType getCallerSdkType();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public void setCallerSdkType(@Nullable com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType);
    method public void setDataSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    method public void setVariablesSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    property @Nullable public abstract com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public static interface FirebaseDataConnect.QueryRefOptionsBuilder<Data, Variables> {
    method @Nullable public com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType getCallerSdkType();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public void setCallerSdkType(@Nullable com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType);
    method public void setDataSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    method public void setVariablesSerializersModule(@Nullable kotlinx.serialization.modules.SerializersModule);
    property @Nullable public abstract com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public final class FirebaseDataConnectKt {
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect getInstance(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion, @NonNull com.google.firebase.FirebaseApp app, @NonNull com.google.firebase.dataconnect.ConnectorConfig config, @NonNull com.google.firebase.dataconnect.DataConnectSettings settings = com.google.firebase.dataconnect.DataConnectSettings());
    method @NonNull public static com.google.firebase.dataconnect.FirebaseDataConnect getInstance(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion, @NonNull com.google.firebase.dataconnect.ConnectorConfig config, @NonNull com.google.firebase.dataconnect.DataConnectSettings settings = com.google.firebase.dataconnect.DataConnectSettings());
    method @NonNull public static kotlinx.coroutines.flow.MutableStateFlow<com.google.firebase.dataconnect.LogLevel> getLogLevel(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect.Companion);
  }

  @kotlinx.serialization.Serializable(with=LocalDateSerializer::class) public final class LocalDate {
    ctor public LocalDate(int year, int month, int day);
    method public int getDay();
    method public int getMonth();
    method public int getYear();
    property public final int day;
    property public final int month;
    property public final int year;
  }

  public final class LocalDateKt {
    method @NonNull public static com.google.firebase.dataconnect.LocalDate copy(@NonNull com.google.firebase.dataconnect.LocalDate, int year = year, int month = month, int day = day);
    method @NonNull public static com.google.firebase.dataconnect.LocalDate toDataConnectLocalDate(@NonNull java.time.LocalDate);
    method @NonNull public static com.google.firebase.dataconnect.LocalDate toDataConnectLocalDate(@NonNull kotlinx.datetime.LocalDate);
    method @NonNull public static java.time.LocalDate toJavaLocalDate(@NonNull com.google.firebase.dataconnect.LocalDate);
    method @NonNull public static kotlinx.datetime.LocalDate toKotlinxLocalDate(@NonNull com.google.firebase.dataconnect.LocalDate);
  }

  public enum LogLevel {
    method @NonNull public static com.google.firebase.dataconnect.LogLevel valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static com.google.firebase.dataconnect.LogLevel[] values();
    enum_constant public static final com.google.firebase.dataconnect.LogLevel DEBUG;
    enum_constant public static final com.google.firebase.dataconnect.LogLevel NONE;
    enum_constant public static final com.google.firebase.dataconnect.LogLevel WARN;
  }

  public interface MutationRef<Data, Variables> extends com.google.firebase.dataconnect.OperationRef<Data,Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.MutationRef<Data,Variables> copy(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @NonNull com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule);
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.MutationResult<Data,Variables>>);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.MutationRef<NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.MutationRef<Data,NewVariables> withVariablesSerializer(@Nullable NewVariables variables, @NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule);
  }

  public interface MutationResult<Data, Variables> extends com.google.firebase.dataconnect.OperationResult<Data,Variables> {
    method @NonNull public com.google.firebase.dataconnect.MutationRef<Data,Variables> getRef();
    property @NonNull public abstract com.google.firebase.dataconnect.MutationRef<Data,Variables> ref;
  }

  public interface OperationRef<Data, Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.OperationRef<Data,Variables> copy(@NonNull String operationName = this.operationName, @Nullable Variables variables = this.variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer = this.dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer = this.variablesSerializer, @NonNull com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType = this.callerSdkType, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule = this.dataSerializersModule, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule = this.variablesSerializersModule);
    method public boolean equals(@Nullable Object other);
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.OperationResult<Data,Variables>>);
    method @NonNull public com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType getCallerSdkType();
    method @NonNull public com.google.firebase.dataconnect.FirebaseDataConnect getDataConnect();
    method @NonNull public kotlinx.serialization.DeserializationStrategy<Data> getDataDeserializer();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getDataSerializersModule();
    method @NonNull public String getOperationName();
    method public Variables getVariables();
    method @NonNull public kotlinx.serialization.SerializationStrategy<Variables> getVariablesSerializer();
    method @Nullable public kotlinx.serialization.modules.SerializersModule getVariablesSerializersModule();
    method public int hashCode();
    method @NonNull public String toString();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.OperationRef<NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule = this.dataSerializersModule);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.OperationRef<Data,NewVariables> withVariablesSerializer(@Nullable NewVariables variables, @NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule = this.variablesSerializersModule);
    property @NonNull public abstract com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType;
    property @NonNull public abstract com.google.firebase.dataconnect.FirebaseDataConnect dataConnect;
    property @NonNull public abstract kotlinx.serialization.DeserializationStrategy<Data> dataDeserializer;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule dataSerializersModule;
    property @NonNull public abstract String operationName;
    property public abstract Variables variables;
    property @NonNull public abstract kotlinx.serialization.SerializationStrategy<Variables> variablesSerializer;
    property @Nullable public abstract kotlinx.serialization.modules.SerializersModule variablesSerializersModule;
  }

  public interface OperationResult<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method public Data getData();
    method @NonNull public com.google.firebase.dataconnect.OperationRef<Data,Variables> getRef();
    method public int hashCode();
    method @NonNull public String toString();
    property public abstract Data data;
    property @NonNull public abstract com.google.firebase.dataconnect.OperationRef<Data,Variables> ref;
  }

  @kotlinx.serialization.Serializable(with=OptionalVariable.Serializer::class) public sealed interface OptionalVariable<T> {
    method @Nullable public T valueOrNull();
    method public T valueOrThrow();
  }

  public static final class OptionalVariable.Serializer<T> implements kotlinx.serialization.KSerializer<com.google.firebase.dataconnect.OptionalVariable<? extends T>> {
    ctor public OptionalVariable.Serializer(@NonNull kotlinx.serialization.KSerializer<T> elementSerializer);
    method @NonNull public com.google.firebase.dataconnect.OptionalVariable<T> deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.dataconnect.OptionalVariable<? extends T> value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
  }

  public static final class OptionalVariable.Undefined implements com.google.firebase.dataconnect.OptionalVariable {
    method @Nullable public Void valueOrNull();
    method @NonNull public Void valueOrThrow();
    field @NonNull public static final com.google.firebase.dataconnect.OptionalVariable.Undefined INSTANCE;
  }

  public static final class OptionalVariable.Value<T> implements com.google.firebase.dataconnect.OptionalVariable<T> {
    ctor public OptionalVariable.Value(@Nullable T value);
    method public T getValue();
    method public T valueOrNull();
    method public T valueOrThrow();
    property public final T value;
  }

  public interface QueryRef<Data, Variables> extends com.google.firebase.dataconnect.OperationRef<Data,Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.QueryRef<Data,Variables> copy(@NonNull String operationName, @Nullable Variables variables, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer, @NonNull com.google.firebase.dataconnect.FirebaseDataConnect.CallerSdkType callerSdkType, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule);
    method @Nullable public suspend Object execute(@NonNull kotlin.coroutines.Continuation<? super com.google.firebase.dataconnect.QueryResult<Data,Variables>>);
    method @NonNull public com.google.firebase.dataconnect.QuerySubscription<Data,Variables> subscribe();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.QueryRef<NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer, @Nullable kotlinx.serialization.modules.SerializersModule dataSerializersModule);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.QueryRef<Data,NewVariables> withVariablesSerializer(@Nullable NewVariables variables, @NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer, @Nullable kotlinx.serialization.modules.SerializersModule variablesSerializersModule);
  }

  public interface QueryResult<Data, Variables> extends com.google.firebase.dataconnect.OperationResult<Data,Variables> {
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getRef();
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> ref;
  }

  public interface QuerySubscription<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method @NonNull public kotlinx.coroutines.flow.Flow<com.google.firebase.dataconnect.QuerySubscriptionResult<Data,Variables>> getFlow();
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getQuery();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract kotlinx.coroutines.flow.Flow<com.google.firebase.dataconnect.QuerySubscriptionResult<Data,Variables>> flow;
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> query;
  }

  public interface QuerySubscriptionResult<Data, Variables> {
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.dataconnect.QueryRef<Data,Variables> getQuery();
    method @NonNull public Object getResult();
    method public int hashCode();
    method @NonNull public String toString();
    property @NonNull public abstract com.google.firebase.dataconnect.QueryRef<Data,Variables> query;
    property @NonNull public abstract Object result;
  }

}

package com.google.firebase.dataconnect.generated {

  public interface GeneratedConnector<T extends com.google.firebase.dataconnect.generated.GeneratedConnector<T>> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public T copy(@NonNull com.google.firebase.dataconnect.FirebaseDataConnect dataConnect = this.dataConnect);
    method public boolean equals(@Nullable Object other);
    method @NonNull public com.google.firebase.dataconnect.FirebaseDataConnect getDataConnect();
    method public int hashCode();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public java.util.List<com.google.firebase.dataconnect.generated.GeneratedMutation<T,?,?>> mutations();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public java.util.List<com.google.firebase.dataconnect.generated.GeneratedOperation<T,?,?>> operations();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public java.util.List<com.google.firebase.dataconnect.generated.GeneratedQuery<T,?,?>> queries();
    method @NonNull public String toString();
    property @NonNull public abstract com.google.firebase.dataconnect.FirebaseDataConnect dataConnect;
  }

  public interface GeneratedMutation<Connector extends com.google.firebase.dataconnect.generated.GeneratedConnector<Connector>, Data, Variables> extends com.google.firebase.dataconnect.generated.GeneratedOperation<Connector,Data,Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.generated.GeneratedMutation<Connector,Data,Variables> copy(@NonNull Connector connector, @NonNull String operationName, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer);
    method @NonNull public default com.google.firebase.dataconnect.MutationRef<Data,Variables> ref(@Nullable Variables variables);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.generated.GeneratedMutation<Connector,NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.generated.GeneratedMutation<Connector,Data,NewVariables> withVariablesSerializer(@NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer);
  }

  public interface GeneratedOperation<Connector extends com.google.firebase.dataconnect.generated.GeneratedConnector<Connector>, Data, Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.generated.GeneratedOperation<Connector,Data,Variables> copy(@NonNull Connector connector = this.connector, @NonNull String operationName = this.operationName, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer = this.dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer = this.variablesSerializer);
    method public boolean equals(@Nullable Object other);
    method @NonNull public Connector getConnector();
    method @NonNull public kotlinx.serialization.DeserializationStrategy<Data> getDataDeserializer();
    method @NonNull public String getOperationName();
    method @NonNull public kotlinx.serialization.SerializationStrategy<Variables> getVariablesSerializer();
    method public int hashCode();
    method @NonNull public default com.google.firebase.dataconnect.OperationRef<Data,Variables> ref(@Nullable Variables variables);
    method @NonNull public String toString();
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.generated.GeneratedOperation<Connector,NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.generated.GeneratedOperation<Connector,Data,NewVariables> withVariablesSerializer(@NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer);
    property @NonNull public abstract Connector connector;
    property @NonNull public abstract kotlinx.serialization.DeserializationStrategy<Data> dataDeserializer;
    property @NonNull public abstract String operationName;
    property @NonNull public abstract kotlinx.serialization.SerializationStrategy<Variables> variablesSerializer;
  }

  public interface GeneratedQuery<Connector extends com.google.firebase.dataconnect.generated.GeneratedConnector<Connector>, Data, Variables> extends com.google.firebase.dataconnect.generated.GeneratedOperation<Connector,Data,Variables> {
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public com.google.firebase.dataconnect.generated.GeneratedQuery<Connector,Data,Variables> copy(@NonNull Connector connector, @NonNull String operationName, @NonNull kotlinx.serialization.DeserializationStrategy<? extends Data> dataDeserializer, @NonNull kotlinx.serialization.SerializationStrategy<? super Variables> variablesSerializer);
    method @NonNull public default com.google.firebase.dataconnect.QueryRef<Data,Variables> ref(@Nullable Variables variables);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewData> com.google.firebase.dataconnect.generated.GeneratedQuery<Connector,NewData,Variables> withDataDeserializer(@NonNull kotlinx.serialization.DeserializationStrategy<? extends NewData> dataDeserializer);
    method @NonNull @com.google.firebase.dataconnect.ExperimentalFirebaseDataConnect public <NewVariables> com.google.firebase.dataconnect.generated.GeneratedQuery<Connector,Data,NewVariables> withVariablesSerializer(@NonNull kotlinx.serialization.SerializationStrategy<? super NewVariables> variablesSerializer);
  }

}

package com.google.firebase.dataconnect.serializers {

  public final class AnyValueSerializer implements kotlinx.serialization.KSerializer<com.google.firebase.dataconnect.AnyValue> {
    method @NonNull public com.google.firebase.dataconnect.AnyValue deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.dataconnect.AnyValue value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.AnyValueSerializer INSTANCE;
  }

  public final class JavaTimeLocalDateSerializer implements kotlinx.serialization.KSerializer<java.time.LocalDate> {
    method @NonNull public java.time.LocalDate deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull java.time.LocalDate value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.JavaTimeLocalDateSerializer INSTANCE;
  }

  public final class KotlinxDatetimeLocalDateSerializer implements kotlinx.serialization.KSerializer<kotlinx.datetime.LocalDate> {
    method @NonNull public kotlinx.datetime.LocalDate deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull kotlinx.datetime.LocalDate value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.KotlinxDatetimeLocalDateSerializer INSTANCE;
  }

  public final class LocalDateSerializer implements kotlinx.serialization.KSerializer<com.google.firebase.dataconnect.LocalDate> {
    method @NonNull public com.google.firebase.dataconnect.LocalDate deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.dataconnect.LocalDate value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.LocalDateSerializer INSTANCE;
  }

  public final class TimestampSerializer implements kotlinx.serialization.KSerializer<com.google.firebase.Timestamp> {
    method @NonNull public com.google.firebase.Timestamp deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull com.google.firebase.Timestamp value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.TimestampSerializer INSTANCE;
  }

  public final class UUIDSerializer implements kotlinx.serialization.KSerializer<java.util.UUID> {
    method @NonNull public java.util.UUID deserialize(@NonNull kotlinx.serialization.encoding.Decoder decoder);
    method @NonNull public kotlinx.serialization.descriptors.SerialDescriptor getDescriptor();
    method public void serialize(@NonNull kotlinx.serialization.encoding.Encoder encoder, @NonNull java.util.UUID value);
    property @NonNull public kotlinx.serialization.descriptors.SerialDescriptor descriptor;
    field @NonNull public static final com.google.firebase.dataconnect.serializers.UUIDSerializer INSTANCE;
  }

}

