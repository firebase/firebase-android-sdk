/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.firebase.dataconnect.testutil.property.arbitrary

import com.google.firebase.dataconnect.testutil.calculateNumBase10Digits
import io.kotest.property.Arb
import io.kotest.property.arbitrary.choice
import io.kotest.property.arbitrary.int

/**
 * Returns an [Arb] identical to [Arb.Companion.int] except that the values it produces have an
 * equal probability of having any given number of digits in its base-10 string representation. This
 * is useful for testing int values that get zero padded when they are small. The negative sign is
 * _not_ included in the "number of digits" count.
 *
 * @param range The range of values to produce; if `null` (the default) then use the entire range of
 * integers (i.e. `Int.MIN_VALUE..Int.MAX_VALUE`).
 *
 * @see intWithUniformNumDigitsDistribution
 */
@JvmName("intWithUniformNumDigitsDistributionNonNullRange")
fun Arb.Companion.intWithUniformNumDigitsDistribution(range: IntRange): Arb<Int> {
  require(!range.isEmpty()) { "range must not be empty: $range (error code tmvy8ysdjy)" }

  val startNumDigits = range.first.calculateNumBase10Digits()
  val endNumDigits = range.last.calculateNumBase10Digits()

  if (startNumDigits == endNumDigits) {
    return Arb.int(range)
  }

  check(startNumDigits < endNumDigits) {
    "startNumDigits should be less than endNumDigits, but it is not: " +
      "startNumDigits=$startNumDigits endNumDigits=$endNumDigits"
  }

  val arbs = mutableListOf<Arb<Int>>()
  arbs.add(intRangeForNumBase10Digits(startNumDigits).let { Arb.int(range.first, it.last) })
  arbs.add(intRangeForNumBase10Digits(endNumDigits).let { Arb.int(it.first, range.last) })

  if (endNumDigits - startNumDigits > 2) {
    for (numDigits in startNumDigits + 1 until endNumDigits) {
      if (numDigits != 0) {
        arbs.add(Arb.int(intRangeForNumBase10Digits(numDigits)))
      }
    }
  }

  return Arb.choice(arbs)
}

/**
 * Returns an [Arb] identical to [Arb.Companion.int] except that the values it produces have an
 * equal probability of having any given number of digits in its base-10 string representation. This
 * is useful for testing int values that get zero padded when they are small. The negative sign is
 * _not_ included in the "number of digits" count.
 *
 * @param range The range of values to produce; if `null` (the default) then use the entire range of
 * integers (i.e. `Int.MIN_VALUE..Int.MAX_VALUE`).
 *
 * @see intWithUniformNumDigitsDistribution
 */
@JvmName("intWithUniformNumDigitsDistributionNullableRange")
fun Arb.Companion.intWithUniformNumDigitsDistribution(range: IntRange? = null): Arb<Int> =
  intWithUniformNumDigitsDistribution(range ?: Int.MIN_VALUE..Int.MAX_VALUE)

private val rangeByNumDigits: Map<Int, IntRange> = buildMap {
  put(1, 0..9)
  put(2, 10..99)
  put(3, 100..999)
  put(4, 1_000..9_999)
  put(5, 10_000..99_999)
  put(6, 100_000..999_999)
  put(7, 1_000_000..9_999_999)
  put(8, 10_000_000..99_999_999)
  put(9, 100_000_000..999_999_999)
  put(10, 1_000_000_000..Int.MAX_VALUE)
  put(-1, -9..-1)
  put(-2, -99..-10)
  put(-3, -999..-100)
  put(-4, -9_999..-1_000)
  put(-5, -99_999..-10_000)
  put(-6, -999_999..-100_000)
  put(-7, -9_999_999..-1_000_000)
  put(-8, -99_999_999..-10_000_000)
  put(-9, -999_999_999..-100_000_000)
  put(-10, Int.MIN_VALUE..-1_000_000_000)
}

private fun intRangeForNumBase10Digits(numDigits: Int): IntRange =
  rangeByNumDigits.getOrElse(numDigits) {
    throw IllegalArgumentException(
      "invalid numDigits: $numDigits " +
        "(valid values are: ${rangeByNumDigits.keys.sorted().joinToString()})"
    )
  }

/**
 * Returns an [Arb] that generates [Int] values whose base-10 representation has the given number of
 * digits.
 *
 * The number of digits does _not_ include a leading minus sign, if applicable. For example, the
 * values `-123` is considered to have 3 digits, not 4.
 *
 * @param numDigits A value between -10 and 10, inclusive, excluding 0 (zero), that indicates the
 * number of digits that each [Int] generated by the returned [Arb] will produce. A negative value
 * indicates that negative values will be generated with a digit count equal to the absolute value
 * of the given number of digits. A positive value indicates that only positive values will be
 * generated.
 */
fun Arb.Companion.intWithNumBase10Digits(numDigits: Int): Arb<Int> =
  Arb.int(intRangeForNumBase10Digits(numDigits))
