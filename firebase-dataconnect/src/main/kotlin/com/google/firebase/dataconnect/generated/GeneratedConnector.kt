/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.firebase.dataconnect.generated

import com.google.firebase.dataconnect.*

/**
 * The interface to be implemented by the over-arching "connector" classes that are generated by the
 * Firebase Tools code generation.
 *
 * ### Safe for Concurrent Use
 *
 * All methods and properties of [GeneratedConnector] are thread-safe and may be safely called
 * and/or accessed concurrently from multiple threads and/or coroutines.
 *
 * ### Stable for Inheritance (after graduating to "Generally Available")
 *
 * The [GeneratedConnector] interface _is_ stable for inheritance in third-party libraries, as new
 * methods will not be added to this interface and contracts of the existing methods will not be
 * changed. Note, however, that this interface is still subject to changes, up to and including
 * outright deletion, until the Firebase Data Connect product graduates from "alpha" and/or "beta"
 * to "Generally Available" status.
 */
public interface GeneratedConnector {

  /** The [FirebaseDataConnect] instance used by this object. */
  public val dataConnect: FirebaseDataConnect

  /**
   * Compares this object with another object for equality, using the `===` operator.
   *
   * The implementation of this method simply uses referential equality. That is, two instances of
   * [GeneratedConnector] compare equal using this method if, and only if, they refer to the same
   * object, as determined by the `===` operator.
   *
   * @param other The object to compare to this for equality.
   * @return `other === this`
   */
  override fun equals(other: Any?): Boolean

  /**
   * Calculates and returns the hash code for this object.
   *
   * @return the hash code for this object.
   */
  override fun hashCode(): Int

  /**
   * Returns a string representation of this object, useful for debugging.
   *
   * The string representation is _not_ guaranteed to be stable and may change without notice at any
   * time. Therefore, the only recommended usage of the returned string is debugging and/or logging.
   * Namely, parsing the returned string or storing the returned string in non-volatile storage
   * should generally be avoided in order to be robust in case that the string representation
   * changes.
   *
   * @return a string representation of this object.
   */
  override fun toString(): String
}
