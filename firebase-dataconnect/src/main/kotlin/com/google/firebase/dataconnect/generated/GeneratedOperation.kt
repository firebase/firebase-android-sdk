/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.firebase.dataconnect.generated

import com.google.firebase.dataconnect.OperationRef
import kotlinx.serialization.DeserializationStrategy
import kotlinx.serialization.SerializationStrategy

/**
 * The parent of [GeneratedQuery] and [GeneratedMutation], which are to be implemented by per-query
 * and per-mutation classes, respectively, generated by the Firebase Tools code generation.
 *
 * ### Safe for Concurrent Use
 *
 * All methods and properties of [GeneratedOperation] are thread-safe and may be safely called
 * and/or accessed concurrently from multiple threads and/or coroutines.
 *
 * ### Stable for Inheritance (after graduating to "Generally Available")
 *
 * The [GeneratedOperation] interface _is_ stable for inheritance in third-party libraries, as new
 * methods will not be added to this interface and contracts of the existing methods will not be
 * changed. Note, however, that this interface is still subject to changes, up to and including
 * outright deletion, until the Firebase Data Connect product graduates from "alpha" and/or "beta"
 * to "Generally Available" status.
 */
public interface GeneratedOperation<Connector : GeneratedConnector, Data, Variables> {

  /** The [GeneratedConnector] with which this object is associated. */
  public val connector: Connector

  /**
   * The name of the operation, as defined in GraphQL.
   * @see OperationRef.operationName
   */
  public val operationName: String

  /**
   * The deserializer to use to deserialize the response data for this operation.
   * @see OperationRef.dataDeserializer
   */
  public val dataDeserializer: DeserializationStrategy<Data>

  /**
   * The serializer to use to serialize the variables for this operation.
   * @see OperationRef.variablesSerializer
   */
  public val variablesSerializer: SerializationStrategy<Variables>

  /**
   * Returns a [OperationRef] that can be used to execute this operation with the given variables.
   */
  public fun ref(variables: Variables): OperationRef<Data, Variables> =
    connector.dataConnect.mutation(operationName, variables, dataDeserializer, variablesSerializer)

  /**
   * Compares this object with another object for equality, using the `===` operator.
   *
   * The implementation of this method simply uses referential equality. That is, two instances of
   * [GeneratedOperation] compare equal using this method if, and only if, they refer to the same
   * object, as determined by the `===` operator.
   *
   * @param other The object to compare to this for equality.
   * @return `other === this`
   */
  // TODO: Uncomment equals() once the codegen changes in cl/634029357 are released in the latest
  //  firestore-tools for a month or so, as adding this method is a breaking change as it forces the
  //  generated classes to explicitly override this method.
  // override fun equals(other: Any?): Boolean

  /**
   * Calculates and returns the hash code for this object.
   *
   * @return the hash code for this object.
   */
  // TODO: Uncomment hashCode() once the codegen changes in cl/634029357 are released in the latest
  //  firestore-tools for a month or so, as adding this method is a breaking change as it forces the
  //  generated classes to explicitly override this method.
  // override fun hashCode(): Int

  /**
   * Returns a string representation of this object, useful for debugging.
   *
   * The string representation is _not_ guaranteed to be stable and may change without notice at any
   * time. Therefore, the only recommended usage of the returned string is debugging and/or logging.
   * Namely, parsing the returned string or storing the returned string in non-volatile storage
   * should generally be avoided in order to be robust in case that the string representation
   * changes.
   *
   * @return a string representation of this object, which includes the class name and the values of
   * all public properties.
   */
  override fun toString(): String
}
