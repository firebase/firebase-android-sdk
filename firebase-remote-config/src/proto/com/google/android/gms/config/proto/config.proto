// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//
// You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto2";

package com.google.android.gms.config.proto;

import "com/google/android/gms/config/proto/config_logs.proto";

option java_package = "com.google.android.gms.config.proto";
option java_outer_classname = "Config";

// This proto defines the request and response objects of a config fetch from
// the Config Service backend.

// The model of a config fetch has changed in GmsCore-Tala. We consider the
// original config fetch model as v1, and the new model in Tala as v2. Fields
// that were added in v2 and fields that were deprecated in v2 are marked
// correspondingly.

// The ConfigFetchRequest proto has a client_version field, which will indicate
// if it is v2. Lack of that field indicates that the request is coming from
// a v1 client.

message PackageData {
    ////////////////////
    // v1 only fields //
    ////////////////////

    // version code of the app/package. (as it appears in the app manifest with
    // <version-code> tag) deprecated - v1 only - should be populated
    // for v1 - android only.
    optional int32 version_code = 2;

    // deprecated - v1 only - should be populated for v1
    // digest of the config table on the device. will be used to diff against
    // the digest at the server, to see if server needs to send an updated table.
    optional bytes digest = 3;

    // hash of the certificate with which this package was signed.
    // android only - v1 only - ignored by server
    optional bytes cert_hash = 4;

    // deprecated - v1 only - server ignores this
    optional string config_id = 5;

    /////////////////////////
    // v1&v2 common fields //
    /////////////////////////

    // name of the package for which the device is fetching config from the
    // backend.
    // for v1: this field must be populated, otherwise the server
    // will reject the request.
    // for v2:
    //   this field must be populated for first party clients.
    //   this field should be populated for third party clients. without that,
    // client will not be able to get rules based on the package name.
    // for clients other than android, this should be populated with
    // corresponding entity, such as bundle name in ios.
    optional string package_name = 1;

    ////////////////////
    // v2 only fields //
    ////////////////////

    // project id retrieved from GMP, if the app is tied to a GMP project id.
    // v2 only.
    // should be populated in v2, as without it, client won't be able to get
    // configuration from the gmp namespace.
    optional string gmp_project_id = 6;

    // project id retrieved using the games-project-id tag (in android,
    // from the manifest file), if the app is tied to a games app id.
    // v2 only.
    // should be populated in v2 (if the app has it), as without it, the client
    // won't be able to get configuration from the games namespace.
    optional string games_project_id = 7;

    // per namespace digests of the local config table of the app, in
    // the format of: NamedValue(name=namespace, value=digest)
    // v2 only.
    // must be populated for v2, as lack of it would cause the server to send
    // the whole config table back, even when there are no changes.
    repeated NamedValue namespace_digest = 8;

    // custom variables as defined by the client app.
    // v2 only.
    // if not populated, client won't be able to get rules defined using their
    // custom variables.
    repeated NamedValue custom_variable = 9;

    // hash of the certificate with which this app/package was signed.
    // not in use right now, but should still be populated, as in the future, we
    // will start to use this to authenticate the app.
    // android only, as we don't have a way to validate ios signatures.
    optional bytes app_cert_hash = 10;

    // version code of the app
    // for android, it is the value of the <version-code> tag within
    // an app's manifest.
    // must be populated in v2, otherwise the config rules against app versions
    // will not work.
    //
    // This field is now deprecated. New version of the client should not populate
    // this and populate app_version instead. For backward compatability with
    // older
    // clients, if the server doesn't find a value for app_version and finds a
    // value > 0 here, it will use the decimal of the value here as the
    // app version (e.g. 123 -> "123").
    optional int32 app_version_code = 11;

    // App version, using the native app version format on the client's  OS.
    // The recommended version format is in decimal dot notation
    // \d{1,6}(\.\d{1,6})*
    //
    // Valid examples:
    //   0, 123, 0123, 1.2.3, 0001.33.043.321.55
    optional string app_version = 13;

    // The instance id of the app (the client app, not gmscore).
    optional string app_instance_id = 12;

    // The instance id token of the app, that is retrieved by using
    // the default scope.
    optional string app_instance_id_token = 14;

    // Requested hidden namespaces.
    // This is a list of namespaces that are hidden from the developer.
    // Configuration in these namespaces are for configuring SDKs.
    // Regular API methods won't return the values in these namespaces.
    // When the server receives a fetch request with this field set, it should
    // only reply for the namespaces in this field.
    // Example value: "confighns:firebase-system"
    repeated string requested_hidden_namespace = 15;

    // version of the firebase remote config sdk. constructed by a major version,
    // a minor version, and a patch version, using the formula:
    // (major * 10000) + (minor * 100) + patch
    // must be set by each client.
    // the major version will indicate the API version, and has to be the same for
    // both Android and iOS.
    // the minor version will indicate the feature set. in other words, it needs
    // to be incremented with each feature we add. must be the same for both
    // Android and iOS.
    // the patch version needs to be updated each time we release a change. can
    // be different between Android and iOS.
    // these versions will be hardcoded constants in both clients.
    optional int32 sdk_version = 16;

    // list of all scion (analytics) external properties set on this app. clients
    // need to report these at each config fetch, so that the server can use user
    // properties as a targeting condition, enabling more integration with scion.
    repeated NamedValue analytics_user_property = 17;

    // the cache expiration seconds specified while calling fetch()
    // in seconds
    optional int32 requested_cache_expiration_seconds = 18;

    // the age of the fetched config: now() - last time fetch() was called
    // in seconds
    // if there was no fetched config, the value will be set to -1
    optional int32 fetched_config_age_seconds = 19;

    // the age of the active config:
    // now() - last time activateFetched() was called
    // in seconds
    // if there was no active config, the value will be set to -1
    optional int32 active_config_age_seconds = 20;
}

// Corresponds to each entry in a config table. common for v1 & v2.
message KeyValue {
    optional string key = 1;
    optional bytes value = 2;
}

/////////////////
// added in v2 //
/////////////////
message NamedValue {
    optional string name = 1;
    optional string value = 2;
}

// represents a config fetch request from a single device for the config(s) of
// one or more apps.
// in v2, the fetch request is only for a single app.
// in v1, the fetch request can be batched for multiple apps.
message ConfigFetchRequest {
    ////////////////////
    // v1-only fields //
    ////////////////////

    // from logs proto, tracking fetch reason.
    // v1 only - android only
    optional AndroidConfigFetchProto config = 5;

    /////////////////////////
    // v1&v2 common fields //
    /////////////////////////

    // android_id of the device.
    // must be populated in v1: for v1 requests, server fetches all data from
    // checkin, so the fetch operation won't work at all without an android id.
    // for v2, this field is only necessary if any of the rules for this package
    // needs checkin data. (for instance, first party clients using the extended
    // atoms within the perforce namespace).
    // if populated, security_token field should also be populated, as the server
    // will authenticate the android_id if it needs to access Kansas data.
    optional fixed64 android_id = 1;

    // holds package specific information. for v1, it can be a repeated set of
    // packages.
    // in v2, there will only be a single entry, as we only do individual fetches
    // per package.
    // must be populated in both v1 and v2.
    repeated PackageData package_data = 2;

    // corresponds to the Kansas version info for the android checkin columns,
    // which can be used by
    // the server to retrieve the most up-to-date data from Kansas.
    // not needed for third party clients.
    // for first party clients (which might have rules depending on checkin data),
    // this should be populated for both v1 and v2, if possible. without it, the
    // server is subject to reading stale checkin data from Kansas.
    optional string device_data_version_info = 3;

    // password of the android id.
    // for v1, this field must be populated.
    // for v2, if the android_id field is populated, this needs to be populated
    // as well, as the server will authenticate the android id if it needs to
    // access Kansas data.
    optional fixed64 security_token = 4;

    ////////////////////
    // v2-only fields //
    ////////////////////

    // version of the config fetch client on the device. must be populated in v2.
    optional int32 client_version = 6;  // 1 is GmsCore-Orla, 2 is GmsCore-Tala

    // version of the Google Play Services on the device.
    // must be populated in v2, android only.
    optional int32 gms_core_version = 7;

    // API level of the device (for android, 19, 20, 21, etc.).
    // must be populated in v2.
    // android only for now. ios (or others) can either reuse this field, or add
    // another.
    optional int32 api_level = 8;

    // the country which this device resides in, according to checkin.
    // all country codes should be 2 lowercase letters, such as us, tr, or gb.
    // must be populated in v2.
    optional string device_country = 9;

    // the default locale of the device.
    // format is 'en_US'.
    // must be populated in v2, otherwise rules written against locale or locale
    // language will not work.
    optional string device_locale = 10;

    // indicates the type of the device, such as android, ios, chromeos, etc.
    // must be populated in v2
    optional int32 device_type = 11;

    // indicates the device subtype, such as phone, tablet, wearable, etc.
    // must be populated in v2
    optional int32 device_subtype = 12;

    // The version string of the device.
    // Android devices will have a version corresponding to the bandwagoner version
    // code. For example "21" for Lollipop.
    // iOS devices will have a string version containing three non-negative,
    // period seperated integers. eg. "9.0.0". See CFBundleVersion for more info.
    optional string os_version = 13;

    // The timezone id of the device in Olson Id format.
    // Example "America/Los_Angeles"
    // Android => getID: Returns the ID of this TimeZone, such as
    // America/Los_Angeles, GMT-08:00 or UTC.
    optional string device_timezone_id = 14;
}

// Holds the configuration data withing the v1 server response.
message PackageTable {
    // android only - the name of the package to which the configuration belongs
    // to. must be filled in, so that the client can identify the owner package.
    optional string package_name = 1;

    // holds configuration key-value pairs, belonging to the app with the
    // specified package name.
    repeated KeyValue entry = 2;

    // ignored by the server - unused
    optional string config_id = 3;
}

//////////////////
// Added in V2. //
//////////////////
// Holds configuration data belonging to a single namespace of an app.
message AppNamespaceConfigTable {
    // namespace is the source of the configuration included in this message.
    // can be "configns:gmp", "configns:games", or "configns:p4".
    // must be populated.
    optional string namespace = 1;

    // server computed digest of the config entries.
    // will be stored by the client to be included in future requests, so that
    // the server can tell if there are any changes and the device needs an
    // update.
    optional string digest = 2;

    // holds configuration key value pairs. each entry is a pair within a
    // package-namespace realm.
    repeated KeyValue entry = 3;

    enum NamespaceStatus {
        UPDATE = 0;
        NO_TEMPLATE = 1;
        NO_CHANGE = 2;
        EMPTY_CONFIG = 3;
        NOT_AUTHORIZED = 4;
    }

    // holds the status for the namespace, which tells the client how the
    // response should be handled.
    optional NamespaceStatus status = 4;
}

//////////////////
// Added in V2. //
//////////////////
// Holds configuration data within the v2 server response.
message AppConfigTable {
    // in android, app name is the package name of the app.
    // for ios, it is the bundle name.
    // must be populated, so that the client can identify which package the
    // included config belongs to.
    optional string app_name = 1;

    // holds per namespace configuration for this app. if the app has
    // configuration coming from multiple sources, then there will be more than
    // one entry in this field.
    // if the app has no configuration defined, then this field will be empty.
    repeated AppNamespaceConfigTable namespace_config = 2;

    // each experiment payload represents a single experiment and its variant,
    // along with metadata specific to this experiment. this field holds the
    // serialized bytes of an experiment payload proto object.
    // the experiment payload can be found at:
    // developers/mobile/abt/proto/experiment_payload.proto
    repeated bytes experiment_payload = 3;
}

// represents the response of the config backend server to the device's config
// fetch request.
message ConfigFetchResponse {
    /////////////////////////////
    // v1-only response fields //
    /////////////////////////////

    // holds the config table of the package, as a separate PackageTable per
    // config key-value pair in a namespace.
    repeated PackageTable package_table = 1;

    /////////////////////////////
    // v2-only response fields //
    /////////////////////////////

    enum ResponseStatus {
        SUCCESS = 0;
        NO_PACKAGES_IN_REQUEST = 1;
    }

    // indicates the server's response status
    optional ResponseStatus status = 2;

    // holds information that is sent by the server, but won't be visible to
    // the client. will be used to configure connection timeouts, or throttling
    // parameters from the server.
    // added in v2.
    repeated KeyValue internal_metadata = 3;

    // holds all configuration data to be sent to the fetching device.
    // in v2, there should only be one entry. however, the field is marked as
    // repeated, in case we handle more than one package within the same
    // request-response in the future.
    repeated AppConfigTable app_config = 4;
}