# Whenever a new Firebase Android SDK is released, this workflow triggers
# *another* workflow on the Firebase C++ SDK, which will check for the Android
# version update and create a PR updating its dependencies if any version
# numbers changed.
name: update-cpp-sdk-on-release
on:
  pull_request:
    types:
      - closed

env:
  # If the main branch of this repo is ever renamed, change it here.
  mainBranch: master

jobs:
  check_if_version_changed:
    name: Check if released version changed
    # This step checks several things, and sets released_version_changed=1 only if all are true:
    # - The PR must target the main branch as the base branch.
    # - The PR must NOT come from a fork.
    # - The closed PR must be merged.
    # - The PR must modify a gradle.properties file, specifically a "latestReleasedVersion=" line.
    if: ${{ (github.event.pull_request.base.repo.url == github.event.pull_request.head.repo.url) && github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs:
      released_version_changed: ${{ steps.check_version.outputs.released_version_changed }}
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          # Check out the actual head of the PR, not the merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
          # Specify fetch-depth so we can query the log, the default is a shallow clone.
          fetch-depth: 0
      - name: Check if version was updated in git history
        id: check_version
        run: |
          if [[ '${{ github.event.pull_request.base.ref }}' != '${{env.mainBranch}}' ]]; then
            echo 'Non-main branch: ${{ github.event.pull_request.base.ref }}'
            exit 0
          fi
          # Query the git history for all gradle.properties files between this PR and the main branch..
          # Then, check the diff to see if any "latestReleasedVersion=" lines changed.
          # Get the latest common commit between this and the main branch (usually just the main branch's HEAD).
          MERGE_BASE=$(git merge-base HEAD origin/${{ env.mainBranch }})
          if (git diff "${MERGE_BASE}" -- '**/gradle.properties' | grep -q '^[-+]latestReleasedVersion='); then
            echo "::set-output name=released_version_changed::1"
          else
            echo "No change to latestReleasedVersion detected. (merge-base: ${MERGE_BASE})"
          fi

  trigger_cpp_sdk_update:
    name: Trigger C++ SDK update
    # If the previous step set the released_version_changed output param to 1, then
    # we should trigger the C++ SDK to update its Android dependencies.
    needs: check_if_version_changed
    if: ${{ needs.check_if_version_changed.outputs.released_version_changed }}
    # Fetch an authentication token for firebase-workflow-trigger, then use that
    # token to trigger the update-dependencies workflow in firebase-cpp-sdk.
    runs-on: ubuntu-latest
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Check out firebase-cpp-sdk
        uses: actions/checkout@v2.3.1
        with:
          repository: firebase/firebase-cpp-sdk
          ref: main

      - name: Get firebase-workflow-trigger token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.CPP_WORKFLOW_TRIGGER_APP_ID }}
          private_key: ${{ secrets.CPP_WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
          repository: firebase/firebase-cpp-sdk

      - name: Trigger firebase-cpp-sdk update
        run: |
          python scripts/gha/trigger_workflow.py -t ${{ steps.generate-token.outputs.token }} -w update-dependencies.yml -p updateAndroid 1 -p updateiOS 0 -p comment "Triggered by [firebase-android-sdk $(date '+%b %d') release]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/pulls/${{ github.event.pull_request.number }})." -s 10 -A
