// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id 'firebase-library'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

firebaseLibrary {
    releaseWith project(':firebase-firestore')
    publishSources = true
}

android {
    compileSdkVersion project.targetSdkVersion
    defaultConfig {
        minSdkVersion 19
        multiDexEnabled true
        targetSdkVersion project.targetSdkVersion
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java {
            srcDir 'src/test/kotlin'
            srcDir 'src/test/java'
        }
        androidTest {
            java {
                srcDir 'src/androidTest/java'
            }
        }
    }
    testOptions.unitTests.includeAndroidResources = true
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

android.libraryVariants.all { variant ->
    if (findProperty("useProdBackendForTests")) {
        variant.buildConfigField("boolean", "USE_EMULATOR_FOR_TESTS", "false")
    } else {
        variant.buildConfigField("boolean", "USE_EMULATOR_FOR_TESTS", "true")
    }
    def localProps = new Properties()
    try {
        file("local.properties").withInputStream { localProps.load(it) }
    } catch (FileNotFoundException e) {
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.2'
    implementation project(':firebase-common')
    implementation project(':firebase-components')
    implementation project(':firebase-common:ktx')
    implementation project(':firebase-firestore')
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.gms:play-services-tasks:18.0.1'

    testImplementation project(':firebase-database-collection')
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    testImplementation 'com.google.android.gms:play-services-tasks:18.0.1'
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation 'junit:junit:4.12'
    testImplementation "com.google.truth:truth:$googleTruthVersion"
    testImplementation 'androidx.test:core:1.2.0'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.9"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
}
