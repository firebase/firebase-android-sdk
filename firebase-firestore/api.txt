// Signature format: 3.0
package com.google.firebase.firestore {

  public abstract class AggregateField {
    method public static com.google.firebase.firestore.AggregateField.AverageAggregateField average(com.google.firebase.firestore.FieldPath);
    method public static com.google.firebase.firestore.AggregateField.AverageAggregateField average(String);
    method public static com.google.firebase.firestore.AggregateField.CountAggregateField count();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getAlias();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getFieldPath();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getOperator();
    method public static com.google.firebase.firestore.AggregateField.SumAggregateField sum(com.google.firebase.firestore.FieldPath);
    method public static com.google.firebase.firestore.AggregateField.SumAggregateField sum(String);
  }

  public static class AggregateField.AverageAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public static class AggregateField.CountAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public static class AggregateField.SumAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public class AggregateQuery {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.AggregateQuerySnapshot!> get(com.google.firebase.firestore.AggregateSource);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public java.util.List<com.google.firebase.firestore.AggregateField!> getAggregateFields();
    method public com.google.firebase.firestore.Query getQuery();
  }

  public class AggregateQuerySnapshot {
    method public Object? get(com.google.firebase.firestore.AggregateField);
    method public Double? get(com.google.firebase.firestore.AggregateField.AverageAggregateField);
    method public long get(com.google.firebase.firestore.AggregateField.CountAggregateField);
    method public long getCount();
    method public Double? getDouble(com.google.firebase.firestore.AggregateField);
    method public Long? getLong(com.google.firebase.firestore.AggregateField);
    method public com.google.firebase.firestore.AggregateQuery getQuery();
  }

  public enum AggregateSource {
    enum_constant public static final com.google.firebase.firestore.AggregateSource SERVER;
  }

  public class Blob implements java.lang.Comparable<com.google.firebase.firestore.Blob!> {
    method public int compareTo(com.google.firebase.firestore.Blob);
    method public static com.google.firebase.firestore.Blob fromBytes(byte[]);
    method public byte[] toBytes();
  }

  public class CollectionReference extends com.google.firebase.firestore.Query {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentReference!> add(Object);
    method public com.google.firebase.firestore.DocumentReference document();
    method public com.google.firebase.firestore.DocumentReference document(String);
    method public String getId();
    method public com.google.firebase.firestore.DocumentReference? getParent();
    method public String getPath();
  }

  public class DocumentChange {
    method public com.google.firebase.firestore.QueryDocumentSnapshot getDocument();
    method public int getNewIndex();
    method public int getOldIndex();
    method public com.google.firebase.firestore.DocumentChange.Type getType();
  }

  public enum DocumentChange.Type {
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type ADDED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type MODIFIED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type REMOVED;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) public @interface DocumentId {
  }

  public class DocumentReference {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.SnapshotListenOptions, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.CollectionReference collection(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> delete();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot!> get();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot!> get(com.google.firebase.firestore.Source);
    method public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method public String getId();
    method public com.google.firebase.firestore.CollectionReference getParent();
    method public String getPath();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> set(Object);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> set(Object, com.google.firebase.firestore.SetOptions);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(String, Object?, java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public class DocumentSnapshot {
    method public boolean contains(com.google.firebase.firestore.FieldPath);
    method public boolean contains(String);
    method public boolean exists();
    method public Object? get(com.google.firebase.firestore.FieldPath);
    method public Object? get(com.google.firebase.firestore.FieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public <T> T? get(com.google.firebase.firestore.FieldPath, Class<T!>);
    method public <T> T? get(com.google.firebase.firestore.FieldPath, Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public Object? get(String);
    method public Object? get(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public <T> T? get(String, Class<T!>);
    method public <T> T? get(String, Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.Blob? getBlob(String);
    method public Boolean? getBoolean(String);
    method public java.util.Map<java.lang.String!,java.lang.Object!>? getData();
    method public java.util.Map<java.lang.String!,java.lang.Object!>? getData(com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public java.util.Date? getDate(String);
    method public java.util.Date? getDate(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.DocumentReference? getDocumentReference(String);
    method public Double? getDouble(String);
    method public com.google.firebase.firestore.GeoPoint? getGeoPoint(String);
    method public String getId();
    method public Long? getLong(String);
    method public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method public com.google.firebase.firestore.DocumentReference getReference();
    method public String? getString(String);
    method public com.google.firebase.Timestamp? getTimestamp(String);
    method public com.google.firebase.Timestamp? getTimestamp(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.VectorValue? getVectorValue(String);
    method public <T> T? toObject(Class<T!>);
    method public <T> T? toObject(Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  public enum DocumentSnapshot.ServerTimestampBehavior {
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior ESTIMATE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior NONE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior PREVIOUS;
  }

  public interface EventListener<T> {
    method public void onEvent(T?, com.google.firebase.firestore.FirebaseFirestoreException?);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Exclude {
  }

  public final class FieldPath {
    method public static com.google.firebase.firestore.FieldPath documentId();
    method public static com.google.firebase.firestore.FieldPath of(java.lang.String!...!);
  }

  public abstract class FieldValue {
    method public static com.google.firebase.firestore.FieldValue arrayRemove(java.lang.Object!...!);
    method public static com.google.firebase.firestore.FieldValue arrayUnion(java.lang.Object!...!);
    method public static com.google.firebase.firestore.FieldValue delete();
    method public static com.google.firebase.firestore.FieldValue increment(double);
    method public static com.google.firebase.firestore.FieldValue increment(long);
    method public static com.google.firebase.firestore.FieldValue serverTimestamp();
    method public static com.google.firebase.firestore.VectorValue vector(double[]);
  }

  public class Filter {
    ctor public Filter();
    method public static com.google.firebase.firestore.Filter and(com.google.firebase.firestore.Filter!...!);
    method public static com.google.firebase.firestore.Filter arrayContains(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter arrayContains(String, Object?);
    method public static com.google.firebase.firestore.Filter arrayContainsAny(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter arrayContainsAny(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter equalTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter equalTo(String, Object?);
    method public static com.google.firebase.firestore.Filter greaterThan(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter greaterThan(String, Object?);
    method public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter inArray(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter inArray(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter lessThan(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter lessThan(String, Object?);
    method public static com.google.firebase.firestore.Filter lessThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter lessThanOrEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter notEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter notEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter notInArray(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter notInArray(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter or(com.google.firebase.firestore.Filter!...!);
  }

  public class FirebaseFirestore {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(android.app.Activity, Runnable);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(Runnable);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(java.util.concurrent.Executor, Runnable);
    method public com.google.firebase.firestore.WriteBatch batch();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> clearPersistence();
    method public com.google.firebase.firestore.CollectionReference collection(String);
    method public com.google.firebase.firestore.Query collectionGroup(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> disableNetwork();
    method public com.google.firebase.firestore.DocumentReference document(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> enableNetwork();
    method public com.google.firebase.FirebaseApp getApp();
    method public com.google.firebase.firestore.FirebaseFirestoreSettings getFirestoreSettings();
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance();
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(com.google.firebase.FirebaseApp);
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(com.google.firebase.FirebaseApp, String);
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(String);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.Query!> getNamedQuery(String);
    method public com.google.firebase.firestore.PersistentCacheIndexManager? getPersistentCacheIndexManager();
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(byte[]);
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(java.io.InputStream);
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(java.nio.ByteBuffer);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> runBatch(com.google.firebase.firestore.WriteBatch.Function);
    method public <TResult> com.google.android.gms.tasks.Task<TResult!> runTransaction(com.google.firebase.firestore.Transaction.Function<TResult!>);
    method public <TResult> com.google.android.gms.tasks.Task<TResult!> runTransaction(com.google.firebase.firestore.TransactionOptions, com.google.firebase.firestore.Transaction.Function<TResult!>);
    method public void setFirestoreSettings(com.google.firebase.firestore.FirebaseFirestoreSettings);
    method @Deprecated @com.google.firebase.annotations.PreviewApi public com.google.android.gms.tasks.Task<java.lang.Void!> setIndexConfiguration(String);
    method public static void setLoggingEnabled(boolean);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> terminate();
    method public void useEmulator(String, int);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> waitForPendingWrites();
  }

  public class FirebaseFirestoreException extends com.google.firebase.FirebaseException {
    ctor public FirebaseFirestoreException(String, com.google.firebase.firestore.FirebaseFirestoreException.Code);
    ctor public FirebaseFirestoreException(String, com.google.firebase.firestore.FirebaseFirestoreException.Code, Throwable?);
    method public com.google.firebase.firestore.FirebaseFirestoreException.Code getCode();
  }

  public enum FirebaseFirestoreException.Code {
    method public static com.google.firebase.firestore.FirebaseFirestoreException.Code fromValue(int);
    method public int value();
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ABORTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ALREADY_EXISTS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code CANCELLED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DATA_LOSS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DEADLINE_EXCEEDED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code FAILED_PRECONDITION;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INTERNAL;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INVALID_ARGUMENT;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code NOT_FOUND;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OK;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OUT_OF_RANGE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code PERMISSION_DENIED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code RESOURCE_EXHAUSTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAUTHENTICATED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAVAILABLE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNIMPLEMENTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNKNOWN;
  }

  public final class FirebaseFirestoreSettings {
    method public com.google.firebase.firestore.LocalCacheSettings? getCacheSettings();
    method @Deprecated public long getCacheSizeBytes();
    method public String getHost();
    method @Deprecated public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    field public static final long CACHE_SIZE_UNLIMITED = -1L; // 0xffffffffffffffffL
  }

  public static final class FirebaseFirestoreSettings.Builder {
    ctor public FirebaseFirestoreSettings.Builder();
    ctor public FirebaseFirestoreSettings.Builder(com.google.firebase.firestore.FirebaseFirestoreSettings);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings build();
    method @Deprecated public long getCacheSizeBytes();
    method public String getHost();
    method @Deprecated public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    method @Deprecated public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setCacheSizeBytes(long);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setHost(String);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setLocalCacheSettings(com.google.firebase.firestore.LocalCacheSettings);
    method @Deprecated public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setPersistenceEnabled(boolean);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setSslEnabled(boolean);
  }

  public final class FirestoreKt {
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> dataObjects(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<java.util.List<? extends T>> dataObjects(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app, String database);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, String database);
    method public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static com.google.firebase.firestore.FirebaseFirestore getFirestore(com.google.firebase.Firebase);
    method public static com.google.firebase.firestore.MemoryCacheSettings memoryCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryCacheSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryEagerGcSettings memoryEagerGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryEagerGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryLruGcSettings memoryLruGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryLruGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.PersistentCacheSettings persistentCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.PersistentCacheSettings.Builder,kotlin.Unit> init);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.DocumentSnapshot> snapshots(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.QuerySnapshot> snapshots(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot);
    method public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot);
    method public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot);
    method public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

  public class GeoPoint implements java.lang.Comparable<com.google.firebase.firestore.GeoPoint!> {
    ctor public GeoPoint(double, double);
    method public int compareTo(com.google.firebase.firestore.GeoPoint);
    method public double getLatitude();
    method public double getLongitude();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface IgnoreExtraProperties {
  }

  public enum ListenSource {
    enum_constant public static final com.google.firebase.firestore.ListenSource CACHE;
    enum_constant public static final com.google.firebase.firestore.ListenSource DEFAULT;
  }

  public interface ListenerRegistration {
    method public void remove();
  }

  public class LoadBundleTask extends com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(android.app.Activity, com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(android.app.Activity, com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(android.app.Activity, com.google.android.gms.tasks.OnFailureListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(com.google.android.gms.tasks.OnFailureListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnFailureListener);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(android.app.Activity, com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(java.util.concurrent.Executor, com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(android.app.Activity, com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWith(com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWith(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWithTask(com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,com.google.android.gms.tasks.Task<TContinuationResult!>!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWithTask(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,com.google.android.gms.tasks.Task<TContinuationResult!>!>);
    method public Exception? getException();
    method public com.google.firebase.firestore.LoadBundleTaskProgress getResult();
    method public <X extends java.lang.Throwable> com.google.firebase.firestore.LoadBundleTaskProgress getResult(Class<X!>) throws X;
    method public boolean isCanceled();
    method public boolean isComplete();
    method public boolean isSuccessful();
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> onSuccessTask(com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> onSuccessTask(java.util.concurrent.Executor, com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
  }

  public final class LoadBundleTaskProgress {
    method public long getBytesLoaded();
    method public int getDocumentsLoaded();
    method public Exception? getException();
    method public com.google.firebase.firestore.LoadBundleTaskProgress.TaskState getTaskState();
    method public long getTotalBytes();
    method public int getTotalDocuments();
  }

  public enum LoadBundleTaskProgress.TaskState {
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState ERROR;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState RUNNING;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState SUCCESS;
  }

  public interface LocalCacheSettings {
  }

  public final class MemoryCacheSettings implements com.google.firebase.firestore.LocalCacheSettings {
    method public com.google.firebase.firestore.MemoryGarbageCollectorSettings getGarbageCollectorSettings();
    method public static com.google.firebase.firestore.MemoryCacheSettings.Builder newBuilder();
  }

  public static class MemoryCacheSettings.Builder {
    method public com.google.firebase.firestore.MemoryCacheSettings build();
    method public com.google.firebase.firestore.MemoryCacheSettings.Builder setGcSettings(com.google.firebase.firestore.MemoryGarbageCollectorSettings);
  }

  public final class MemoryEagerGcSettings implements com.google.firebase.firestore.MemoryGarbageCollectorSettings {
    method public static com.google.firebase.firestore.MemoryEagerGcSettings.Builder newBuilder();
  }

  public static class MemoryEagerGcSettings.Builder {
    method public com.google.firebase.firestore.MemoryEagerGcSettings build();
  }

  public interface MemoryGarbageCollectorSettings {
  }

  public final class MemoryLruGcSettings implements com.google.firebase.firestore.MemoryGarbageCollectorSettings {
    method public long getSizeBytes();
    method public static com.google.firebase.firestore.MemoryLruGcSettings.Builder newBuilder();
  }

  public static class MemoryLruGcSettings.Builder {
    method public com.google.firebase.firestore.MemoryLruGcSettings build();
    method public com.google.firebase.firestore.MemoryLruGcSettings.Builder setSizeBytes(long);
  }

  public enum MetadataChanges {
    enum_constant public static final com.google.firebase.firestore.MetadataChanges EXCLUDE;
    enum_constant public static final com.google.firebase.firestore.MetadataChanges INCLUDE;
  }

  public interface OnProgressListener<ProgressT> {
    method public void onProgress(ProgressT);
  }

  public final class PersistentCacheIndexManager {
    method public void deleteAllIndexes();
    method public void disableIndexAutoCreation();
    method public void enableIndexAutoCreation();
  }

  public final class PersistentCacheSettings implements com.google.firebase.firestore.LocalCacheSettings {
    method public long getSizeBytes();
    method public static com.google.firebase.firestore.PersistentCacheSettings.Builder newBuilder();
  }

  public static class PersistentCacheSettings.Builder {
    method public com.google.firebase.firestore.PersistentCacheSettings build();
    method public com.google.firebase.firestore.PersistentCacheSettings.Builder setSizeBytes(long);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface PropertyName {
    method public abstract String value();
  }

  public class Query {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.SnapshotListenOptions, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.AggregateQuery aggregate(com.google.firebase.firestore.AggregateField, com.google.firebase.firestore.AggregateField!...);
    method public com.google.firebase.firestore.AggregateQuery count();
    method public com.google.firebase.firestore.Query endAt(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query endAt(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query endBefore(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query endBefore(java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot!> get();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot!> get(com.google.firebase.firestore.Source);
    method public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method public com.google.firebase.firestore.Query limit(long);
    method public com.google.firebase.firestore.Query limitToLast(long);
    method public com.google.firebase.firestore.Query orderBy(com.google.firebase.firestore.FieldPath);
    method public com.google.firebase.firestore.Query orderBy(com.google.firebase.firestore.FieldPath, com.google.firebase.firestore.Query.Direction);
    method public com.google.firebase.firestore.Query orderBy(String);
    method public com.google.firebase.firestore.Query orderBy(String, com.google.firebase.firestore.Query.Direction);
    method public com.google.firebase.firestore.Query startAfter(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query startAfter(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query startAt(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query startAt(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query where(com.google.firebase.firestore.Filter);
    method public com.google.firebase.firestore.Query whereArrayContains(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereArrayContains(String, Object);
    method public com.google.firebase.firestore.Query whereArrayContainsAny(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereArrayContainsAny(String, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public com.google.firebase.firestore.Query whereEqualTo(String, Object?);
    method public com.google.firebase.firestore.Query whereGreaterThan(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereGreaterThan(String, Object);
    method public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(String, Object);
    method public com.google.firebase.firestore.Query whereIn(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereIn(String, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereLessThan(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereLessThan(String, Object);
    method public com.google.firebase.firestore.Query whereLessThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereLessThanOrEqualTo(String, Object);
    method public com.google.firebase.firestore.Query whereNotEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public com.google.firebase.firestore.Query whereNotEqualTo(String, Object?);
    method public com.google.firebase.firestore.Query whereNotIn(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereNotIn(String, java.util.List<? extends java.lang.Object!>);
  }

  public enum Query.Direction {
    enum_constant public static final com.google.firebase.firestore.Query.Direction ASCENDING;
    enum_constant public static final com.google.firebase.firestore.Query.Direction DESCENDING;
  }

  public class QueryDocumentSnapshot extends com.google.firebase.firestore.DocumentSnapshot {
  }

  public class QuerySnapshot implements java.lang.Iterable<com.google.firebase.firestore.QueryDocumentSnapshot!> {
    method public java.util.List<com.google.firebase.firestore.DocumentChange!> getDocumentChanges();
    method public java.util.List<com.google.firebase.firestore.DocumentChange!> getDocumentChanges(com.google.firebase.firestore.MetadataChanges);
    method public java.util.List<com.google.firebase.firestore.DocumentSnapshot!> getDocuments();
    method public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method public com.google.firebase.firestore.Query getQuery();
    method public boolean isEmpty();
    method public java.util.Iterator<com.google.firebase.firestore.QueryDocumentSnapshot!> iterator();
    method public int size();
    method public <T> java.util.List<T!> toObjects(Class<T!>);
    method public <T> java.util.List<T!> toObjects(Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface ServerTimestamp {
  }

  public final class SetOptions {
    method public static com.google.firebase.firestore.SetOptions merge();
    method public static com.google.firebase.firestore.SetOptions mergeFieldPaths(java.util.List<com.google.firebase.firestore.FieldPath!>);
    method public static com.google.firebase.firestore.SetOptions mergeFields(java.lang.String!...!);
    method public static com.google.firebase.firestore.SetOptions mergeFields(java.util.List<java.lang.String!>);
  }

  public final class SnapshotListenOptions {
    method public android.app.Activity? getActivity();
    method public java.util.concurrent.Executor getExecutor();
    method public com.google.firebase.firestore.MetadataChanges getMetadataChanges();
    method public com.google.firebase.firestore.ListenSource getSource();
  }

  public static class SnapshotListenOptions.Builder {
    ctor public SnapshotListenOptions.Builder();
    method public com.google.firebase.firestore.SnapshotListenOptions build();
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setActivity(android.app.Activity);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setExecutor(java.util.concurrent.Executor);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setMetadataChanges(com.google.firebase.firestore.MetadataChanges);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setSource(com.google.firebase.firestore.ListenSource);
  }

  public class SnapshotMetadata {
    method public boolean hasPendingWrites();
    method public boolean isFromCache();
  }

  public enum Source {
    enum_constant public static final com.google.firebase.firestore.Source CACHE;
    enum_constant public static final com.google.firebase.firestore.Source DEFAULT;
    enum_constant public static final com.google.firebase.firestore.Source SERVER;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface ThrowOnExtraProperties {
  }

  public class Transaction {
    method public com.google.firebase.firestore.Transaction delete(com.google.firebase.firestore.DocumentReference);
    method public com.google.firebase.firestore.DocumentSnapshot get(com.google.firebase.firestore.DocumentReference) throws com.google.firebase.firestore.FirebaseFirestoreException;
    method public com.google.firebase.firestore.Transaction set(com.google.firebase.firestore.DocumentReference, Object);
    method public com.google.firebase.firestore.Transaction set(com.google.firebase.firestore.DocumentReference, Object, com.google.firebase.firestore.SetOptions);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, String, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public static interface Transaction.Function<TResult> {
    method public TResult? apply(com.google.firebase.firestore.Transaction) throws com.google.firebase.firestore.FirebaseFirestoreException;
  }

  public final class TransactionOptions {
    method public int getMaxAttempts();
  }

  public static final class TransactionOptions.Builder {
    ctor public TransactionOptions.Builder();
    ctor public TransactionOptions.Builder(com.google.firebase.firestore.TransactionOptions);
    method public com.google.firebase.firestore.TransactionOptions build();
    method public com.google.firebase.firestore.TransactionOptions.Builder setMaxAttempts(int);
  }

  public class VectorValue {
    method public double[] toArray();
  }

  public class WriteBatch {
    method public com.google.android.gms.tasks.Task<java.lang.Void!> commit();
    method public com.google.firebase.firestore.WriteBatch delete(com.google.firebase.firestore.DocumentReference);
    method public com.google.firebase.firestore.WriteBatch set(com.google.firebase.firestore.DocumentReference, Object);
    method public com.google.firebase.firestore.WriteBatch set(com.google.firebase.firestore.DocumentReference, Object, com.google.firebase.firestore.SetOptions);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, String, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public static interface WriteBatch.Function {
    method public void apply(com.google.firebase.firestore.WriteBatch);
  }

}

package com.google.firebase.firestore.ktx {

  public final class FirestoreKt {
    method @Deprecated public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> dataObjects(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static inline <reified T> kotlinx.coroutines.flow.Flow<java.util.List<? extends T>> dataObjects(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app, String database);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, String database);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore getFirestore(com.google.firebase.ktx.Firebase);
    method public static com.google.firebase.firestore.MemoryCacheSettings memoryCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryCacheSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryEagerGcSettings memoryEagerGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryEagerGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryLruGcSettings memoryLruGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryLruGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.PersistentCacheSettings persistentCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.PersistentCacheSettings.Builder,kotlin.Unit> init);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.DocumentSnapshot> snapshots(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.QuerySnapshot> snapshots(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot);
    method @Deprecated public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot);
    method @Deprecated public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot);
    method @Deprecated public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

}

