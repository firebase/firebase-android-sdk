// Signature format: 2.0
package com.google.firebase {

  public final class Timestamp implements java.lang.Comparable<com.google.firebase.Timestamp> android.os.Parcelable {
    ctor public Timestamp(long, int);
    ctor protected Timestamp(@NonNull android.os.Parcel);
    ctor public Timestamp(@NonNull java.util.Date);
    method public int compareTo(@NonNull com.google.firebase.Timestamp);
    method public int describeContents();
    method public int getNanoseconds();
    method public long getSeconds();
    method @NonNull public static com.google.firebase.Timestamp now();
    method @NonNull public java.util.Date toDate();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<com.google.firebase.Timestamp> CREATOR;
  }

}

package com.google.firebase.firestore {

  public class AggregateQuery {
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.AggregateQuerySnapshot> get(@NonNull com.google.firebase.firestore.AggregateSource);
    method @NonNull public com.google.firebase.firestore.Query getQuery();
  }

  public class AggregateQuerySnapshot {
    method public long getCount();
    method @NonNull public com.google.firebase.firestore.AggregateQuery getQuery();
  }

  public enum AggregateSource {
    enum_constant public static final com.google.firebase.firestore.AggregateSource SERVER;
  }

  public class Blob implements java.lang.Comparable<com.google.firebase.firestore.Blob> {
    method public int compareTo(@NonNull com.google.firebase.firestore.Blob);
    method @NonNull public static com.google.firebase.firestore.Blob fromBytes(@NonNull byte[]);
    method @NonNull public byte[] toBytes();
  }

  public class CollectionReference extends com.google.firebase.firestore.Query {
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentReference> add(@NonNull Object);
    method @NonNull public com.google.firebase.firestore.DocumentReference document();
    method @NonNull public com.google.firebase.firestore.DocumentReference document(@NonNull String);
    method @NonNull public String getId();
    method @Nullable public com.google.firebase.firestore.DocumentReference getParent();
    method @NonNull public String getPath();
  }

  public class DocumentChange {
    method @NonNull public com.google.firebase.firestore.QueryDocumentSnapshot getDocument();
    method public int getNewIndex();
    method public int getOldIndex();
    method @NonNull public com.google.firebase.firestore.DocumentChange.Type getType();
  }

  public enum DocumentChange.Type {
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type ADDED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type MODIFIED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type REMOVED;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) public @interface DocumentId {
  }

  public class DocumentReference {
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull android.app.Activity, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull android.app.Activity, @NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot>);
    method @NonNull public com.google.firebase.firestore.CollectionReference collection(@NonNull String);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> delete();
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot> get();
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot> get(@NonNull com.google.firebase.firestore.Source);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method @NonNull public String getId();
    method @NonNull public com.google.firebase.firestore.CollectionReference getParent();
    method @NonNull public String getPath();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> set(@NonNull Object);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> set(@NonNull Object, @NonNull com.google.firebase.firestore.SetOptions);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> update(@NonNull java.util.Map<java.lang.String,java.lang.Object>);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> update(@NonNull String, @Nullable Object, java.lang.Object...);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> update(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object, java.lang.Object...);
  }

  public class DocumentSnapshot {
    method public boolean contains(@NonNull String);
    method public boolean contains(@NonNull com.google.firebase.firestore.FieldPath);
    method public boolean exists();
    method @Nullable public Object get(@NonNull String);
    method @Nullable public Object get(@NonNull String, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public Object get(@NonNull com.google.firebase.firestore.FieldPath);
    method @Nullable public Object get(@NonNull com.google.firebase.firestore.FieldPath, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public <T> T get(@NonNull String, @NonNull Class<T>);
    method @Nullable public <T> T get(@NonNull String, @NonNull Class<T>, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public <T> T get(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Class<T>);
    method @Nullable public <T> T get(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Class<T>, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public com.google.firebase.firestore.Blob getBlob(@NonNull String);
    method @Nullable public Boolean getBoolean(@NonNull String);
    method @Nullable public java.util.Map<java.lang.String,java.lang.Object> getData();
    method @Nullable public java.util.Map<java.lang.String,java.lang.Object> getData(@NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public java.util.Date getDate(@NonNull String);
    method @Nullable public java.util.Date getDate(@NonNull String, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public com.google.firebase.firestore.DocumentReference getDocumentReference(@NonNull String);
    method @Nullable public Double getDouble(@NonNull String);
    method @Nullable public com.google.firebase.firestore.GeoPoint getGeoPoint(@NonNull String);
    method @NonNull public String getId();
    method @Nullable public Long getLong(@NonNull String);
    method @NonNull public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method @NonNull public com.google.firebase.firestore.DocumentReference getReference();
    method @Nullable public String getString(@NonNull String);
    method @Nullable public com.google.firebase.Timestamp getTimestamp(@NonNull String);
    method @Nullable public com.google.firebase.Timestamp getTimestamp(@NonNull String, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method @Nullable public <T> T toObject(@NonNull Class<T>);
    method @Nullable public <T> T toObject(@NonNull Class<T>, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  public enum DocumentSnapshot.ServerTimestampBehavior {
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior ESTIMATE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior NONE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior PREVIOUS;
  }

  public interface EventListener<T> {
    method public void onEvent(@Nullable T, @Nullable com.google.firebase.firestore.FirebaseFirestoreException);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Exclude {
  }

  public final class FieldPath {
    method @NonNull public static com.google.firebase.firestore.FieldPath documentId();
    method @NonNull public static com.google.firebase.firestore.FieldPath of(java.lang.String...);
  }

  public abstract class FieldValue {
    method @NonNull public static com.google.firebase.firestore.FieldValue arrayRemove(java.lang.Object...);
    method @NonNull public static com.google.firebase.firestore.FieldValue arrayUnion(java.lang.Object...);
    method @NonNull public static com.google.firebase.firestore.FieldValue delete();
    method @NonNull public static com.google.firebase.firestore.FieldValue increment(long);
    method @NonNull public static com.google.firebase.firestore.FieldValue increment(double);
    method @NonNull public static com.google.firebase.firestore.FieldValue serverTimestamp();
  }

  public class Filter {
    ctor public Filter();
    method @NonNull public static com.google.firebase.firestore.Filter and(com.google.firebase.firestore.Filter...);
    method @NonNull public static com.google.firebase.firestore.Filter arrayContains(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter arrayContains(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter arrayContainsAny(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter arrayContainsAny(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter equalTo(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter equalTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter greaterThan(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter greaterThan(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter inArray(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter inArray(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter lessThan(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter lessThan(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter lessThanOrEqualTo(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter lessThanOrEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter notEqualTo(@NonNull String, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter notEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public static com.google.firebase.firestore.Filter notInArray(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter notInArray(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
    method @NonNull public static com.google.firebase.firestore.Filter or(com.google.firebase.firestore.Filter...);
  }

  public class FirebaseFirestore {
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(@NonNull Runnable);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(@NonNull android.app.Activity, @NonNull Runnable);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(@NonNull java.util.concurrent.Executor, @NonNull Runnable);
    method @NonNull public com.google.firebase.firestore.WriteBatch batch();
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> clearPersistence();
    method @NonNull public com.google.firebase.firestore.CollectionReference collection(@NonNull String);
    method @NonNull public com.google.firebase.firestore.Query collectionGroup(@NonNull String);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> disableNetwork();
    method @NonNull public com.google.firebase.firestore.DocumentReference document(@NonNull String);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> enableNetwork();
    method @NonNull public com.google.firebase.FirebaseApp getApp();
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings getFirestoreSettings();
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore getInstance();
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore getInstance(@NonNull com.google.firebase.FirebaseApp);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.Query> getNamedQuery(@NonNull String);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask loadBundle(@NonNull java.io.InputStream);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask loadBundle(@NonNull byte[]);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask loadBundle(@NonNull java.nio.ByteBuffer);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> runBatch(@NonNull com.google.firebase.firestore.WriteBatch.Function);
    method @NonNull public <TResult> com.google.android.gms.tasks.Task<TResult> runTransaction(@NonNull com.google.firebase.firestore.Transaction.Function<TResult>);
    method @NonNull public <TResult> com.google.android.gms.tasks.Task<TResult> runTransaction(@NonNull com.google.firebase.firestore.TransactionOptions, @NonNull com.google.firebase.firestore.Transaction.Function<TResult>);
    method public void setFirestoreSettings(@NonNull com.google.firebase.firestore.FirebaseFirestoreSettings);
    method @NonNull @com.google.firebase.annotations.PreviewApi public com.google.android.gms.tasks.Task<java.lang.Void> setIndexConfiguration(@NonNull String);
    method public static void setLoggingEnabled(boolean);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> terminate();
    method public void useEmulator(@NonNull String, int);
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> waitForPendingWrites();
  }

  public class FirebaseFirestoreException extends com.google.firebase.FirebaseException {
    ctor public FirebaseFirestoreException(@NonNull String, @NonNull com.google.firebase.firestore.FirebaseFirestoreException.Code);
    ctor public FirebaseFirestoreException(@NonNull String, @NonNull com.google.firebase.firestore.FirebaseFirestoreException.Code, @Nullable Throwable);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreException.Code getCode();
  }

  public enum FirebaseFirestoreException.Code {
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestoreException.Code fromValue(int);
    method public int value();
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ABORTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ALREADY_EXISTS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code CANCELLED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DATA_LOSS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DEADLINE_EXCEEDED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code FAILED_PRECONDITION;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INTERNAL;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INVALID_ARGUMENT;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code NOT_FOUND;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OK;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OUT_OF_RANGE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code PERMISSION_DENIED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code RESOURCE_EXHAUSTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAUTHENTICATED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAVAILABLE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNIMPLEMENTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNKNOWN;
  }

  public final class FirebaseFirestoreSettings {
    method public long getCacheSizeBytes();
    method @NonNull public String getHost();
    method public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    field public static final long CACHE_SIZE_UNLIMITED = -1L; // 0xffffffffffffffffL
  }

  public static final class FirebaseFirestoreSettings.Builder {
    ctor public FirebaseFirestoreSettings.Builder();
    ctor public FirebaseFirestoreSettings.Builder(@NonNull com.google.firebase.firestore.FirebaseFirestoreSettings);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings build();
    method public long getCacheSizeBytes();
    method @NonNull public String getHost();
    method public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setCacheSizeBytes(long);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setHost(@NonNull String);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setPersistenceEnabled(boolean);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setSslEnabled(boolean);
  }

  public class GeoPoint implements java.lang.Comparable<com.google.firebase.firestore.GeoPoint> {
    ctor public GeoPoint(double, double);
    method public int compareTo(@NonNull com.google.firebase.firestore.GeoPoint);
    method public double getLatitude();
    method public double getLongitude();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface IgnoreExtraProperties {
  }

  public interface ListenerRegistration {
    method public void remove();
  }

  public class LoadBundleTask extends com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> {
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCanceledListener(@NonNull com.google.android.gms.tasks.OnCanceledListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCanceledListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.OnCanceledListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCanceledListener(@NonNull android.app.Activity, @NonNull com.google.android.gms.tasks.OnCanceledListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCompleteListener(@NonNull com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCompleteListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnCompleteListener(@NonNull android.app.Activity, @NonNull com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnFailureListener(@NonNull com.google.android.gms.tasks.OnFailureListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnFailureListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.OnFailureListener);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnFailureListener(@NonNull android.app.Activity, @NonNull com.google.android.gms.tasks.OnFailureListener);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(@NonNull com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(@NonNull android.app.Activity, @NonNull com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnSuccessListener(@NonNull com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnSuccessListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress> addOnSuccessListener(@NonNull android.app.Activity, @NonNull com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress>);
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> continueWith(@NonNull com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress,TContinuationResult>);
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> continueWith(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress,TContinuationResult>);
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> continueWithTask(@NonNull com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress,com.google.android.gms.tasks.Task<TContinuationResult>>);
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> continueWithTask(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress,com.google.android.gms.tasks.Task<TContinuationResult>>);
    method @Nullable public Exception getException();
    method @NonNull public com.google.firebase.firestore.LoadBundleTaskProgress getResult();
    method @NonNull public <X extends java.lang.Throwable> com.google.firebase.firestore.LoadBundleTaskProgress getResult(@NonNull Class<X>) throws X;
    method public boolean isCanceled();
    method public boolean isComplete();
    method public boolean isSuccessful();
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> onSuccessTask(@NonNull com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress,TContinuationResult>);
    method @NonNull public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult> onSuccessTask(@NonNull java.util.concurrent.Executor, @NonNull com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress,TContinuationResult>);
  }

  public final class LoadBundleTaskProgress {
    method public long getBytesLoaded();
    method public int getDocumentsLoaded();
    method @Nullable public Exception getException();
    method @NonNull public com.google.firebase.firestore.LoadBundleTaskProgress.TaskState getTaskState();
    method public long getTotalBytes();
    method public int getTotalDocuments();
  }

  public enum LoadBundleTaskProgress.TaskState {
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState ERROR;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState RUNNING;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState SUCCESS;
  }

  public enum MetadataChanges {
    enum_constant public static final com.google.firebase.firestore.MetadataChanges EXCLUDE;
    enum_constant public static final com.google.firebase.firestore.MetadataChanges INCLUDE;
  }

  public interface OnProgressListener<ProgressT> {
    method public void onProgress(@NonNull ProgressT);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface PropertyName {
    method public abstract String value();
  }

  public class Query {
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull android.app.Activity, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull java.util.concurrent.Executor, @NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(@NonNull android.app.Activity, @NonNull com.google.firebase.firestore.MetadataChanges, @NonNull com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot>);
    method @NonNull public com.google.firebase.firestore.AggregateQuery count();
    method @NonNull public com.google.firebase.firestore.Query endAt(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @NonNull public com.google.firebase.firestore.Query endAt(java.lang.Object...);
    method @NonNull public com.google.firebase.firestore.Query endBefore(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @NonNull public com.google.firebase.firestore.Query endBefore(java.lang.Object...);
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot> get();
    method @NonNull public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot> get(@NonNull com.google.firebase.firestore.Source);
    method @NonNull public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method @NonNull public com.google.firebase.firestore.Query limit(long);
    method @NonNull public com.google.firebase.firestore.Query limitToLast(long);
    method @NonNull public com.google.firebase.firestore.Query orderBy(@NonNull String);
    method @NonNull public com.google.firebase.firestore.Query orderBy(@NonNull com.google.firebase.firestore.FieldPath);
    method @NonNull public com.google.firebase.firestore.Query orderBy(@NonNull String, @NonNull com.google.firebase.firestore.Query.Direction);
    method @NonNull public com.google.firebase.firestore.Query orderBy(@NonNull com.google.firebase.firestore.FieldPath, @NonNull com.google.firebase.firestore.Query.Direction);
    method @NonNull public com.google.firebase.firestore.Query startAfter(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @NonNull public com.google.firebase.firestore.Query startAfter(java.lang.Object...);
    method @NonNull public com.google.firebase.firestore.Query startAt(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @NonNull public com.google.firebase.firestore.Query startAt(java.lang.Object...);
    method @NonNull public com.google.firebase.firestore.Query where(@NonNull com.google.firebase.firestore.Filter);
    method @NonNull public com.google.firebase.firestore.Query whereArrayContains(@NonNull String, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereArrayContains(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereArrayContainsAny(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public com.google.firebase.firestore.Query whereArrayContainsAny(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
    method @NonNull public com.google.firebase.firestore.Query whereEqualTo(@NonNull String, @Nullable Object);
    method @NonNull public com.google.firebase.firestore.Query whereEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public com.google.firebase.firestore.Query whereGreaterThan(@NonNull String, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereGreaterThan(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(@NonNull String, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereIn(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public com.google.firebase.firestore.Query whereIn(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
    method @NonNull public com.google.firebase.firestore.Query whereLessThan(@NonNull String, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereLessThan(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereLessThanOrEqualTo(@NonNull String, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereLessThanOrEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Query whereNotEqualTo(@NonNull String, @Nullable Object);
    method @NonNull public com.google.firebase.firestore.Query whereNotEqualTo(@NonNull com.google.firebase.firestore.FieldPath, @Nullable Object);
    method @NonNull public com.google.firebase.firestore.Query whereNotIn(@NonNull String, @NonNull java.util.List<?>);
    method @NonNull public com.google.firebase.firestore.Query whereNotIn(@NonNull com.google.firebase.firestore.FieldPath, @NonNull java.util.List<?>);
  }

  public enum Query.Direction {
    enum_constant public static final com.google.firebase.firestore.Query.Direction ASCENDING;
    enum_constant public static final com.google.firebase.firestore.Query.Direction DESCENDING;
  }

  public class QueryDocumentSnapshot extends com.google.firebase.firestore.DocumentSnapshot {
  }

  public class QuerySnapshot implements java.lang.Iterable<com.google.firebase.firestore.QueryDocumentSnapshot> {
    method @NonNull public java.util.List<com.google.firebase.firestore.DocumentChange> getDocumentChanges();
    method @NonNull public java.util.List<com.google.firebase.firestore.DocumentChange> getDocumentChanges(@NonNull com.google.firebase.firestore.MetadataChanges);
    method @NonNull public java.util.List<com.google.firebase.firestore.DocumentSnapshot> getDocuments();
    method @NonNull public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method @NonNull public com.google.firebase.firestore.Query getQuery();
    method public boolean isEmpty();
    method @NonNull public java.util.Iterator<com.google.firebase.firestore.QueryDocumentSnapshot> iterator();
    method public int size();
    method @NonNull public <T> java.util.List<T> toObjects(@NonNull Class<T>);
    method @NonNull public <T> java.util.List<T> toObjects(@NonNull Class<T>, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface ServerTimestamp {
  }

  public final class SetOptions {
    method @NonNull public static com.google.firebase.firestore.SetOptions merge();
    method @NonNull public static com.google.firebase.firestore.SetOptions mergeFieldPaths(@NonNull java.util.List<com.google.firebase.firestore.FieldPath>);
    method @NonNull public static com.google.firebase.firestore.SetOptions mergeFields(@NonNull java.util.List<java.lang.String>);
    method @NonNull public static com.google.firebase.firestore.SetOptions mergeFields(java.lang.String...);
  }

  public class SnapshotMetadata {
    method public boolean hasPendingWrites();
    method public boolean isFromCache();
  }

  public enum Source {
    enum_constant public static final com.google.firebase.firestore.Source CACHE;
    enum_constant public static final com.google.firebase.firestore.Source DEFAULT;
    enum_constant public static final com.google.firebase.firestore.Source SERVER;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface ThrowOnExtraProperties {
  }

  public class Transaction {
    method @NonNull public com.google.firebase.firestore.Transaction delete(@NonNull com.google.firebase.firestore.DocumentReference);
    method @NonNull public com.google.firebase.firestore.DocumentSnapshot get(@NonNull com.google.firebase.firestore.DocumentReference) throws com.google.firebase.firestore.FirebaseFirestoreException;
    method @NonNull public com.google.firebase.firestore.Transaction set(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.Transaction set(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull Object, @NonNull com.google.firebase.firestore.SetOptions);
    method @NonNull public com.google.firebase.firestore.Transaction update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull java.util.Map<java.lang.String,java.lang.Object>);
    method @NonNull public com.google.firebase.firestore.Transaction update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull String, @Nullable Object, java.lang.Object...);
    method @NonNull public com.google.firebase.firestore.Transaction update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull com.google.firebase.firestore.FieldPath, @Nullable Object, java.lang.Object...);
  }

  public static interface Transaction.Function<TResult> {
    method @Nullable public TResult apply(@NonNull com.google.firebase.firestore.Transaction) throws com.google.firebase.firestore.FirebaseFirestoreException;
  }

  public final class TransactionOptions {
    method public int getMaxAttempts();
  }

  public static final class TransactionOptions.Builder {
    ctor public TransactionOptions.Builder();
    ctor public TransactionOptions.Builder(@NonNull com.google.firebase.firestore.TransactionOptions);
    method @NonNull public com.google.firebase.firestore.TransactionOptions build();
    method @NonNull public com.google.firebase.firestore.TransactionOptions.Builder setMaxAttempts(int);
  }

  public class WriteBatch {
    method @NonNull public com.google.android.gms.tasks.Task<java.lang.Void> commit();
    method @NonNull public com.google.firebase.firestore.WriteBatch delete(@NonNull com.google.firebase.firestore.DocumentReference);
    method @NonNull public com.google.firebase.firestore.WriteBatch set(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull Object);
    method @NonNull public com.google.firebase.firestore.WriteBatch set(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull Object, @NonNull com.google.firebase.firestore.SetOptions);
    method @NonNull public com.google.firebase.firestore.WriteBatch update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull java.util.Map<java.lang.String,java.lang.Object>);
    method @NonNull public com.google.firebase.firestore.WriteBatch update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull String, @Nullable Object, java.lang.Object...);
    method @NonNull public com.google.firebase.firestore.WriteBatch update(@NonNull com.google.firebase.firestore.DocumentReference, @NonNull com.google.firebase.firestore.FieldPath, @Nullable Object, java.lang.Object...);
  }

  public static interface WriteBatch.Function {
    method public void apply(@NonNull com.google.firebase.firestore.WriteBatch);
  }

}

