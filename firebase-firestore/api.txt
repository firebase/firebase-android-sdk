// Signature format: 3.0
package com.google.firebase.firestore {

  public abstract class AggregateField {
    method public static com.google.firebase.firestore.AggregateField.AverageAggregateField average(com.google.firebase.firestore.FieldPath);
    method public static com.google.firebase.firestore.AggregateField.AverageAggregateField average(String);
    method public static com.google.firebase.firestore.AggregateField.CountAggregateField count();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getAlias();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getFieldPath();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getOperator();
    method public static com.google.firebase.firestore.AggregateField.SumAggregateField sum(com.google.firebase.firestore.FieldPath);
    method public static com.google.firebase.firestore.AggregateField.SumAggregateField sum(String);
  }

  public static class AggregateField.AverageAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public static class AggregateField.CountAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public static class AggregateField.SumAggregateField extends com.google.firebase.firestore.AggregateField {
  }

  public class AggregateQuery {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.AggregateQuerySnapshot!> get(com.google.firebase.firestore.AggregateSource);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public java.util.List<com.google.firebase.firestore.AggregateField!> getAggregateFields();
    method public com.google.firebase.firestore.Query getQuery();
  }

  public class AggregateQuerySnapshot {
    method public Object? get(com.google.firebase.firestore.AggregateField);
    method public Double? get(com.google.firebase.firestore.AggregateField.AverageAggregateField);
    method public long get(com.google.firebase.firestore.AggregateField.CountAggregateField);
    method public long getCount();
    method public Double? getDouble(com.google.firebase.firestore.AggregateField);
    method public Long? getLong(com.google.firebase.firestore.AggregateField);
    method public com.google.firebase.firestore.AggregateQuery getQuery();
  }

  public enum AggregateSource {
    enum_constant public static final com.google.firebase.firestore.AggregateSource SERVER;
  }

  public class Blob implements java.lang.Comparable<com.google.firebase.firestore.Blob!> {
    method public int compareTo(com.google.firebase.firestore.Blob);
    method public static com.google.firebase.firestore.Blob fromBytes(byte[]);
    method public byte[] toBytes();
  }

  public class CollectionReference extends com.google.firebase.firestore.Query {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentReference!> add(Object);
    method public com.google.firebase.firestore.DocumentReference document();
    method public com.google.firebase.firestore.DocumentReference document(String);
    method public String getId();
    method public com.google.firebase.firestore.DocumentReference? getParent();
    method public String getPath();
  }

  public class DocumentChange {
    method public com.google.firebase.firestore.QueryDocumentSnapshot getDocument();
    method public int getNewIndex();
    method public int getOldIndex();
    method public com.google.firebase.firestore.DocumentChange.Type getType();
  }

  public enum DocumentChange.Type {
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type ADDED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type MODIFIED;
    enum_constant public static final com.google.firebase.firestore.DocumentChange.Type REMOVED;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) public @interface DocumentId {
  }

  public final class DocumentReference {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.SnapshotListenOptions, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.DocumentSnapshot!>);
    method public com.google.firebase.firestore.CollectionReference collection(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> delete();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot!> get();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentSnapshot!> get(com.google.firebase.firestore.Source);
    method public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String getFullPath();
    method public String getId();
    method public com.google.firebase.firestore.CollectionReference getParent();
    method public String getPath();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> set(Object);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> set(Object, com.google.firebase.firestore.SetOptions);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(String, Object?, java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> update(java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public class DocumentSnapshot {
    method public boolean contains(com.google.firebase.firestore.FieldPath);
    method public boolean contains(String);
    method public boolean exists();
    method public Object? get(com.google.firebase.firestore.FieldPath);
    method public Object? get(com.google.firebase.firestore.FieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public <T> T? get(com.google.firebase.firestore.FieldPath, Class<T!>);
    method public <T> T? get(com.google.firebase.firestore.FieldPath, Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public Object? get(String);
    method public Object? get(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public <T> T? get(String, Class<T!>);
    method public <T> T? get(String, Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.Blob? getBlob(String);
    method public Boolean? getBoolean(String);
    method public java.util.Map<java.lang.String!,java.lang.Object!>? getData();
    method public java.util.Map<java.lang.String!,java.lang.Object!>? getData(com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public java.util.Date? getDate(String);
    method public java.util.Date? getDate(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.DocumentReference? getDocumentReference(String);
    method public Double? getDouble(String);
    method public com.google.firebase.firestore.GeoPoint? getGeoPoint(String);
    method public String getId();
    method public Long? getLong(String);
    method public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method public com.google.firebase.firestore.DocumentReference getReference();
    method public String? getString(String);
    method public com.google.firebase.Timestamp? getTimestamp(String);
    method public com.google.firebase.Timestamp? getTimestamp(String, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
    method public com.google.firebase.firestore.VectorValue? getVectorValue(String);
    method public <T> T? toObject(Class<T!>);
    method public <T> T? toObject(Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  public enum DocumentSnapshot.ServerTimestampBehavior {
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior ESTIMATE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior NONE;
    enum_constant public static final com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior PREVIOUS;
  }

  public interface EventListener<T> {
    method public void onEvent(T?, com.google.firebase.firestore.FirebaseFirestoreException?);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Exclude {
  }

  public final class FieldPath {
    method public static com.google.firebase.firestore.FieldPath documentId();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static com.google.firebase.firestore.FieldPath fromDotSeparatedPath(String);
    method public static com.google.firebase.firestore.FieldPath of(java.lang.String!...!);
  }

  public abstract class FieldValue {
    method public static com.google.firebase.firestore.FieldValue arrayRemove(java.lang.Object!...!);
    method public static com.google.firebase.firestore.FieldValue arrayUnion(java.lang.Object!...!);
    method public static com.google.firebase.firestore.FieldValue delete();
    method public static com.google.firebase.firestore.FieldValue increment(double);
    method public static com.google.firebase.firestore.FieldValue increment(long);
    method public static com.google.firebase.firestore.FieldValue serverTimestamp();
    method public static com.google.firebase.firestore.VectorValue vector(double[]);
  }

  public class Filter {
    ctor public Filter();
    method public static com.google.firebase.firestore.Filter and(com.google.firebase.firestore.Filter!...!);
    method public static com.google.firebase.firestore.Filter arrayContains(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter arrayContains(String, Object?);
    method public static com.google.firebase.firestore.Filter arrayContainsAny(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter arrayContainsAny(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter equalTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter equalTo(String, Object?);
    method public static com.google.firebase.firestore.Filter greaterThan(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter greaterThan(String, Object?);
    method public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter greaterThanOrEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter inArray(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter inArray(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter lessThan(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter lessThan(String, Object?);
    method public static com.google.firebase.firestore.Filter lessThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter lessThanOrEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter notEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public static com.google.firebase.firestore.Filter notEqualTo(String, Object?);
    method public static com.google.firebase.firestore.Filter notInArray(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter notInArray(String, java.util.List<? extends java.lang.Object!>);
    method public static com.google.firebase.firestore.Filter or(com.google.firebase.firestore.Filter!...!);
  }

  public class FirebaseFirestore {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(android.app.Activity, Runnable);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(Runnable);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotsInSyncListener(java.util.concurrent.Executor, Runnable);
    method public com.google.firebase.firestore.WriteBatch batch();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> clearPersistence();
    method public com.google.firebase.firestore.CollectionReference collection(String);
    method public com.google.firebase.firestore.Query collectionGroup(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> disableNetwork();
    method public com.google.firebase.firestore.DocumentReference document(String);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> enableNetwork();
    method public com.google.firebase.FirebaseApp getApp();
    method public com.google.firebase.firestore.FirebaseFirestoreSettings getFirestoreSettings();
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance();
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(com.google.firebase.FirebaseApp);
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(com.google.firebase.FirebaseApp, String);
    method public static com.google.firebase.firestore.FirebaseFirestore getInstance(String);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.Query!> getNamedQuery(String);
    method public com.google.firebase.firestore.PersistentCacheIndexManager? getPersistentCacheIndexManager();
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(byte[]);
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(java.io.InputStream);
    method public com.google.firebase.firestore.LoadBundleTask loadBundle(java.nio.ByteBuffer);
    method public com.google.firebase.firestore.PipelineSource pipeline();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> runBatch(com.google.firebase.firestore.WriteBatch.Function);
    method public <TResult> com.google.android.gms.tasks.Task<TResult!> runTransaction(com.google.firebase.firestore.Transaction.Function<TResult!>);
    method public <TResult> com.google.android.gms.tasks.Task<TResult!> runTransaction(com.google.firebase.firestore.TransactionOptions, com.google.firebase.firestore.Transaction.Function<TResult!>);
    method public void setFirestoreSettings(com.google.firebase.firestore.FirebaseFirestoreSettings);
    method @Deprecated @com.google.firebase.annotations.PreviewApi public com.google.android.gms.tasks.Task<java.lang.Void!> setIndexConfiguration(String);
    method public static void setLoggingEnabled(boolean);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> terminate();
    method public void useEmulator(String, int);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> waitForPendingWrites();
  }

  public class FirebaseFirestoreException extends com.google.firebase.FirebaseException {
    ctor public FirebaseFirestoreException(String, com.google.firebase.firestore.FirebaseFirestoreException.Code);
    ctor public FirebaseFirestoreException(String, com.google.firebase.firestore.FirebaseFirestoreException.Code, Throwable?);
    method public com.google.firebase.firestore.FirebaseFirestoreException.Code getCode();
  }

  public enum FirebaseFirestoreException.Code {
    method public static com.google.firebase.firestore.FirebaseFirestoreException.Code fromValue(int);
    method public int value();
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ABORTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code ALREADY_EXISTS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code CANCELLED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DATA_LOSS;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code DEADLINE_EXCEEDED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code FAILED_PRECONDITION;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INTERNAL;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code INVALID_ARGUMENT;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code NOT_FOUND;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OK;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code OUT_OF_RANGE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code PERMISSION_DENIED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code RESOURCE_EXHAUSTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAUTHENTICATED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNAVAILABLE;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNIMPLEMENTED;
    enum_constant public static final com.google.firebase.firestore.FirebaseFirestoreException.Code UNKNOWN;
  }

  public final class FirebaseFirestoreSettings {
    method public com.google.firebase.firestore.LocalCacheSettings? getCacheSettings();
    method @Deprecated public long getCacheSizeBytes();
    method public String getHost();
    method @Deprecated public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    field public static final long CACHE_SIZE_UNLIMITED = -1L; // 0xffffffffffffffffL
  }

  public static final class FirebaseFirestoreSettings.Builder {
    ctor public FirebaseFirestoreSettings.Builder();
    ctor public FirebaseFirestoreSettings.Builder(com.google.firebase.firestore.FirebaseFirestoreSettings);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings build();
    method @Deprecated public long getCacheSizeBytes();
    method public String getHost();
    method @Deprecated public boolean isPersistenceEnabled();
    method public boolean isSslEnabled();
    method @Deprecated public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setCacheSizeBytes(long);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setHost(String);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setLocalCacheSettings(com.google.firebase.firestore.LocalCacheSettings);
    method @Deprecated public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setPersistenceEnabled(boolean);
    method public com.google.firebase.firestore.FirebaseFirestoreSettings.Builder setSslEnabled(boolean);
  }

  public final class FirestoreKt {
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> dataObjects(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<java.util.List<? extends T>> dataObjects(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app, String database);
    method public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.Firebase, String database);
    method public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field);
    method public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static com.google.firebase.firestore.FirebaseFirestore getFirestore(com.google.firebase.Firebase);
    method public static com.google.firebase.firestore.MemoryCacheSettings memoryCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryCacheSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryEagerGcSettings memoryEagerGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryEagerGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryLruGcSettings memoryLruGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryLruGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.PersistentCacheSettings persistentCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.PersistentCacheSettings.Builder,kotlin.Unit> init);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.DocumentSnapshot> snapshots(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.QuerySnapshot> snapshots(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot);
    method public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot);
    method public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot);
    method public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

  public class GeoPoint implements java.lang.Comparable<com.google.firebase.firestore.GeoPoint!> {
    ctor public GeoPoint(double, double);
    method public int compareTo(com.google.firebase.firestore.GeoPoint);
    method public double getLatitude();
    method public double getLongitude();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface IgnoreExtraProperties {
  }

  public enum ListenSource {
    enum_constant public static final com.google.firebase.firestore.ListenSource CACHE;
    enum_constant public static final com.google.firebase.firestore.ListenSource DEFAULT;
  }

  public interface ListenerRegistration {
    method public void remove();
  }

  public class LoadBundleTask extends com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> {
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(android.app.Activity, com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCanceledListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCanceledListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(android.app.Activity, com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnCompleteListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(android.app.Activity, com.google.android.gms.tasks.OnFailureListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(com.google.android.gms.tasks.OnFailureListener);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnFailureListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnFailureListener);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(android.app.Activity, com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.firebase.firestore.LoadBundleTask addOnProgressListener(java.util.concurrent.Executor, com.google.firebase.firestore.OnProgressListener<com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(android.app.Activity, com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.LoadBundleTaskProgress!> addOnSuccessListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnSuccessListener<? super com.google.firebase.firestore.LoadBundleTaskProgress!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWith(com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWith(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWithTask(com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,com.google.android.gms.tasks.Task<TContinuationResult!>!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> continueWithTask(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<com.google.firebase.firestore.LoadBundleTaskProgress!,com.google.android.gms.tasks.Task<TContinuationResult!>!>);
    method public Exception? getException();
    method public com.google.firebase.firestore.LoadBundleTaskProgress getResult();
    method public <X extends java.lang.Throwable> com.google.firebase.firestore.LoadBundleTaskProgress getResult(Class<X!>) throws X;
    method public boolean isCanceled();
    method public boolean isComplete();
    method public boolean isSuccessful();
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> onSuccessTask(com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
    method public <TContinuationResult> com.google.android.gms.tasks.Task<TContinuationResult!> onSuccessTask(java.util.concurrent.Executor, com.google.android.gms.tasks.SuccessContinuation<com.google.firebase.firestore.LoadBundleTaskProgress!,TContinuationResult!>);
  }

  public final class LoadBundleTaskProgress {
    method public long getBytesLoaded();
    method public int getDocumentsLoaded();
    method public Exception? getException();
    method public com.google.firebase.firestore.LoadBundleTaskProgress.TaskState getTaskState();
    method public long getTotalBytes();
    method public int getTotalDocuments();
  }

  public enum LoadBundleTaskProgress.TaskState {
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState ERROR;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState RUNNING;
    enum_constant public static final com.google.firebase.firestore.LoadBundleTaskProgress.TaskState SUCCESS;
  }

  public interface LocalCacheSettings {
  }

  public final class MemoryCacheSettings implements com.google.firebase.firestore.LocalCacheSettings {
    method public com.google.firebase.firestore.MemoryGarbageCollectorSettings getGarbageCollectorSettings();
    method public static com.google.firebase.firestore.MemoryCacheSettings.Builder newBuilder();
  }

  public static class MemoryCacheSettings.Builder {
    method public com.google.firebase.firestore.MemoryCacheSettings build();
    method public com.google.firebase.firestore.MemoryCacheSettings.Builder setGcSettings(com.google.firebase.firestore.MemoryGarbageCollectorSettings);
  }

  public final class MemoryEagerGcSettings implements com.google.firebase.firestore.MemoryGarbageCollectorSettings {
    method public static com.google.firebase.firestore.MemoryEagerGcSettings.Builder newBuilder();
  }

  public static class MemoryEagerGcSettings.Builder {
    method public com.google.firebase.firestore.MemoryEagerGcSettings build();
  }

  public interface MemoryGarbageCollectorSettings {
  }

  public final class MemoryLruGcSettings implements com.google.firebase.firestore.MemoryGarbageCollectorSettings {
    method public long getSizeBytes();
    method public static com.google.firebase.firestore.MemoryLruGcSettings.Builder newBuilder();
  }

  public static class MemoryLruGcSettings.Builder {
    method public com.google.firebase.firestore.MemoryLruGcSettings build();
    method public com.google.firebase.firestore.MemoryLruGcSettings.Builder setSizeBytes(long);
  }

  public enum MetadataChanges {
    enum_constant public static final com.google.firebase.firestore.MetadataChanges EXCLUDE;
    enum_constant public static final com.google.firebase.firestore.MetadataChanges INCLUDE;
  }

  public interface OnProgressListener<ProgressT> {
    method public void onProgress(ProgressT);
  }

  public final class PersistentCacheIndexManager {
    method public void deleteAllIndexes();
    method public void disableIndexAutoCreation();
    method public void enableIndexAutoCreation();
  }

  public final class PersistentCacheSettings implements com.google.firebase.firestore.LocalCacheSettings {
    method public long getSizeBytes();
    method public static com.google.firebase.firestore.PersistentCacheSettings.Builder newBuilder();
  }

  public static class PersistentCacheSettings.Builder {
    method public com.google.firebase.firestore.PersistentCacheSettings build();
    method public com.google.firebase.firestore.PersistentCacheSettings.Builder setSizeBytes(long);
  }

  public final class Pipeline {
    method public com.google.firebase.firestore.Pipeline addFields(com.google.firebase.firestore.pipeline.Selectable field, com.google.firebase.firestore.pipeline.Selectable... additionalFields);
    method public com.google.firebase.firestore.Pipeline aggregate(com.google.firebase.firestore.pipeline.AggregateStage aggregateStage);
    method public com.google.firebase.firestore.Pipeline aggregate(com.google.firebase.firestore.pipeline.AggregateStage aggregateStage, com.google.firebase.firestore.pipeline.AggregateOptions options);
    method public com.google.firebase.firestore.Pipeline aggregate(com.google.firebase.firestore.pipeline.AliasedAggregate accumulator, com.google.firebase.firestore.pipeline.AliasedAggregate... additionalAccumulators);
    method public com.google.firebase.firestore.Pipeline distinct(com.google.firebase.firestore.pipeline.Selectable group, java.lang.Object... additionalGroups);
    method public com.google.firebase.firestore.Pipeline distinct(String groupField, java.lang.Object... additionalGroups);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.Pipeline.Snapshot> execute();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.Pipeline.Snapshot> execute(com.google.firebase.firestore.Pipeline.ExecuteOptions options);
    method public com.google.firebase.firestore.Pipeline findNearest(com.google.firebase.firestore.pipeline.Field vectorField, com.google.firebase.firestore.VectorValue vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure);
    method public com.google.firebase.firestore.Pipeline findNearest(com.google.firebase.firestore.pipeline.Field vectorField, double[] vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure);
    method public com.google.firebase.firestore.Pipeline findNearest(String vectorField, com.google.firebase.firestore.pipeline.Expression vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure);
    method public com.google.firebase.firestore.Pipeline findNearest(String vectorField, com.google.firebase.firestore.pipeline.Expression vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure, com.google.firebase.firestore.pipeline.FindNearestOptions options);
    method public com.google.firebase.firestore.Pipeline findNearest(String vectorField, com.google.firebase.firestore.VectorValue vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure);
    method public com.google.firebase.firestore.Pipeline findNearest(String vectorField, double[] vectorValue, com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure distanceMeasure);
    method public com.google.firebase.firestore.Pipeline limit(int limit);
    method public com.google.firebase.firestore.Pipeline offset(int offset);
    method public com.google.firebase.firestore.Pipeline rawStage(com.google.firebase.firestore.pipeline.RawStage rawStage);
    method public com.google.firebase.firestore.Pipeline removeFields(com.google.firebase.firestore.pipeline.Field field, com.google.firebase.firestore.pipeline.Field... additionalFields);
    method public com.google.firebase.firestore.Pipeline removeFields(String field, java.lang.String... additionalFields);
    method public com.google.firebase.firestore.Pipeline replaceWith(com.google.firebase.firestore.pipeline.Expression mapValue);
    method public com.google.firebase.firestore.Pipeline replaceWith(String field);
    method public com.google.firebase.firestore.Pipeline sample(com.google.firebase.firestore.pipeline.SampleStage sample);
    method public com.google.firebase.firestore.Pipeline sample(int documents);
    method public com.google.firebase.firestore.Pipeline select(com.google.firebase.firestore.pipeline.Selectable selection, java.lang.Object... additionalSelections);
    method public com.google.firebase.firestore.Pipeline select(String fieldName, java.lang.Object... additionalSelections);
    method public com.google.firebase.firestore.Pipeline sort(com.google.firebase.firestore.pipeline.Ordering order, com.google.firebase.firestore.pipeline.Ordering... additionalOrders);
    method public com.google.firebase.firestore.Pipeline union(com.google.firebase.firestore.Pipeline other);
    method public com.google.firebase.firestore.Pipeline unnest(com.google.firebase.firestore.pipeline.Selectable arrayWithAlias);
    method public com.google.firebase.firestore.Pipeline unnest(com.google.firebase.firestore.pipeline.Selectable arrayWithAlias, com.google.firebase.firestore.pipeline.UnnestOptions options);
    method public com.google.firebase.firestore.Pipeline unnest(com.google.firebase.firestore.pipeline.UnnestStage unnestStage);
    method public com.google.firebase.firestore.Pipeline unnest(String arrayField, String alias);
    method public com.google.firebase.firestore.Pipeline where(com.google.firebase.firestore.pipeline.BooleanExpression condition);
  }

  public static final class Pipeline.ExecuteOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.Pipeline.ExecuteOptions> {
    ctor public Pipeline.ExecuteOptions();
    method public com.google.firebase.firestore.Pipeline.ExecuteOptions withIndexMode(com.google.firebase.firestore.Pipeline.ExecuteOptions.IndexMode indexMode);
  }

  public static final class Pipeline.ExecuteOptions.IndexMode {
    field public static final com.google.firebase.firestore.Pipeline.ExecuteOptions.IndexMode.Companion Companion;
    field public static final com.google.firebase.firestore.Pipeline.ExecuteOptions.IndexMode RECOMMENDED;
  }

  public static final class Pipeline.ExecuteOptions.IndexMode.Companion {
  }

  public static final class Pipeline.Snapshot implements java.lang.Iterable<com.google.firebase.firestore.PipelineResult> kotlin.jvm.internal.markers.KMappedMarker {
    method public com.google.firebase.Timestamp getExecutionTime();
    method public java.util.List<com.google.firebase.firestore.PipelineResult> getResults();
    method public java.util.Iterator<com.google.firebase.firestore.PipelineResult> iterator();
    property public final com.google.firebase.Timestamp executionTime;
    property public final java.util.List<com.google.firebase.firestore.PipelineResult> results;
  }

  public final class PipelineResult {
    method public Object? get(com.google.firebase.firestore.FieldPath fieldPath);
    method public Object? get(String field);
    method public com.google.firebase.Timestamp? getCreateTime();
    method public java.util.Map<java.lang.String,java.lang.Object?> getData();
    method public String? getId();
    method public com.google.firebase.firestore.DocumentReference? getRef();
    method public com.google.firebase.Timestamp? getUpdateTime();
    property public final com.google.firebase.Timestamp? createTime;
    property public final com.google.firebase.firestore.DocumentReference? ref;
    property public final com.google.firebase.Timestamp? updateTime;
  }

  public final class PipelineResultChange {
    method public com.google.firebase.firestore.PipelineResult component1();
    method public com.google.firebase.firestore.PipelineResultChange.ChangeType component2();
    method public Integer? component3();
    method public Integer? component4();
    method public com.google.firebase.firestore.PipelineResultChange copy(com.google.firebase.firestore.PipelineResult result, com.google.firebase.firestore.PipelineResultChange.ChangeType type, Integer? oldIndex, Integer? newIndex);
    method public Integer? getNewIndex();
    method public Integer? getOldIndex();
    method public com.google.firebase.firestore.PipelineResult getResult();
    method public com.google.firebase.firestore.PipelineResultChange.ChangeType getType();
    property public final Integer? newIndex;
    property public final Integer? oldIndex;
    property public final com.google.firebase.firestore.PipelineResult result;
    property public final com.google.firebase.firestore.PipelineResultChange.ChangeType type;
    field public static final com.google.firebase.firestore.PipelineResultChange.Companion Companion;
  }

  public enum PipelineResultChange.ChangeType {
    enum_constant public static final com.google.firebase.firestore.PipelineResultChange.ChangeType ADDED;
    enum_constant public static final com.google.firebase.firestore.PipelineResultChange.ChangeType MODIFIED;
    enum_constant public static final com.google.firebase.firestore.PipelineResultChange.ChangeType REMOVED;
  }

  public static final class PipelineResultChange.Companion {
  }

  public final class PipelineSnapshotMetadata {
    method public boolean component1();
    method public boolean component2();
    method public com.google.firebase.firestore.PipelineSnapshotMetadata copy(boolean hasPendingWrites, boolean isConsistentBetweenListeners);
    method public boolean getHasPendingWrites();
    method public boolean isConsistentBetweenListeners();
    property public final boolean hasPendingWrites;
    property public final boolean isConsistentBetweenListeners;
  }

  public final class PipelineSource {
    method public com.google.firebase.firestore.Pipeline collection(com.google.firebase.firestore.CollectionReference ref);
    method public com.google.firebase.firestore.Pipeline collection(com.google.firebase.firestore.CollectionReference ref, com.google.firebase.firestore.pipeline.CollectionSourceOptions options);
    method public com.google.firebase.firestore.Pipeline collection(String path);
    method public com.google.firebase.firestore.Pipeline collectionGroup(String collectionId);
    method public com.google.firebase.firestore.Pipeline collectionGroup(String collectionId, com.google.firebase.firestore.pipeline.CollectionGroupOptions options);
    method public com.google.firebase.firestore.Pipeline createFrom(com.google.firebase.firestore.AggregateQuery aggregateQuery);
    method public com.google.firebase.firestore.Pipeline createFrom(com.google.firebase.firestore.Query query);
    method public com.google.firebase.firestore.Pipeline database();
    method public com.google.firebase.firestore.Pipeline documents(com.google.firebase.firestore.DocumentReference... documents);
    method public com.google.firebase.firestore.Pipeline documents(java.lang.String... documents);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface PropertyName {
    method public abstract String value();
  }

  public class Query {
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(android.app.Activity, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(com.google.firebase.firestore.SnapshotListenOptions, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.ListenerRegistration addSnapshotListener(java.util.concurrent.Executor, com.google.firebase.firestore.MetadataChanges, com.google.firebase.firestore.EventListener<com.google.firebase.firestore.QuerySnapshot!>);
    method public com.google.firebase.firestore.AggregateQuery aggregate(com.google.firebase.firestore.AggregateField, com.google.firebase.firestore.AggregateField!...);
    method public com.google.firebase.firestore.AggregateQuery count();
    method public com.google.firebase.firestore.Query endAt(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query endAt(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query endBefore(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query endBefore(java.lang.Object!...!);
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot!> get();
    method public com.google.android.gms.tasks.Task<com.google.firebase.firestore.QuerySnapshot!> get(com.google.firebase.firestore.Source);
    method public com.google.firebase.firestore.FirebaseFirestore getFirestore();
    method public com.google.firebase.firestore.Query limit(long);
    method public com.google.firebase.firestore.Query limitToLast(long);
    method public com.google.firebase.firestore.Query orderBy(com.google.firebase.firestore.FieldPath);
    method public com.google.firebase.firestore.Query orderBy(com.google.firebase.firestore.FieldPath, com.google.firebase.firestore.Query.Direction);
    method public com.google.firebase.firestore.Query orderBy(String);
    method public com.google.firebase.firestore.Query orderBy(String, com.google.firebase.firestore.Query.Direction);
    method public com.google.firebase.firestore.Query startAfter(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query startAfter(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query startAt(com.google.firebase.firestore.DocumentSnapshot);
    method public com.google.firebase.firestore.Query startAt(java.lang.Object!...!);
    method public com.google.firebase.firestore.Query where(com.google.firebase.firestore.Filter);
    method public com.google.firebase.firestore.Query whereArrayContains(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereArrayContains(String, Object);
    method public com.google.firebase.firestore.Query whereArrayContainsAny(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereArrayContainsAny(String, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public com.google.firebase.firestore.Query whereEqualTo(String, Object?);
    method public com.google.firebase.firestore.Query whereGreaterThan(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereGreaterThan(String, Object);
    method public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereGreaterThanOrEqualTo(String, Object);
    method public com.google.firebase.firestore.Query whereIn(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereIn(String, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereLessThan(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereLessThan(String, Object);
    method public com.google.firebase.firestore.Query whereLessThanOrEqualTo(com.google.firebase.firestore.FieldPath, Object);
    method public com.google.firebase.firestore.Query whereLessThanOrEqualTo(String, Object);
    method public com.google.firebase.firestore.Query whereNotEqualTo(com.google.firebase.firestore.FieldPath, Object?);
    method public com.google.firebase.firestore.Query whereNotEqualTo(String, Object?);
    method public com.google.firebase.firestore.Query whereNotIn(com.google.firebase.firestore.FieldPath, java.util.List<? extends java.lang.Object!>);
    method public com.google.firebase.firestore.Query whereNotIn(String, java.util.List<? extends java.lang.Object!>);
  }

  public enum Query.Direction {
    enum_constant public static final com.google.firebase.firestore.Query.Direction ASCENDING;
    enum_constant public static final com.google.firebase.firestore.Query.Direction DESCENDING;
  }

  public class QueryDocumentSnapshot extends com.google.firebase.firestore.DocumentSnapshot {
  }

  public class QuerySnapshot implements java.lang.Iterable<com.google.firebase.firestore.QueryDocumentSnapshot!> {
    method public java.util.List<com.google.firebase.firestore.DocumentChange!> getDocumentChanges();
    method public java.util.List<com.google.firebase.firestore.DocumentChange!> getDocumentChanges(com.google.firebase.firestore.MetadataChanges);
    method public java.util.List<com.google.firebase.firestore.DocumentSnapshot!> getDocuments();
    method public com.google.firebase.firestore.SnapshotMetadata getMetadata();
    method public com.google.firebase.firestore.Query getQuery();
    method public boolean isEmpty();
    method public java.util.Iterator<com.google.firebase.firestore.QueryDocumentSnapshot!> iterator();
    method public int size();
    method public <T> java.util.List<T!> toObjects(Class<T!>);
    method public <T> java.util.List<T!> toObjects(Class<T!>, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior);
  }

  public final class RealtimePipelineOptions {
    ctor public RealtimePipelineOptions();
    method public com.google.firebase.firestore.RealtimePipelineOptions withMetadataChanges(com.google.firebase.firestore.MetadataChanges metadataChanges);
    method public com.google.firebase.firestore.RealtimePipelineOptions withServerTimestampBehavior(com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method public com.google.firebase.firestore.RealtimePipelineOptions withSource(com.google.firebase.firestore.ListenSource source);
    field public static final com.google.firebase.firestore.RealtimePipelineOptions.Companion Companion;
    field public static final com.google.firebase.firestore.RealtimePipelineOptions DEFAULT;
  }

  public static final class RealtimePipelineOptions.Companion {
  }

  public final class RealtimePipelineSnapshot {
    method public java.util.List<com.google.firebase.firestore.PipelineResultChange> getChanges(com.google.firebase.firestore.MetadataChanges? metadataChanges = null);
    method public com.google.firebase.firestore.PipelineSnapshotMetadata getMetadata();
    method public java.util.List<com.google.firebase.firestore.PipelineResult> getResults();
    property public final com.google.firebase.firestore.PipelineSnapshotMetadata metadata;
    property public final java.util.List<com.google.firebase.firestore.PipelineResult> results;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface ServerTimestamp {
  }

  public final class SetOptions {
    method public static com.google.firebase.firestore.SetOptions merge();
    method public static com.google.firebase.firestore.SetOptions mergeFieldPaths(java.util.List<com.google.firebase.firestore.FieldPath!>);
    method public static com.google.firebase.firestore.SetOptions mergeFields(java.lang.String!...!);
    method public static com.google.firebase.firestore.SetOptions mergeFields(java.util.List<java.lang.String!>);
  }

  public final class SnapshotListenOptions {
    method public android.app.Activity? getActivity();
    method public java.util.concurrent.Executor getExecutor();
    method public com.google.firebase.firestore.MetadataChanges getMetadataChanges();
    method public com.google.firebase.firestore.ListenSource getSource();
  }

  public static class SnapshotListenOptions.Builder {
    ctor public SnapshotListenOptions.Builder();
    method public com.google.firebase.firestore.SnapshotListenOptions build();
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setActivity(android.app.Activity);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setExecutor(java.util.concurrent.Executor);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setMetadataChanges(com.google.firebase.firestore.MetadataChanges);
    method public com.google.firebase.firestore.SnapshotListenOptions.Builder setSource(com.google.firebase.firestore.ListenSource);
  }

  public class SnapshotMetadata {
    method public boolean hasPendingWrites();
    method public boolean isFromCache();
  }

  public enum Source {
    enum_constant public static final com.google.firebase.firestore.Source CACHE;
    enum_constant public static final com.google.firebase.firestore.Source DEFAULT;
    enum_constant public static final com.google.firebase.firestore.Source SERVER;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface ThrowOnExtraProperties {
  }

  public class Transaction {
    method public com.google.firebase.firestore.Transaction delete(com.google.firebase.firestore.DocumentReference);
    method public com.google.firebase.firestore.DocumentSnapshot get(com.google.firebase.firestore.DocumentReference) throws com.google.firebase.firestore.FirebaseFirestoreException;
    method public com.google.firebase.firestore.Transaction set(com.google.firebase.firestore.DocumentReference, Object);
    method public com.google.firebase.firestore.Transaction set(com.google.firebase.firestore.DocumentReference, Object, com.google.firebase.firestore.SetOptions);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, String, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public static interface Transaction.Function<TResult> {
    method public TResult? apply(com.google.firebase.firestore.Transaction) throws com.google.firebase.firestore.FirebaseFirestoreException;
  }

  public final class TransactionOptions {
    method public int getMaxAttempts();
  }

  public static final class TransactionOptions.Builder {
    ctor public TransactionOptions.Builder();
    ctor public TransactionOptions.Builder(com.google.firebase.firestore.TransactionOptions);
    method public com.google.firebase.firestore.TransactionOptions build();
    method public com.google.firebase.firestore.TransactionOptions.Builder setMaxAttempts(int);
  }

  public class VectorValue {
    method public double[] toArray();
  }

  public class WriteBatch {
    method public com.google.android.gms.tasks.Task<java.lang.Void!> commit();
    method public com.google.firebase.firestore.WriteBatch delete(com.google.firebase.firestore.DocumentReference);
    method public com.google.firebase.firestore.WriteBatch set(com.google.firebase.firestore.DocumentReference, Object);
    method public com.google.firebase.firestore.WriteBatch set(com.google.firebase.firestore.DocumentReference, Object, com.google.firebase.firestore.SetOptions);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.FieldPath, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, String, Object?, java.lang.Object!...!);
    method public com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String!,java.lang.Object!>);
  }

  public static interface WriteBatch.Function {
    method public void apply(com.google.firebase.firestore.WriteBatch);
  }

}

package com.google.firebase.firestore.ktx {

  public final class FirestoreKt {
    method @Deprecated public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> dataObjects(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static inline <reified T> kotlinx.coroutines.flow.Flow<java.util.List<? extends T>> dataObjects(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app, String database);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore firestore(com.google.firebase.ktx.Firebase, String database);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.FieldPath fieldPath, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field);
    method @Deprecated public static inline <reified T> T? getField(com.google.firebase.firestore.DocumentSnapshot, String field, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static com.google.firebase.firestore.FirebaseFirestore getFirestore(com.google.firebase.ktx.Firebase);
    method public static com.google.firebase.firestore.MemoryCacheSettings memoryCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryCacheSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryEagerGcSettings memoryEagerGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryEagerGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.MemoryLruGcSettings memoryLruGcSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.MemoryLruGcSettings.Builder,kotlin.Unit> init);
    method public static com.google.firebase.firestore.PersistentCacheSettings persistentCacheSettings(kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.PersistentCacheSettings.Builder,kotlin.Unit> init);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.DocumentSnapshot> snapshots(com.google.firebase.firestore.DocumentReference, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.firestore.QuerySnapshot> snapshots(com.google.firebase.firestore.Query, com.google.firebase.firestore.MetadataChanges metadataChanges = com.google.firebase.firestore.MetadataChanges.EXCLUDE);
    method @Deprecated public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot);
    method @Deprecated public static inline <reified T> T? toObject(com.google.firebase.firestore.DocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot);
    method @Deprecated public static inline <reified T> T toObject(com.google.firebase.firestore.QueryDocumentSnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Deprecated public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot);
    method @Deprecated public static inline <reified T> java.util.List<T> toObjects(com.google.firebase.firestore.QuerySnapshot, com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

}

package com.google.firebase.firestore.pipeline {

  public abstract class AbstractOptions<T extends com.google.firebase.firestore.pipeline.AbstractOptions<T>> {
    method protected final T adding(com.google.firebase.firestore.pipeline.AbstractOptions<? extends java.lang.Object?> newOptions);
    method public final T with(String key, boolean value);
    method protected final T with(String key, com.google.firebase.firestore.pipeline.AbstractOptions<? extends java.lang.Object?> subSection);
    method public final T with(String key, com.google.firebase.firestore.pipeline.Field value);
    method protected final T with(String key, com.google.firebase.firestore.pipeline.InternalOptions value);
    method public final T with(String key, com.google.firebase.firestore.pipeline.RawOptions value);
    method public final T with(String key, double value);
    method protected final T with(String key, error.NonExistentClass value);
    method public final T with(String key, String value);
    method protected final T with(String key, java.lang.String... values);
    method public final T with(String key, long value);
  }

  public final class AggregateFunction {
    method public com.google.firebase.firestore.pipeline.AliasedAggregate alias(String alias);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction average(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction average(String fieldName);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction count(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction count(String fieldName);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction countAll();
    method public static com.google.firebase.firestore.pipeline.AggregateFunction countDistinct(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction countDistinct(String fieldName);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction countIf(com.google.firebase.firestore.pipeline.BooleanExpression condition);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction maximum(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction maximum(String fieldName);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction minimum(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction minimum(String fieldName);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction sum(com.google.firebase.firestore.pipeline.Expression expression);
    method public static com.google.firebase.firestore.pipeline.AggregateFunction sum(String fieldName);
    field public static final com.google.firebase.firestore.pipeline.AggregateFunction.Companion Companion;
  }

  public static final class AggregateFunction.Companion {
    method public com.google.firebase.firestore.pipeline.AggregateFunction average(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction average(String fieldName);
    method public com.google.firebase.firestore.pipeline.AggregateFunction count(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction count(String fieldName);
    method public com.google.firebase.firestore.pipeline.AggregateFunction countAll();
    method public com.google.firebase.firestore.pipeline.AggregateFunction countDistinct(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction countDistinct(String fieldName);
    method public com.google.firebase.firestore.pipeline.AggregateFunction countIf(com.google.firebase.firestore.pipeline.BooleanExpression condition);
    method public com.google.firebase.firestore.pipeline.AggregateFunction generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
    method public com.google.firebase.firestore.pipeline.AggregateFunction maximum(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction maximum(String fieldName);
    method public com.google.firebase.firestore.pipeline.AggregateFunction minimum(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction minimum(String fieldName);
    method public com.google.firebase.firestore.pipeline.AggregateFunction sum(com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.AggregateFunction sum(String fieldName);
  }

  public final class AggregateHints extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.AggregateHints> {
    ctor public AggregateHints();
    method public com.google.firebase.firestore.pipeline.AggregateHints self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.AggregateHints withForceStreamableEnabled();
  }

  public final class AggregateOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.AggregateOptions> {
    ctor public AggregateOptions();
    method public com.google.firebase.firestore.pipeline.AggregateOptions self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.AggregateOptions withHints(com.google.firebase.firestore.pipeline.AggregateHints hints);
  }

  public final class AggregateStage extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.AggregateStage> {
    method public static com.google.firebase.firestore.pipeline.AggregateStage withAccumulators(com.google.firebase.firestore.pipeline.AliasedAggregate accumulator, com.google.firebase.firestore.pipeline.AliasedAggregate... additionalAccumulators);
    method public com.google.firebase.firestore.pipeline.AggregateStage withGroups(com.google.firebase.firestore.pipeline.Selectable group, java.lang.Object... additionalGroups);
    method public com.google.firebase.firestore.pipeline.AggregateStage withGroups(String groupField, java.lang.Object... additionalGroups);
    field public static final com.google.firebase.firestore.pipeline.AggregateStage.Companion Companion;
  }

  public static final class AggregateStage.Companion {
    method public com.google.firebase.firestore.pipeline.AggregateStage withAccumulators(com.google.firebase.firestore.pipeline.AliasedAggregate accumulator, com.google.firebase.firestore.pipeline.AliasedAggregate... additionalAccumulators);
  }

  public final class AliasedAggregate {
  }

  public final class AliasedExpression extends com.google.firebase.firestore.pipeline.Selectable {
    method public String canonicalId();
    method public String getAlias();
    method public com.google.firebase.firestore.pipeline.Expression getExpr();
    property public String alias;
    property public com.google.firebase.firestore.pipeline.Expression expr;
  }

  public class BooleanExpression extends com.google.firebase.firestore.pipeline.FunctionExpression {
    method public final com.google.firebase.firestore.pipeline.Expression conditional(com.google.firebase.firestore.pipeline.Expression thenExpr, com.google.firebase.firestore.pipeline.Expression elseExpr);
    method public final com.google.firebase.firestore.pipeline.Expression conditional(Object thenValue, Object elseValue);
    method public final com.google.firebase.firestore.pipeline.AggregateFunction countIf();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression ifError(com.google.firebase.firestore.pipeline.BooleanExpression catchExpr);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression not();
    field public static final com.google.firebase.firestore.pipeline.BooleanExpression.Companion Companion;
  }

  public static final class BooleanExpression.Companion {
    method public com.google.firebase.firestore.pipeline.BooleanExpression generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
  }

  public final class CollectionGroupOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.CollectionGroupOptions> {
    ctor public CollectionGroupOptions();
    method public com.google.firebase.firestore.pipeline.CollectionGroupOptions self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.CollectionGroupOptions withHints(com.google.firebase.firestore.pipeline.CollectionHints hints);
  }

  public final class CollectionGroupSource extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.CollectionGroupSource> {
    ctor public CollectionGroupSource(String collectionId, com.google.firebase.firestore.pipeline.InternalOptions options);
    method public String canonicalId();
    method public String getCollectionId();
    property public final String collectionId;
  }

  public final class CollectionHints extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.CollectionHints> {
    ctor public CollectionHints();
    method public com.google.firebase.firestore.pipeline.CollectionHints self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.CollectionHints withForceIndex(String value);
    method public com.google.firebase.firestore.pipeline.CollectionHints withIgnoreIndexFields(java.lang.String... values);
  }

  public final class CollectionSource extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.CollectionSource> {
    method public String canonicalId();
  }

  public final class CollectionSourceOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.CollectionSourceOptions> {
    ctor public CollectionSourceOptions();
    method public com.google.firebase.firestore.pipeline.CollectionSourceOptions withHints(com.google.firebase.firestore.pipeline.CollectionHints hints);
  }

  public abstract class Expression {
    method public static final com.google.firebase.firestore.pipeline.Expression abs(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression abs(String numericField);
    method public final com.google.firebase.firestore.pipeline.Expression add(com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression add(com.google.firebase.firestore.pipeline.Expression first, com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression add(com.google.firebase.firestore.pipeline.Expression first, Number second);
    method public final com.google.firebase.firestore.pipeline.Expression add(Number second);
    method public static final com.google.firebase.firestore.pipeline.Expression add(String numericFieldName, com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression add(String numericFieldName, Number second);
    method public com.google.firebase.firestore.pipeline.Selectable alias(String alias);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression and(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
    method public static final com.google.firebase.firestore.pipeline.Expression array(java.lang.Object?... elements);
    method public static final com.google.firebase.firestore.pipeline.Expression array(java.util.List<? extends java.lang.Object?> elements);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayConcat(com.google.firebase.firestore.pipeline.Expression firstArray, com.google.firebase.firestore.pipeline.Expression secondArray, java.lang.Object... otherArrays);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayConcat(com.google.firebase.firestore.pipeline.Expression firstArray, Object secondArray, java.lang.Object... otherArrays);
    method public final com.google.firebase.firestore.pipeline.Expression arrayConcat(com.google.firebase.firestore.pipeline.Expression secondArray, java.lang.Object... otherArrays);
    method public final com.google.firebase.firestore.pipeline.Expression arrayConcat(Object secondArray, java.lang.Object... otherArrays);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayConcat(String firstArrayField, com.google.firebase.firestore.pipeline.Expression secondArray, java.lang.Object... otherArrays);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayConcat(String firstArrayField, Object secondArray, java.lang.Object... otherArrays);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(com.google.firebase.firestore.pipeline.Expression element);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression element);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(com.google.firebase.firestore.pipeline.Expression array, Object element);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(Object element);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression element);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(String arrayFieldName, Object element);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(com.google.firebase.firestore.pipeline.Expression array, java.util.List<?> values);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(String arrayFieldName, java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(com.google.firebase.firestore.pipeline.Expression array, java.util.List<?> values);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(String arrayFieldName, java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.Expression arrayGet(com.google.firebase.firestore.pipeline.Expression offset);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayGet(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression offset);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayGet(com.google.firebase.firestore.pipeline.Expression array, int offset);
    method public final com.google.firebase.firestore.pipeline.Expression arrayGet(int offset);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayGet(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression offset);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayGet(String arrayFieldName, int offset);
    method public final com.google.firebase.firestore.pipeline.Expression arrayLength();
    method public static final com.google.firebase.firestore.pipeline.Expression arrayLength(com.google.firebase.firestore.pipeline.Expression array);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayLength(String arrayFieldName);
    method public final com.google.firebase.firestore.pipeline.Expression arrayReverse();
    method public static final com.google.firebase.firestore.pipeline.Expression arrayReverse(com.google.firebase.firestore.pipeline.Expression array);
    method public static final com.google.firebase.firestore.pipeline.Expression arrayReverse(String arrayFieldName);
    method public final com.google.firebase.firestore.pipeline.Ordering ascending();
    method public final com.google.firebase.firestore.pipeline.AggregateFunction average();
    method public final com.google.firebase.firestore.pipeline.Expression bitAnd(byte[] bitsOther);
    method public final com.google.firebase.firestore.pipeline.Expression bitAnd(com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitAnd(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitAnd(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitAnd(String bitsFieldName, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitAnd(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public final com.google.firebase.firestore.pipeline.Expression bitLeftShift(com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitLeftShift(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitLeftShift(com.google.firebase.firestore.pipeline.Expression bits, int number);
    method public final com.google.firebase.firestore.pipeline.Expression bitLeftShift(int number);
    method public static final com.google.firebase.firestore.pipeline.Expression bitLeftShift(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitLeftShift(String bitsFieldName, int number);
    method public final com.google.firebase.firestore.pipeline.Expression bitNot();
    method public static final com.google.firebase.firestore.pipeline.Expression bitNot(com.google.firebase.firestore.pipeline.Expression bits);
    method public static final com.google.firebase.firestore.pipeline.Expression bitNot(String bitsFieldName);
    method public final com.google.firebase.firestore.pipeline.Expression bitOr(byte[] bitsOther);
    method public final com.google.firebase.firestore.pipeline.Expression bitOr(com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitOr(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitOr(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitOr(String bitsFieldName, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitOr(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public final com.google.firebase.firestore.pipeline.Expression bitRightShift(com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitRightShift(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitRightShift(com.google.firebase.firestore.pipeline.Expression bits, int number);
    method public final com.google.firebase.firestore.pipeline.Expression bitRightShift(int number);
    method public static final com.google.firebase.firestore.pipeline.Expression bitRightShift(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression bitRightShift(String bitsFieldName, int number);
    method public final com.google.firebase.firestore.pipeline.Expression bitXor(byte[] bitsOther);
    method public final com.google.firebase.firestore.pipeline.Expression bitXor(com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitXor(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitXor(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitXor(String bitsFieldName, byte[] bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression bitXor(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public static final com.google.firebase.firestore.pipeline.Expression blob(byte[] bytes);
    method public final com.google.firebase.firestore.pipeline.Expression byteLength();
    method public static final com.google.firebase.firestore.pipeline.Expression byteLength(com.google.firebase.firestore.pipeline.Expression value);
    method public static final com.google.firebase.firestore.pipeline.Expression byteLength(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression ceil();
    method public static final com.google.firebase.firestore.pipeline.Expression ceil(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression ceil(String numericField);
    method public final com.google.firebase.firestore.pipeline.Expression charLength();
    method public static final com.google.firebase.firestore.pipeline.Expression charLength(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression charLength(String fieldName);
    method public static final com.google.firebase.firestore.pipeline.Expression conditional(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.Expression thenExpr, com.google.firebase.firestore.pipeline.Expression elseExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression conditional(com.google.firebase.firestore.pipeline.BooleanExpression condition, Object thenValue, Object elseValue);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression constant(boolean value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(byte[] value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.Blob value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.DocumentReference ref);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.GeoPoint value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.VectorValue value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.Timestamp value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(Number value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(String value);
    method public static final com.google.firebase.firestore.pipeline.Expression constant(java.util.Date value);
    method public final com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public final com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.VectorValue vector);
    method public final com.google.firebase.firestore.pipeline.Expression cosineDistance(double[] vector);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public static final com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, double[] vector);
    method public final com.google.firebase.firestore.pipeline.AggregateFunction count();
    method public final com.google.firebase.firestore.pipeline.Ordering descending();
    method public final com.google.firebase.firestore.pipeline.Expression divide(com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression divide(com.google.firebase.firestore.pipeline.Expression dividend, com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression divide(com.google.firebase.firestore.pipeline.Expression dividend, Number divisor);
    method public final com.google.firebase.firestore.pipeline.Expression divide(Number divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression divide(String dividendFieldName, com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression divide(String dividendFieldName, Number divisor);
    method public final com.google.firebase.firestore.pipeline.Expression documentId();
    method public static final com.google.firebase.firestore.pipeline.Expression documentId(com.google.firebase.firestore.DocumentReference docRef);
    method public static final com.google.firebase.firestore.pipeline.Expression documentId(com.google.firebase.firestore.pipeline.Expression documentPath);
    method public static final com.google.firebase.firestore.pipeline.Expression documentId(String documentPath);
    method public final com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public final com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.VectorValue vector);
    method public final com.google.firebase.firestore.pipeline.Expression dotProduct(double[] vector);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public static final com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, double[] vector);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(com.google.firebase.firestore.pipeline.Expression suffix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, com.google.firebase.firestore.pipeline.Expression suffix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, String suffix);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(String suffix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(String fieldName, com.google.firebase.firestore.pipeline.Expression suffix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression endsWith(String fieldName, String suffix);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression equal(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equal(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equal(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression equal(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equal(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equal(String fieldName, Object value);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(com.google.firebase.firestore.pipeline.Expression expression, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(com.google.firebase.firestore.pipeline.Expression expression, java.util.List<?> values);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(String fieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(String fieldName, java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression equalAny(java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public final com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.VectorValue vector);
    method public final com.google.firebase.firestore.pipeline.Expression euclideanDistance(double[] vector);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public static final com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, double[] vector);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression exists();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression exists(com.google.firebase.firestore.pipeline.Expression value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression exists(String fieldName);
    method public static final com.google.firebase.firestore.pipeline.Expression exp(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression exp(String numericField);
    method public static final com.google.firebase.firestore.pipeline.Field field(com.google.firebase.firestore.FieldPath fieldPath);
    method public static final com.google.firebase.firestore.pipeline.Field field(String name);
    method public final com.google.firebase.firestore.pipeline.Expression floor();
    method public static final com.google.firebase.firestore.pipeline.Expression floor(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression floor(String numericField);
    method public static final com.google.firebase.firestore.pipeline.Expression generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(String fieldName, Object value);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(String fieldName, Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression ifError(com.google.firebase.firestore.pipeline.BooleanExpression tryExpr, com.google.firebase.firestore.pipeline.BooleanExpression catchExpr);
    method public final com.google.firebase.firestore.pipeline.Expression ifError(com.google.firebase.firestore.pipeline.Expression catchExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression ifError(com.google.firebase.firestore.pipeline.Expression tryExpr, com.google.firebase.firestore.pipeline.Expression catchExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression ifError(com.google.firebase.firestore.pipeline.Expression tryExpr, Object catchValue);
    method public final com.google.firebase.firestore.pipeline.Expression ifError(Object catchValue);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isAbsent();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isAbsent(com.google.firebase.firestore.pipeline.Expression value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isAbsent(String fieldName);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isError();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isError(com.google.firebase.firestore.pipeline.Expression expr);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isNan();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNan(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNan(String fieldName);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isNotNan();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNotNan(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNotNan(String fieldName);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isNotNull();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNotNull(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNotNull(String fieldName);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression isNull();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNull(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression isNull(String fieldName);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThan(String fieldName, Object value);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(String fieldName, Object value);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression like(com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression like(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression like(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression like(String pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression like(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression like(String fieldName, String pattern);
    method public static final com.google.firebase.firestore.pipeline.Expression ln(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression ln(String numericField);
    method public static final com.google.firebase.firestore.pipeline.Expression log(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression base);
    method public static final com.google.firebase.firestore.pipeline.Expression log(com.google.firebase.firestore.pipeline.Expression numericExpr, Number base);
    method public static final com.google.firebase.firestore.pipeline.Expression log(String numericField, com.google.firebase.firestore.pipeline.Expression base);
    method public static final com.google.firebase.firestore.pipeline.Expression log(String numericField, Number base);
    method public static final com.google.firebase.firestore.pipeline.Expression log10(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression log10(String numericField);
    method public static final com.google.firebase.firestore.pipeline.Expression logicalMaximum(com.google.firebase.firestore.pipeline.Expression expr, java.lang.Object... others);
    method public final com.google.firebase.firestore.pipeline.Expression logicalMaximum(com.google.firebase.firestore.pipeline.Expression... others);
    method public final com.google.firebase.firestore.pipeline.Expression logicalMaximum(java.lang.Object... others);
    method public static final com.google.firebase.firestore.pipeline.Expression logicalMaximum(String fieldName, java.lang.Object... others);
    method public static final com.google.firebase.firestore.pipeline.Expression logicalMinimum(com.google.firebase.firestore.pipeline.Expression expr, java.lang.Object... others);
    method public final com.google.firebase.firestore.pipeline.Expression logicalMinimum(com.google.firebase.firestore.pipeline.Expression... others);
    method public final com.google.firebase.firestore.pipeline.Expression logicalMinimum(java.lang.Object... others);
    method public static final com.google.firebase.firestore.pipeline.Expression logicalMinimum(String fieldName, java.lang.Object... others);
    method public static final com.google.firebase.firestore.pipeline.Expression map(java.util.Map<java.lang.String,?> elements);
    method public final com.google.firebase.firestore.pipeline.Expression mapGet(com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression mapGet(com.google.firebase.firestore.pipeline.Expression mapExpression, com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression mapGet(com.google.firebase.firestore.pipeline.Expression mapExpression, String key);
    method public final com.google.firebase.firestore.pipeline.Expression mapGet(String key);
    method public static final com.google.firebase.firestore.pipeline.Expression mapGet(String fieldName, com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression mapGet(String fieldName, String key);
    method public static final com.google.firebase.firestore.pipeline.Expression mapMerge(com.google.firebase.firestore.pipeline.Expression firstMap, com.google.firebase.firestore.pipeline.Expression secondMap, com.google.firebase.firestore.pipeline.Expression... otherMaps);
    method public final com.google.firebase.firestore.pipeline.Expression mapMerge(com.google.firebase.firestore.pipeline.Expression mapExpr, com.google.firebase.firestore.pipeline.Expression... otherMaps);
    method public static final com.google.firebase.firestore.pipeline.Expression mapMerge(String firstMapFieldName, com.google.firebase.firestore.pipeline.Expression secondMap, com.google.firebase.firestore.pipeline.Expression... otherMaps);
    method public final com.google.firebase.firestore.pipeline.Expression mapRemove(com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression mapRemove(com.google.firebase.firestore.pipeline.Expression mapExpr, com.google.firebase.firestore.pipeline.Expression key);
    method public static final com.google.firebase.firestore.pipeline.Expression mapRemove(com.google.firebase.firestore.pipeline.Expression mapExpr, String key);
    method public final com.google.firebase.firestore.pipeline.Expression mapRemove(String key);
    method public static final com.google.firebase.firestore.pipeline.Expression mapRemove(String mapField, com.google.firebase.firestore.pipeline.Expression key);
    method public static final com.google.firebase.firestore.pipeline.Expression mapRemove(String mapField, String key);
    method public final com.google.firebase.firestore.pipeline.AggregateFunction maximum();
    method public final com.google.firebase.firestore.pipeline.AggregateFunction minimum();
    method public final com.google.firebase.firestore.pipeline.Expression mod(com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression mod(com.google.firebase.firestore.pipeline.Expression dividend, com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression mod(com.google.firebase.firestore.pipeline.Expression dividend, Number divisor);
    method public final com.google.firebase.firestore.pipeline.Expression mod(Number divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression mod(String dividendFieldName, com.google.firebase.firestore.pipeline.Expression divisor);
    method public static final com.google.firebase.firestore.pipeline.Expression mod(String dividendFieldName, Number divisor);
    method public final com.google.firebase.firestore.pipeline.Expression multiply(com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression multiply(com.google.firebase.firestore.pipeline.Expression first, com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression multiply(com.google.firebase.firestore.pipeline.Expression first, Number second);
    method public final com.google.firebase.firestore.pipeline.Expression multiply(Number second);
    method public static final com.google.firebase.firestore.pipeline.Expression multiply(String numericFieldName, com.google.firebase.firestore.pipeline.Expression second);
    method public static final com.google.firebase.firestore.pipeline.Expression multiply(String numericFieldName, Number second);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression not(com.google.firebase.firestore.pipeline.BooleanExpression condition);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(com.google.firebase.firestore.pipeline.Expression other);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(Object value);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqual(String fieldName, Object value);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(com.google.firebase.firestore.pipeline.Expression expression, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(com.google.firebase.firestore.pipeline.Expression expression, java.util.List<?> values);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(String fieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(String fieldName, java.util.List<?> values);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(java.util.List<?> values);
    method public static final com.google.firebase.firestore.pipeline.Expression nullValue();
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression or(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
    method public final com.google.firebase.firestore.pipeline.Expression pow(com.google.firebase.firestore.pipeline.Expression exponent);
    method public static final com.google.firebase.firestore.pipeline.Expression pow(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression exponent);
    method public static final com.google.firebase.firestore.pipeline.Expression pow(com.google.firebase.firestore.pipeline.Expression numericExpr, Number exponent);
    method public final com.google.firebase.firestore.pipeline.Expression pow(Number exponent);
    method public static final com.google.firebase.firestore.pipeline.Expression pow(String numericField, com.google.firebase.firestore.pipeline.Expression exponent);
    method public static final com.google.firebase.firestore.pipeline.Expression pow(String numericField, Number exponent);
    method public static final com.google.firebase.firestore.pipeline.Expression rand();
    method public final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(String pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexContains(String fieldName, String pattern);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(String pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(String fieldName, String pattern);
    method public final com.google.firebase.firestore.pipeline.Expression replaceAll(com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceAll(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceAll(com.google.firebase.firestore.pipeline.Expression stringExpression, String find, String replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceAll(String fieldName, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public final com.google.firebase.firestore.pipeline.Expression replaceAll(String find, String replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceAll(String fieldName, String find, String replace);
    method public final com.google.firebase.firestore.pipeline.Expression replaceFirst(com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceFirst(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceFirst(com.google.firebase.firestore.pipeline.Expression stringExpression, String find, String replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceFirst(String fieldName, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public final com.google.firebase.firestore.pipeline.Expression replaceFirst(String find, String replace);
    method public static final com.google.firebase.firestore.pipeline.Expression replaceFirst(String fieldName, String find, String replace);
    method public final com.google.firebase.firestore.pipeline.Expression reverse();
    method public static final com.google.firebase.firestore.pipeline.Expression reverse(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression reverse(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression round();
    method public static final com.google.firebase.firestore.pipeline.Expression round(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression round(String numericField);
    method public final com.google.firebase.firestore.pipeline.Expression roundToPrecision(com.google.firebase.firestore.pipeline.Expression decimalPlace);
    method public static final com.google.firebase.firestore.pipeline.Expression roundToPrecision(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression decimalPlace);
    method public static final com.google.firebase.firestore.pipeline.Expression roundToPrecision(com.google.firebase.firestore.pipeline.Expression numericExpr, int decimalPlace);
    method public final com.google.firebase.firestore.pipeline.Expression roundToPrecision(int decimalPlace);
    method public static final com.google.firebase.firestore.pipeline.Expression roundToPrecision(String numericField, com.google.firebase.firestore.pipeline.Expression decimalPlace);
    method public static final com.google.firebase.firestore.pipeline.Expression roundToPrecision(String numericField, int decimalPlace);
    method public final com.google.firebase.firestore.pipeline.Expression sqrt();
    method public static final com.google.firebase.firestore.pipeline.Expression sqrt(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public static final com.google.firebase.firestore.pipeline.Expression sqrt(String numericField);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(com.google.firebase.firestore.pipeline.Expression prefix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, com.google.firebase.firestore.pipeline.Expression prefix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, String prefix);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(String prefix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(String fieldName, com.google.firebase.firestore.pipeline.Expression prefix);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression startsWith(String fieldName, String prefix);
    method public static final com.google.firebase.firestore.pipeline.Expression stringConcat(com.google.firebase.firestore.pipeline.Expression firstString, com.google.firebase.firestore.pipeline.Expression... otherStrings);
    method public static final com.google.firebase.firestore.pipeline.Expression stringConcat(com.google.firebase.firestore.pipeline.Expression firstString, java.lang.Object... otherStrings);
    method public final com.google.firebase.firestore.pipeline.Expression stringConcat(com.google.firebase.firestore.pipeline.Expression... stringExpressions);
    method public final com.google.firebase.firestore.pipeline.Expression stringConcat(java.lang.Object... strings);
    method public static final com.google.firebase.firestore.pipeline.Expression stringConcat(String fieldName, com.google.firebase.firestore.pipeline.Expression... otherStrings);
    method public static final com.google.firebase.firestore.pipeline.Expression stringConcat(String fieldName, java.lang.Object... otherStrings);
    method public final com.google.firebase.firestore.pipeline.Expression stringConcat(java.lang.String... strings);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(com.google.firebase.firestore.pipeline.Expression substring);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression substring);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(com.google.firebase.firestore.pipeline.Expression stringExpression, String substring);
    method public final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(String substring);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(String fieldName, com.google.firebase.firestore.pipeline.Expression substring);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression stringContains(String fieldName, String substring);
    method public final com.google.firebase.firestore.pipeline.Expression substring(com.google.firebase.firestore.pipeline.Expression start, com.google.firebase.firestore.pipeline.Expression length);
    method public static final com.google.firebase.firestore.pipeline.Expression substring(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression index, com.google.firebase.firestore.pipeline.Expression length);
    method public final com.google.firebase.firestore.pipeline.Expression substring(int start, int length);
    method public static final com.google.firebase.firestore.pipeline.Expression substring(String fieldName, int index, int length);
    method public final com.google.firebase.firestore.pipeline.Expression subtract(com.google.firebase.firestore.pipeline.Expression subtrahend);
    method public static final com.google.firebase.firestore.pipeline.Expression subtract(com.google.firebase.firestore.pipeline.Expression minuend, com.google.firebase.firestore.pipeline.Expression subtrahend);
    method public static final com.google.firebase.firestore.pipeline.Expression subtract(com.google.firebase.firestore.pipeline.Expression minuend, Number subtrahend);
    method public final com.google.firebase.firestore.pipeline.Expression subtract(Number subtrahend);
    method public static final com.google.firebase.firestore.pipeline.Expression subtract(String numericFieldName, com.google.firebase.firestore.pipeline.Expression subtrahend);
    method public static final com.google.firebase.firestore.pipeline.Expression subtract(String numericFieldName, Number subtrahend);
    method public final com.google.firebase.firestore.pipeline.AggregateFunction sum();
    method public final com.google.firebase.firestore.pipeline.Expression timestampAdd(com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampAdd(com.google.firebase.firestore.pipeline.Expression timestamp, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampAdd(com.google.firebase.firestore.pipeline.Expression timestamp, String unit, long amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampAdd(String fieldName, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampAdd(String fieldName, String unit, long amount);
    method public final com.google.firebase.firestore.pipeline.Expression timestampAdd(String unit, long amount);
    method public final com.google.firebase.firestore.pipeline.Expression timestampSubtract(com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampSubtract(com.google.firebase.firestore.pipeline.Expression timestamp, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampSubtract(com.google.firebase.firestore.pipeline.Expression timestamp, String unit, long amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampSubtract(String fieldName, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampSubtract(String fieldName, String unit, long amount);
    method public final com.google.firebase.firestore.pipeline.Expression timestampSubtract(String unit, long amount);
    method public final com.google.firebase.firestore.pipeline.Expression timestampToUnixMicros();
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixMicros(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixMicros(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression timestampToUnixMillis();
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixMillis(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixMillis(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression timestampToUnixSeconds();
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixSeconds(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression timestampToUnixSeconds(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression toLower();
    method public static final com.google.firebase.firestore.pipeline.Expression toLower(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression toLower(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression toUpper();
    method public static final com.google.firebase.firestore.pipeline.Expression toUpper(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression toUpper(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression trim();
    method public static final com.google.firebase.firestore.pipeline.Expression trim(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression trim(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression unixMicrosToTimestamp();
    method public static final com.google.firebase.firestore.pipeline.Expression unixMicrosToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression unixMicrosToTimestamp(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression unixMillisToTimestamp();
    method public static final com.google.firebase.firestore.pipeline.Expression unixMillisToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression unixMillisToTimestamp(String fieldName);
    method public final com.google.firebase.firestore.pipeline.Expression unixSecondsToTimestamp();
    method public static final com.google.firebase.firestore.pipeline.Expression unixSecondsToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public static final com.google.firebase.firestore.pipeline.Expression unixSecondsToTimestamp(String fieldName);
    method public static final com.google.firebase.firestore.pipeline.Expression vector(com.google.firebase.firestore.VectorValue vector);
    method public static final com.google.firebase.firestore.pipeline.Expression vector(double[] vector);
    method public final com.google.firebase.firestore.pipeline.Expression vectorLength();
    method public static final com.google.firebase.firestore.pipeline.Expression vectorLength(com.google.firebase.firestore.pipeline.Expression vectorExpression);
    method public static final com.google.firebase.firestore.pipeline.Expression vectorLength(String fieldName);
    method public static final com.google.firebase.firestore.pipeline.BooleanExpression xor(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
    field public static final com.google.firebase.firestore.pipeline.Expression.Companion Companion;
  }

  public static final class Expression.Companion {
    method public com.google.firebase.firestore.pipeline.Expression abs(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression abs(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression add(com.google.firebase.firestore.pipeline.Expression first, com.google.firebase.firestore.pipeline.Expression second);
    method public com.google.firebase.firestore.pipeline.Expression add(com.google.firebase.firestore.pipeline.Expression first, Number second);
    method public com.google.firebase.firestore.pipeline.Expression add(String numericFieldName, com.google.firebase.firestore.pipeline.Expression second);
    method public com.google.firebase.firestore.pipeline.Expression add(String numericFieldName, Number second);
    method public com.google.firebase.firestore.pipeline.BooleanExpression and(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
    method public com.google.firebase.firestore.pipeline.Expression array(java.lang.Object?... elements);
    method public com.google.firebase.firestore.pipeline.Expression array(java.util.List<? extends java.lang.Object?> elements);
    method public com.google.firebase.firestore.pipeline.Expression arrayConcat(com.google.firebase.firestore.pipeline.Expression firstArray, com.google.firebase.firestore.pipeline.Expression secondArray, java.lang.Object... otherArrays);
    method public com.google.firebase.firestore.pipeline.Expression arrayConcat(com.google.firebase.firestore.pipeline.Expression firstArray, Object secondArray, java.lang.Object... otherArrays);
    method public com.google.firebase.firestore.pipeline.Expression arrayConcat(String firstArrayField, com.google.firebase.firestore.pipeline.Expression secondArray, java.lang.Object... otherArrays);
    method public com.google.firebase.firestore.pipeline.Expression arrayConcat(String firstArrayField, Object secondArray, java.lang.Object... otherArrays);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression element);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(com.google.firebase.firestore.pipeline.Expression array, Object element);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression element);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContains(String arrayFieldName, Object element);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(com.google.firebase.firestore.pipeline.Expression array, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAll(String arrayFieldName, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(com.google.firebase.firestore.pipeline.Expression array, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression arrayContainsAny(String arrayFieldName, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.Expression arrayGet(com.google.firebase.firestore.pipeline.Expression array, com.google.firebase.firestore.pipeline.Expression offset);
    method public com.google.firebase.firestore.pipeline.Expression arrayGet(com.google.firebase.firestore.pipeline.Expression array, int offset);
    method public com.google.firebase.firestore.pipeline.Expression arrayGet(String arrayFieldName, com.google.firebase.firestore.pipeline.Expression offset);
    method public com.google.firebase.firestore.pipeline.Expression arrayGet(String arrayFieldName, int offset);
    method public com.google.firebase.firestore.pipeline.Expression arrayLength(com.google.firebase.firestore.pipeline.Expression array);
    method public com.google.firebase.firestore.pipeline.Expression arrayLength(String arrayFieldName);
    method public com.google.firebase.firestore.pipeline.Expression arrayReverse(com.google.firebase.firestore.pipeline.Expression array);
    method public com.google.firebase.firestore.pipeline.Expression arrayReverse(String arrayFieldName);
    method public com.google.firebase.firestore.pipeline.Expression bitAnd(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitAnd(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitAnd(String bitsFieldName, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitAnd(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitLeftShift(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public com.google.firebase.firestore.pipeline.Expression bitLeftShift(com.google.firebase.firestore.pipeline.Expression bits, int number);
    method public com.google.firebase.firestore.pipeline.Expression bitLeftShift(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public com.google.firebase.firestore.pipeline.Expression bitLeftShift(String bitsFieldName, int number);
    method public com.google.firebase.firestore.pipeline.Expression bitNot(com.google.firebase.firestore.pipeline.Expression bits);
    method public com.google.firebase.firestore.pipeline.Expression bitNot(String bitsFieldName);
    method public com.google.firebase.firestore.pipeline.Expression bitOr(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitOr(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitOr(String bitsFieldName, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitOr(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitRightShift(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public com.google.firebase.firestore.pipeline.Expression bitRightShift(com.google.firebase.firestore.pipeline.Expression bits, int number);
    method public com.google.firebase.firestore.pipeline.Expression bitRightShift(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression numberExpr);
    method public com.google.firebase.firestore.pipeline.Expression bitRightShift(String bitsFieldName, int number);
    method public com.google.firebase.firestore.pipeline.Expression bitXor(com.google.firebase.firestore.pipeline.Expression bits, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitXor(com.google.firebase.firestore.pipeline.Expression bits, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitXor(String bitsFieldName, byte[] bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression bitXor(String bitsFieldName, com.google.firebase.firestore.pipeline.Expression bitsOther);
    method public com.google.firebase.firestore.pipeline.Expression blob(byte[] bytes);
    method public com.google.firebase.firestore.pipeline.Expression byteLength(com.google.firebase.firestore.pipeline.Expression value);
    method public com.google.firebase.firestore.pipeline.Expression byteLength(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression ceil(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression ceil(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression charLength(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression charLength(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression conditional(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.Expression thenExpr, com.google.firebase.firestore.pipeline.Expression elseExpr);
    method public com.google.firebase.firestore.pipeline.Expression conditional(com.google.firebase.firestore.pipeline.BooleanExpression condition, Object thenValue, Object elseValue);
    method public com.google.firebase.firestore.pipeline.BooleanExpression constant(boolean value);
    method public com.google.firebase.firestore.pipeline.Expression constant(byte[] value);
    method public com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.Blob value);
    method public com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.DocumentReference ref);
    method public com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.GeoPoint value);
    method public com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.firestore.VectorValue value);
    method public com.google.firebase.firestore.pipeline.Expression constant(com.google.firebase.Timestamp value);
    method public com.google.firebase.firestore.pipeline.Expression constant(Number value);
    method public com.google.firebase.firestore.pipeline.Expression constant(String value);
    method public com.google.firebase.firestore.pipeline.Expression constant(java.util.Date value);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public com.google.firebase.firestore.pipeline.Expression cosineDistance(String vectorFieldName, double[] vector);
    method public com.google.firebase.firestore.pipeline.Expression divide(com.google.firebase.firestore.pipeline.Expression dividend, com.google.firebase.firestore.pipeline.Expression divisor);
    method public com.google.firebase.firestore.pipeline.Expression divide(com.google.firebase.firestore.pipeline.Expression dividend, Number divisor);
    method public com.google.firebase.firestore.pipeline.Expression divide(String dividendFieldName, com.google.firebase.firestore.pipeline.Expression divisor);
    method public com.google.firebase.firestore.pipeline.Expression divide(String dividendFieldName, Number divisor);
    method public com.google.firebase.firestore.pipeline.Expression documentId(com.google.firebase.firestore.DocumentReference docRef);
    method public com.google.firebase.firestore.pipeline.Expression documentId(com.google.firebase.firestore.pipeline.Expression documentPath);
    method public com.google.firebase.firestore.pipeline.Expression documentId(String documentPath);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public com.google.firebase.firestore.pipeline.Expression dotProduct(String vectorFieldName, double[] vector);
    method public com.google.firebase.firestore.pipeline.BooleanExpression endsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, com.google.firebase.firestore.pipeline.Expression suffix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression endsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, String suffix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression endsWith(String fieldName, com.google.firebase.firestore.pipeline.Expression suffix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression endsWith(String fieldName, String suffix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equal(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equal(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equal(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equal(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equalAny(com.google.firebase.firestore.pipeline.Expression expression, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equalAny(com.google.firebase.firestore.pipeline.Expression expression, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equalAny(String fieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression equalAny(String fieldName, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.pipeline.Expression vector2);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, com.google.firebase.firestore.VectorValue vector2);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(com.google.firebase.firestore.pipeline.Expression vector1, double[] vector2);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, com.google.firebase.firestore.pipeline.Expression vector);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, com.google.firebase.firestore.VectorValue vector);
    method public com.google.firebase.firestore.pipeline.Expression euclideanDistance(String vectorFieldName, double[] vector);
    method public com.google.firebase.firestore.pipeline.BooleanExpression exists(com.google.firebase.firestore.pipeline.Expression value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression exists(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression exp(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression exp(String numericField);
    method public com.google.firebase.firestore.pipeline.Field field(com.google.firebase.firestore.FieldPath fieldPath);
    method public com.google.firebase.firestore.pipeline.Field field(String name);
    method public com.google.firebase.firestore.pipeline.Expression floor(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression floor(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression generic(String name, com.google.firebase.firestore.pipeline.Expression... expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThan(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression greaterThanOrEqual(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression ifError(com.google.firebase.firestore.pipeline.BooleanExpression tryExpr, com.google.firebase.firestore.pipeline.BooleanExpression catchExpr);
    method public com.google.firebase.firestore.pipeline.Expression ifError(com.google.firebase.firestore.pipeline.Expression tryExpr, com.google.firebase.firestore.pipeline.Expression catchExpr);
    method public com.google.firebase.firestore.pipeline.Expression ifError(com.google.firebase.firestore.pipeline.Expression tryExpr, Object catchValue);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isAbsent(com.google.firebase.firestore.pipeline.Expression value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isAbsent(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isError(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNan(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNan(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNotNan(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNotNan(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNotNull(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNotNull(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNull(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.BooleanExpression isNull(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThan(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThan(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThan(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThan(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression lessThanOrEqual(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression like(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression like(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression like(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression like(String fieldName, String pattern);
    method public com.google.firebase.firestore.pipeline.Expression ln(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression ln(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression log(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression base);
    method public com.google.firebase.firestore.pipeline.Expression log(com.google.firebase.firestore.pipeline.Expression numericExpr, Number base);
    method public com.google.firebase.firestore.pipeline.Expression log(String numericField, com.google.firebase.firestore.pipeline.Expression base);
    method public com.google.firebase.firestore.pipeline.Expression log(String numericField, Number base);
    method public com.google.firebase.firestore.pipeline.Expression log10(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression log10(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression logicalMaximum(com.google.firebase.firestore.pipeline.Expression expr, java.lang.Object... others);
    method public com.google.firebase.firestore.pipeline.Expression logicalMaximum(String fieldName, java.lang.Object... others);
    method public com.google.firebase.firestore.pipeline.Expression logicalMinimum(com.google.firebase.firestore.pipeline.Expression expr, java.lang.Object... others);
    method public com.google.firebase.firestore.pipeline.Expression logicalMinimum(String fieldName, java.lang.Object... others);
    method public com.google.firebase.firestore.pipeline.Expression map(java.util.Map<java.lang.String,?> elements);
    method public com.google.firebase.firestore.pipeline.Expression mapGet(com.google.firebase.firestore.pipeline.Expression mapExpression, com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public com.google.firebase.firestore.pipeline.Expression mapGet(com.google.firebase.firestore.pipeline.Expression mapExpression, String key);
    method public com.google.firebase.firestore.pipeline.Expression mapGet(String fieldName, com.google.firebase.firestore.pipeline.Expression keyExpression);
    method public com.google.firebase.firestore.pipeline.Expression mapGet(String fieldName, String key);
    method public com.google.firebase.firestore.pipeline.Expression mapMerge(com.google.firebase.firestore.pipeline.Expression firstMap, com.google.firebase.firestore.pipeline.Expression secondMap, com.google.firebase.firestore.pipeline.Expression... otherMaps);
    method public com.google.firebase.firestore.pipeline.Expression mapMerge(String firstMapFieldName, com.google.firebase.firestore.pipeline.Expression secondMap, com.google.firebase.firestore.pipeline.Expression... otherMaps);
    method public com.google.firebase.firestore.pipeline.Expression mapRemove(com.google.firebase.firestore.pipeline.Expression mapExpr, com.google.firebase.firestore.pipeline.Expression key);
    method public com.google.firebase.firestore.pipeline.Expression mapRemove(com.google.firebase.firestore.pipeline.Expression mapExpr, String key);
    method public com.google.firebase.firestore.pipeline.Expression mapRemove(String mapField, com.google.firebase.firestore.pipeline.Expression key);
    method public com.google.firebase.firestore.pipeline.Expression mapRemove(String mapField, String key);
    method public com.google.firebase.firestore.pipeline.Expression mod(com.google.firebase.firestore.pipeline.Expression dividend, com.google.firebase.firestore.pipeline.Expression divisor);
    method public com.google.firebase.firestore.pipeline.Expression mod(com.google.firebase.firestore.pipeline.Expression dividend, Number divisor);
    method public com.google.firebase.firestore.pipeline.Expression mod(String dividendFieldName, com.google.firebase.firestore.pipeline.Expression divisor);
    method public com.google.firebase.firestore.pipeline.Expression mod(String dividendFieldName, Number divisor);
    method public com.google.firebase.firestore.pipeline.Expression multiply(com.google.firebase.firestore.pipeline.Expression first, com.google.firebase.firestore.pipeline.Expression second);
    method public com.google.firebase.firestore.pipeline.Expression multiply(com.google.firebase.firestore.pipeline.Expression first, Number second);
    method public com.google.firebase.firestore.pipeline.Expression multiply(String numericFieldName, com.google.firebase.firestore.pipeline.Expression second);
    method public com.google.firebase.firestore.pipeline.Expression multiply(String numericFieldName, Number second);
    method public com.google.firebase.firestore.pipeline.BooleanExpression not(com.google.firebase.firestore.pipeline.BooleanExpression condition);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqual(com.google.firebase.firestore.pipeline.Expression left, com.google.firebase.firestore.pipeline.Expression right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqual(com.google.firebase.firestore.pipeline.Expression left, Object right);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqual(String fieldName, com.google.firebase.firestore.pipeline.Expression expression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqual(String fieldName, Object value);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(com.google.firebase.firestore.pipeline.Expression expression, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(com.google.firebase.firestore.pipeline.Expression expression, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(String fieldName, com.google.firebase.firestore.pipeline.Expression arrayExpression);
    method public com.google.firebase.firestore.pipeline.BooleanExpression notEqualAny(String fieldName, java.util.List<?> values);
    method public com.google.firebase.firestore.pipeline.Expression nullValue();
    method public com.google.firebase.firestore.pipeline.BooleanExpression or(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
    method public com.google.firebase.firestore.pipeline.Expression pow(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression exponent);
    method public com.google.firebase.firestore.pipeline.Expression pow(com.google.firebase.firestore.pipeline.Expression numericExpr, Number exponent);
    method public com.google.firebase.firestore.pipeline.Expression pow(String numericField, com.google.firebase.firestore.pipeline.Expression exponent);
    method public com.google.firebase.firestore.pipeline.Expression pow(String numericField, Number exponent);
    method public com.google.firebase.firestore.pipeline.Expression rand();
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexContains(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexContains(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexContains(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexContains(String fieldName, String pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(com.google.firebase.firestore.pipeline.Expression stringExpression, String pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(String fieldName, com.google.firebase.firestore.pipeline.Expression pattern);
    method public com.google.firebase.firestore.pipeline.BooleanExpression regexMatch(String fieldName, String pattern);
    method public com.google.firebase.firestore.pipeline.Expression replaceAll(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceAll(com.google.firebase.firestore.pipeline.Expression stringExpression, String find, String replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceAll(String fieldName, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceAll(String fieldName, String find, String replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceFirst(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceFirst(com.google.firebase.firestore.pipeline.Expression stringExpression, String find, String replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceFirst(String fieldName, com.google.firebase.firestore.pipeline.Expression find, com.google.firebase.firestore.pipeline.Expression replace);
    method public com.google.firebase.firestore.pipeline.Expression replaceFirst(String fieldName, String find, String replace);
    method public com.google.firebase.firestore.pipeline.Expression reverse(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public com.google.firebase.firestore.pipeline.Expression reverse(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression round(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression round(String numericField);
    method public com.google.firebase.firestore.pipeline.Expression roundToPrecision(com.google.firebase.firestore.pipeline.Expression numericExpr, com.google.firebase.firestore.pipeline.Expression decimalPlace);
    method public com.google.firebase.firestore.pipeline.Expression roundToPrecision(com.google.firebase.firestore.pipeline.Expression numericExpr, int decimalPlace);
    method public com.google.firebase.firestore.pipeline.Expression roundToPrecision(String numericField, com.google.firebase.firestore.pipeline.Expression decimalPlace);
    method public com.google.firebase.firestore.pipeline.Expression roundToPrecision(String numericField, int decimalPlace);
    method public com.google.firebase.firestore.pipeline.Expression sqrt(com.google.firebase.firestore.pipeline.Expression numericExpr);
    method public com.google.firebase.firestore.pipeline.Expression sqrt(String numericField);
    method public com.google.firebase.firestore.pipeline.BooleanExpression startsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, com.google.firebase.firestore.pipeline.Expression prefix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression startsWith(com.google.firebase.firestore.pipeline.Expression stringExpr, String prefix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression startsWith(String fieldName, com.google.firebase.firestore.pipeline.Expression prefix);
    method public com.google.firebase.firestore.pipeline.BooleanExpression startsWith(String fieldName, String prefix);
    method public com.google.firebase.firestore.pipeline.Expression stringConcat(com.google.firebase.firestore.pipeline.Expression firstString, com.google.firebase.firestore.pipeline.Expression... otherStrings);
    method public com.google.firebase.firestore.pipeline.Expression stringConcat(com.google.firebase.firestore.pipeline.Expression firstString, java.lang.Object... otherStrings);
    method public com.google.firebase.firestore.pipeline.Expression stringConcat(String fieldName, com.google.firebase.firestore.pipeline.Expression... otherStrings);
    method public com.google.firebase.firestore.pipeline.Expression stringConcat(String fieldName, java.lang.Object... otherStrings);
    method public com.google.firebase.firestore.pipeline.BooleanExpression stringContains(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression substring);
    method public com.google.firebase.firestore.pipeline.BooleanExpression stringContains(com.google.firebase.firestore.pipeline.Expression stringExpression, String substring);
    method public com.google.firebase.firestore.pipeline.BooleanExpression stringContains(String fieldName, com.google.firebase.firestore.pipeline.Expression substring);
    method public com.google.firebase.firestore.pipeline.BooleanExpression stringContains(String fieldName, String substring);
    method public com.google.firebase.firestore.pipeline.Expression substring(com.google.firebase.firestore.pipeline.Expression stringExpression, com.google.firebase.firestore.pipeline.Expression index, com.google.firebase.firestore.pipeline.Expression length);
    method public com.google.firebase.firestore.pipeline.Expression substring(String fieldName, int index, int length);
    method public com.google.firebase.firestore.pipeline.Expression subtract(com.google.firebase.firestore.pipeline.Expression minuend, com.google.firebase.firestore.pipeline.Expression subtrahend);
    method public com.google.firebase.firestore.pipeline.Expression subtract(com.google.firebase.firestore.pipeline.Expression minuend, Number subtrahend);
    method public com.google.firebase.firestore.pipeline.Expression subtract(String numericFieldName, com.google.firebase.firestore.pipeline.Expression subtrahend);
    method public com.google.firebase.firestore.pipeline.Expression subtract(String numericFieldName, Number subtrahend);
    method public com.google.firebase.firestore.pipeline.Expression timestampAdd(com.google.firebase.firestore.pipeline.Expression timestamp, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampAdd(com.google.firebase.firestore.pipeline.Expression timestamp, String unit, long amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampAdd(String fieldName, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampAdd(String fieldName, String unit, long amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampSubtract(com.google.firebase.firestore.pipeline.Expression timestamp, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampSubtract(com.google.firebase.firestore.pipeline.Expression timestamp, String unit, long amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampSubtract(String fieldName, com.google.firebase.firestore.pipeline.Expression unit, com.google.firebase.firestore.pipeline.Expression amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampSubtract(String fieldName, String unit, long amount);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixMicros(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixMicros(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixMillis(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixMillis(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixSeconds(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression timestampToUnixSeconds(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression toLower(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public com.google.firebase.firestore.pipeline.Expression toLower(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression toUpper(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public com.google.firebase.firestore.pipeline.Expression toUpper(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression trim(com.google.firebase.firestore.pipeline.Expression stringExpression);
    method public com.google.firebase.firestore.pipeline.Expression trim(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression unixMicrosToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression unixMicrosToTimestamp(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression unixMillisToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression unixMillisToTimestamp(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression unixSecondsToTimestamp(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Expression unixSecondsToTimestamp(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression vector(com.google.firebase.firestore.VectorValue vector);
    method public com.google.firebase.firestore.pipeline.Expression vector(double[] vector);
    method public com.google.firebase.firestore.pipeline.Expression vectorLength(com.google.firebase.firestore.pipeline.Expression vectorExpression);
    method public com.google.firebase.firestore.pipeline.Expression vectorLength(String fieldName);
    method public com.google.firebase.firestore.pipeline.BooleanExpression xor(com.google.firebase.firestore.pipeline.BooleanExpression condition, com.google.firebase.firestore.pipeline.BooleanExpression... conditions);
  }

  public final class Field extends com.google.firebase.firestore.pipeline.Selectable {
    method public String canonicalId();
    field public static final com.google.firebase.firestore.pipeline.Field.Companion Companion;
  }

  public static final class Field.Companion {
  }

  public final class FindNearestOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.FindNearestOptions> {
    ctor public FindNearestOptions();
    method public com.google.firebase.firestore.pipeline.FindNearestOptions self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.FindNearestOptions withDistanceField(com.google.firebase.firestore.pipeline.Field distanceField);
    method public com.google.firebase.firestore.pipeline.FindNearestOptions? withDistanceField(String? distanceField);
    method public com.google.firebase.firestore.pipeline.FindNearestOptions withLimit(long limit);
  }

  public final class FindNearestStage extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.FindNearestStage> {
    field public static final com.google.firebase.firestore.pipeline.FindNearestStage.Companion Companion;
  }

  public static final class FindNearestStage.Companion {
  }

  public static final class FindNearestStage.DistanceMeasure {
    field public static final error.NonExistentClass COSINE;
    field public static final com.google.firebase.firestore.pipeline.FindNearestStage.DistanceMeasure.Companion Companion;
    field public static final error.NonExistentClass DOT_PRODUCT;
    field public static final error.NonExistentClass EUCLIDEAN;
  }

  public static final class FindNearestStage.DistanceMeasure.Companion {
  }

  public class FunctionExpression extends com.google.firebase.firestore.pipeline.Expression {
    method public String canonicalId();
  }

  public final class InternalOptions {
    field public static final com.google.firebase.firestore.pipeline.InternalOptions.Companion Companion;
    field public static final com.google.firebase.firestore.pipeline.InternalOptions EMPTY;
  }

  public static final class InternalOptions.Companion {
    method public com.google.firebase.firestore.pipeline.InternalOptions of(String key, error.NonExistentClass value);
  }

  public final class Ordering {
    method public static com.google.firebase.firestore.pipeline.Ordering ascending(com.google.firebase.firestore.pipeline.Expression expr);
    method public static com.google.firebase.firestore.pipeline.Ordering ascending(String fieldName);
    method public String canonicalId();
    method public static com.google.firebase.firestore.pipeline.Ordering descending(com.google.firebase.firestore.pipeline.Expression expr);
    method public static com.google.firebase.firestore.pipeline.Ordering descending(String fieldName);
    method public com.google.firebase.firestore.pipeline.Expression getExpr();
    method public com.google.firebase.firestore.pipeline.Ordering reverse();
    property public final com.google.firebase.firestore.pipeline.Expression expr;
    field public static final com.google.firebase.firestore.pipeline.Ordering.Companion Companion;
  }

  public static final class Ordering.Companion {
    method public com.google.firebase.firestore.pipeline.Ordering ascending(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Ordering ascending(String fieldName);
    method public com.google.firebase.firestore.pipeline.Ordering descending(com.google.firebase.firestore.pipeline.Expression expr);
    method public com.google.firebase.firestore.pipeline.Ordering descending(String fieldName);
  }

  public final class PipelineOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.PipelineOptions> {
    ctor public PipelineOptions();
    method public com.google.firebase.firestore.pipeline.PipelineOptions withIndexMode(com.google.firebase.firestore.pipeline.PipelineOptions.IndexMode indexMode);
  }

  public static final class PipelineOptions.IndexMode {
    field public static final com.google.firebase.firestore.pipeline.PipelineOptions.IndexMode.Companion Companion;
    field public static final com.google.firebase.firestore.pipeline.PipelineOptions.IndexMode RECOMMENDED;
  }

  public static final class PipelineOptions.IndexMode.Companion {
  }

  public final class RawOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.RawOptions> {
    field public static final com.google.firebase.firestore.pipeline.RawOptions.Companion Companion;
    field public static final com.google.firebase.firestore.pipeline.RawOptions DEFAULT;
  }

  public static final class RawOptions.Companion {
  }

  public final class RawStage extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.RawStage> {
    method public static com.google.firebase.firestore.pipeline.RawStage ofName(String name);
    method public com.google.firebase.firestore.pipeline.RawStage withArguments(java.lang.Object... arguments);
    field public static final com.google.firebase.firestore.pipeline.RawStage.Companion Companion;
  }

  public static final class RawStage.Companion {
    method public com.google.firebase.firestore.pipeline.RawStage ofName(String name);
  }

  public final class RealtimePipelineOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.RealtimePipelineOptions> {
  }

  public final class SampleStage extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.SampleStage> {
    method public static com.google.firebase.firestore.pipeline.SampleStage withDocLimit(int documents);
    method public static com.google.firebase.firestore.pipeline.SampleStage withPercentage(double percentage);
    field public static final com.google.firebase.firestore.pipeline.SampleStage.Companion Companion;
  }

  public static final class SampleStage.Companion {
    method public com.google.firebase.firestore.pipeline.SampleStage withDocLimit(int documents);
    method public com.google.firebase.firestore.pipeline.SampleStage withPercentage(double percentage);
  }

  public static final class SampleStage.Mode {
    field public static final com.google.firebase.firestore.pipeline.SampleStage.Mode.Companion Companion;
  }

  public static final class SampleStage.Mode.Companion {
    method public error.NonExistentClass getDOCUMENTS();
    method public error.NonExistentClass getPERCENT();
    property public final error.NonExistentClass DOCUMENTS;
    property public final error.NonExistentClass PERCENT;
  }

  public abstract class Selectable extends com.google.firebase.firestore.pipeline.Expression {
    ctor public Selectable();
  }

  public abstract sealed class Stage<T extends com.google.firebase.firestore.pipeline.Stage<T>> {
    method public final T withOption(String key, boolean value);
    method public final T withOption(String key, com.google.firebase.firestore.pipeline.Field value);
    method public final T withOption(String key, double value);
    method protected final T withOption(String key, error.NonExistentClass value);
    method public final T withOption(String key, String value);
    method public final T withOption(String key, long value);
  }

  public final class UnnestOptions extends com.google.firebase.firestore.pipeline.AbstractOptions<com.google.firebase.firestore.pipeline.UnnestOptions> {
    ctor public UnnestOptions();
    method public com.google.firebase.firestore.pipeline.UnnestOptions self(com.google.firebase.firestore.pipeline.InternalOptions options);
    method public com.google.firebase.firestore.pipeline.UnnestOptions withIndexField(String indexField);
  }

  public final class UnnestStage extends com.google.firebase.firestore.pipeline.Stage<com.google.firebase.firestore.pipeline.UnnestStage> {
    method public static com.google.firebase.firestore.pipeline.UnnestStage withField(com.google.firebase.firestore.pipeline.Selectable arrayWithAlias);
    method public static com.google.firebase.firestore.pipeline.UnnestStage withField(String arrayField, String alias);
    method public com.google.firebase.firestore.pipeline.UnnestStage withIndexField(String indexField);
    field public static final com.google.firebase.firestore.pipeline.UnnestStage.Companion Companion;
  }

  public static final class UnnestStage.Companion {
    method public com.google.firebase.firestore.pipeline.UnnestStage withField(com.google.firebase.firestore.pipeline.Selectable arrayWithAlias);
    method public com.google.firebase.firestore.pipeline.UnnestStage withField(String arrayField, String alias);
  }

}

