// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import com.google.firebase.gradle.plugins.FirebaseLibraryExtension
import com.google.firebase.gradle.plugins.measurement.coverage.GenerateMeasurementsTask
import com.google.firebase.gradle.plugins.measurement.UploadMeasurementsTask


task generateCoverageMeasurements(type: GenerateMeasurementsTask) {
    description 'Runs checkCoverage task in all projects and calculates coverage percents.'
    group 'Measurements'

    reportFile = file("$buildDir/coverage-report.json")
}

task uploadCoverageMeasurements(type: UploadMeasurementsTask) {
    description 'Uploads coverage measurements to a database via the uploader tool.'
    group 'Measurements'

    dependsOn generateCoverageMeasurements
    reportFiles = files("$buildDir/coverage-report.json")
    uploader = "https://storage.googleapis.com/firebase-engprod-metrics/upload_tool.jar"
}

/* Creates a combined jacoco coverage reports of all products. */
def jacocoReportTasks = rootProject.subprojects.tasks*.getAt("checkCoverage")
task createCombinedReport(type: JacocoReport) {
    mustRunAfter jacocoReportTasks
    classDirectories = files(jacocoReportTasks.classDirectories)
    sourceDirectories = files(jacocoReportTasks.sourceDirectories)
    executionData files(jacocoReportTasks.executionData)
    reports {
        xml {
            enabled true
            destination file("${jacoco.reportsDir}/jacocoCombinedReport.xml")
        }
    }
}

/* https://github.com/kubernetes/test-infra/blob/master/prow/jobs.md#job-environment-variables */
def job = System.getenv("PROW_JOB_ID")
def build = System.getenv("BUILD_ID")
def branch = System.getenv("PULL_BASE_REF")
def base = System.getenv("PULL_BASE_SHA")
def head = System.getenv("PULL_PULL_SHA")
def pr = System.getenv("PULL_NUMBER")

def commit = head ?: base

/* Uploads coverage reports to codecov.io. */
task codecov(type: Exec) {
    dependsOn createCombinedReport

    environment "VCS_COMMIT_ID", "$commit"
    environment "VCS_BRANCH_NAME", "$branch"
    environment "VCS_PULL_REQUEST", "$pr"
    environment "VCS_SLUG", "firebase/firebase-android-sdk"
    environment "VCS_TAG", ""
    environment "CI_BUILD_URL", ""
    environment "CI_BUILD_ID", "$build"
    environment "CI_JOB_ID", "$job"

    commandLine 'bash', '/opt/codecov/uploader.sh'
}

// TODO(yifany@): Uploads coverage reports to coveralls.
// https://github.com/kt3k/coveralls-gradle-plugin
// https://docs.coveralls.io/supported-ci-services
