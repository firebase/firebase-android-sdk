// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id 'firebase-library'
    id("kotlin-android")
    id 'firebase-vendor'
    id 'com.google.protobuf'
    id("copy-google-services")
}

firebaseLibrary {
    libraryGroup = "ml-modeldownloader"
    testLab.enabled = true
    publishJavadoc = true
    releaseNotes {
        name.set("{{firebase_ml}}")
        versionName.set("firebaseml-modeldownloader")
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = libs.protoc.get().toString()
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

android {
    namespace "com.google.firebase.ml.modeldownloader"
    compileSdkVersion project.compileSdkVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        multiDexEnabled true
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions { jvmTarget = "1.8" }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
        }
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
}

thirdPartyLicenses {
    add 'Dagger', "${rootDir}/third_party/licenses/apache-2.0.txt"
}

dependencies {
    javadocClasspath libs.findbugs.jsr305

    vendor (libs.dagger.dagger) {
         exclude group: "javax.inject", module: "javax.inject"
     }

    api libs.playservices.tasks
    api 'com.google.firebase:firebase-annotations:16.2.0'
    api("com.google.firebase:firebase-common:21.0.0")
    api("com.google.firebase:firebase-common-ktx:21.0.0")
    api("com.google.firebase:firebase-components:18.0.0")
    api('com.google.firebase:firebase-datatransport:18.2.0'){
         exclude group: 'com.google.firebase', module: 'firebase-common'
         exclude group: 'com.google.firebase', module: 'firebase-components'
     }
    api 'com.google.firebase:firebase-encoders:17.0.0'
    api 'com.google.firebase:firebase-encoders-json:18.0.0'
    api("com.google.firebase:firebase-installations:17.2.0")
    api 'com.google.firebase:firebase-installations-interop:17.1.0'

    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.datatransport:transport-api:3.0.0'
    implementation 'com.google.android.datatransport:transport-runtime:3.1.8'
    implementation 'com.google.auto.service:auto-service-annotations:1.0.1'
    implementation libs.javax.inject
    implementation libs.kotlin.stdlib

    compileOnly libs.autovalue.annotations

    annotationProcessor project(":encoders:firebase-encoders-processor")
    annotationProcessor libs.autovalue
    annotationProcessor libs.dagger.compiler

    testImplementation(project(":integ-testing")) {
        exclude group: 'com.google.firebase', module: 'firebase-common'
        exclude group: 'com.google.firebase', module: 'firebase-components'
    }
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.junit
    testImplementation libs.wiremock.standalone
    testImplementation libs.protobuf.java.util
    testImplementation libs.truth
    testImplementation libs.truth.proto.extension
    testImplementation libs.junit
    testImplementation libs.httpclient.android
    testImplementation libs.mockito.core
    testImplementation libs.robolectric

    androidTestImplementation libs.androidx.annotation
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.truth
    androidTestImplementation libs.junit
}
