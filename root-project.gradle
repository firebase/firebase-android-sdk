// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import com.google.firebase.gradle.plugins.license.LicenseResolverPlugin

buildscript {
    ext.kotlinVersion = '1.3.20'
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.6'
        classpath 'org.jsoup:jsoup:1.11.2'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
        classpath 'com.google.gms:google-services:4.1.0'
        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
        classpath 'digital.wup:android-maven-publish:3.6.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:7.1.0'
    }
}

apply from: 'sdkProperties.gradle'

ext {
    playServicesVersion = '16.0.1'
    supportAnnotationsVersion = '28.0.0'
    errorproneVersion = '2.3.2'
    errorproneJavacVersion = '9+181-r4173-1'
    googleTruthVersion = '0.40'
    robolectricVersion = '4.1'
}

apply plugin: com.google.firebase.gradle.plugins.publish.PublishingPlugin
apply plugin: com.google.firebase.gradle.plugins.ci.ContinuousIntegrationPlugin
apply plugin: com.google.firebase.gradle.plugins.ci.metrics.MetricsPlugin

firebaseContinuousIntegration {
    ignorePaths = [
            /.*\.gitignore$/,
            /.*.md$/,
    ]
}

configure(subprojects) {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    apply plugin: 'net.ltgt.errorprone'
    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$errorproneVersion"
        errorproneJavac "com.google.errorprone:javac:$errorproneJavacVersion"

    }
    apply plugin: 'com.github.sherter.google-java-format'
    googleJavaFormat {
        toolVersion = '1.6'
    }
    tasks.googleJavaFormat {
        source '.'
        include '**/*.java'
        exclude '**/generated/**'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/Assert.java'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/ThrowingRunnable.java'
        exclude '**/package-info.java'
    }
    tasks.verifyGoogleJavaFormat {
        source '.'
        include '**/*.java'
        exclude '**/generated/**'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/Assert.java'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/ThrowingRunnable.java'
        exclude '**/package-info.java'
    }
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.3'
    }
    task(['type': JacocoReport, 'dependsOn': 'check', 'group': 'Coverage',
          'description': 'Generates JaCoCo unit test coverage reports.'], checkCoverage) {
        def excludes = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**Manifest*.*']
        classDirectories = files([
            fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: excludes),
            fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: excludes)
        ])
        sourceDirectories = files(['src/main/java', 'src/main/kotlin'])
        executionData = fileTree(dir: "$buildDir", includes: ['jacoco/*.exec'])
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled true
        }
    }
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }

    tasks.withType(JavaCompile) {
        options.errorprone.excludedPaths = '.*/build/generated/.*'
    }

    apply plugin: "org.jlleitschuh.gradle.ktlint"

    // Adds firebase custom errorprone checks to the annotation processor classpath.
    configurations.whenObjectAdded {
        if (it.name == 'annotationProcessor' && project != project(':tools:errorprone')) {
            dependencies {
                annotationProcessor project(':tools:errorprone')
            }
        } else if (it.name == 'lintChecks' && project != project(':tools:lint')) {
            dependencies {
                lintChecks project(':tools:lint')
            }
        }
    }
}

/**
 * Disable "debug" build type for all subprojects.
 *
 * They are identical to "release" and are not used in either release or smoke tests. Disabling them
 * to reduce the number of tests we run on pre/post-submit.
 */
configure(subprojects) {
    afterEvaluate { Project sub ->
        if (!sub.plugins.hasPlugin('com.android.library') && !sub.plugins.hasPlugin('com.android.application')) {
            return
        }

        sub.android {
            testBuildType "release"
            variantFilter { variant ->
                def buildTypeName = variant.buildType*.name
                if (buildTypeName.contains('debug')) {
                    setIgnore(true)
                }
            }
            buildTypes {
                // In the case of and android library signing config only affects instrumentation test APK.
                // We need it signed with default debug credentials in order for FTL to accept the APK.
                release.signingConfig = debug.signingConfig
            }
        }
    }
}

/**
 * Configure "Preguarding" and Desugaring for the subprojects.
 *
 * <p>Desugaring is enabled with the 'me.tatarka:gradle-retrolambda' plugin as the built-in Android
 * desugaring is not supported for libraries.
 *
 * <p> The way it works is every library subproject that has the android plugin applied and:
 *
 *  <ul>
 *    <li>Contains a file named "preguard.txt" will get proguarded using that file as proguard
 *        configuration in release mode.
 *    <li>Contains a file named "proguard.txt" will ship this file inside its release aar as a
 *        consumer proguard file.
 */
configure(subprojects) {
    def PREGUARD_FILE_NAME = 'preguard.txt'
    def CONSUMER_PROGUARD_FILE_NAME = 'proguard.txt'
    afterEvaluate { Project sub ->

        if (sub.plugins.findPlugin('com.android.library') == null) {
            return
        }

        // Apply the retrolambda plugin
        sub.apply plugin: 'me.tatarka.retrolambda'

        boolean skipPreguard = sub.getProperties().getOrDefault('firebaseSkipPreguard', 'true').toBoolean()
        def defaultPreguard = rootProject.getProperties().getOrDefault('firebaseDefaultPreguardFile', 'default-preguard.txt')

        if(!skipPreguard) {

            sub.android {
                buildTypes {
                    release {
                        // default behavior for minifyEnabled is:
                        // useProguard true
                        // shrinkResources false
                        minifyEnabled true
                        proguardFiles file(defaultPreguard), sub.file(PREGUARD_FILE_NAME)
                    }
                }
            }
        }

        // Ship consumer proguard config if it exists.
        if (sub.file(CONSUMER_PROGUARD_FILE_NAME).exists()) {
            sub.android { buildTypes { release { consumerProguardFiles 'proguard.txt' } } }
        }

        sub.apply plugin: LicenseResolverPlugin
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}
