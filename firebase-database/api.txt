// Signature format: 3.0
package com.google.firebase.database {

  public abstract sealed class ChildEvent {
  }

  public static final class ChildEvent.Added extends com.google.firebase.database.ChildEvent {
    ctor public ChildEvent.Added(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public com.google.firebase.database.DataSnapshot component1();
    method public String? component2();
    method public com.google.firebase.database.ChildEvent.Added copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public String? getPreviousChildName();
    method public com.google.firebase.database.DataSnapshot getSnapshot();
    property public final String? previousChildName;
    property public final com.google.firebase.database.DataSnapshot snapshot;
  }

  public static final class ChildEvent.Changed extends com.google.firebase.database.ChildEvent {
    ctor public ChildEvent.Changed(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public com.google.firebase.database.DataSnapshot component1();
    method public String? component2();
    method public com.google.firebase.database.ChildEvent.Changed copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public String? getPreviousChildName();
    method public com.google.firebase.database.DataSnapshot getSnapshot();
    property public final String? previousChildName;
    property public final com.google.firebase.database.DataSnapshot snapshot;
  }

  public static final class ChildEvent.Moved extends com.google.firebase.database.ChildEvent {
    ctor public ChildEvent.Moved(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public com.google.firebase.database.DataSnapshot component1();
    method public String? component2();
    method public com.google.firebase.database.ChildEvent.Moved copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method public String? getPreviousChildName();
    method public com.google.firebase.database.DataSnapshot getSnapshot();
    property public final String? previousChildName;
    property public final com.google.firebase.database.DataSnapshot snapshot;
  }

  public static final class ChildEvent.Removed extends com.google.firebase.database.ChildEvent {
    ctor public ChildEvent.Removed(com.google.firebase.database.DataSnapshot snapshot);
    method public com.google.firebase.database.DataSnapshot component1();
    method public com.google.firebase.database.ChildEvent.Removed copy(com.google.firebase.database.DataSnapshot snapshot);
    method public com.google.firebase.database.DataSnapshot getSnapshot();
    property public final com.google.firebase.database.DataSnapshot snapshot;
  }

  public interface ChildEventListener {
    method public void onCancelled(com.google.firebase.database.DatabaseError);
    method public void onChildAdded(com.google.firebase.database.DataSnapshot, String?);
    method public void onChildChanged(com.google.firebase.database.DataSnapshot, String?);
    method public void onChildMoved(com.google.firebase.database.DataSnapshot, String?);
    method public void onChildRemoved(com.google.firebase.database.DataSnapshot);
  }

  public class DataSnapshot {
    method public com.google.firebase.database.DataSnapshot child(String);
    method public boolean exists();
    method public Iterable<com.google.firebase.database.DataSnapshot!> getChildren();
    method public long getChildrenCount();
    method public String? getKey();
    method public Object? getPriority();
    method public com.google.firebase.database.DatabaseReference getRef();
    method public Object? getValue();
    method public Object? getValue(boolean);
    method public <T> T? getValue(com.google.firebase.database.GenericTypeIndicator<T!>);
    method public <T> T? getValue(Class<T!>);
    method public boolean hasChild(String);
    method public boolean hasChildren();
  }

  public class DatabaseError {
    method public static com.google.firebase.database.DatabaseError fromException(Throwable);
    method public int getCode();
    method public String getDetails();
    method public String getMessage();
    method public com.google.firebase.database.DatabaseException toException();
    field public static final int DATA_STALE = -1; // 0xffffffff
    field public static final int DISCONNECTED = -4; // 0xfffffffc
    field public static final int EXPIRED_TOKEN = -6; // 0xfffffffa
    field public static final int INVALID_TOKEN = -7; // 0xfffffff9
    field public static final int MAX_RETRIES = -8; // 0xfffffff8
    field public static final int NETWORK_ERROR = -24; // 0xffffffe8
    field public static final int OPERATION_FAILED = -2; // 0xfffffffe
    field public static final int OVERRIDDEN_BY_SET = -9; // 0xfffffff7
    field public static final int PERMISSION_DENIED = -3; // 0xfffffffd
    field public static final int UNAVAILABLE = -10; // 0xfffffff6
    field public static final int UNKNOWN_ERROR = -999; // 0xfffffc19
    field public static final int USER_CODE_EXCEPTION = -11; // 0xfffffff5
    field public static final int WRITE_CANCELED = -25; // 0xffffffe7
  }

  public class DatabaseException extends java.lang.RuntimeException {
  }

  public final class DatabaseKt {
    method public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app);
    method public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.Firebase, com.google.firebase.FirebaseApp app, String url);
    method public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.Firebase, String url);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.database.ChildEvent> getChildEvents(com.google.firebase.database.Query);
    method public static com.google.firebase.database.FirebaseDatabase getDatabase(com.google.firebase.Firebase);
    method public static kotlinx.coroutines.flow.Flow<com.google.firebase.database.DataSnapshot> getSnapshots(com.google.firebase.database.Query);
    method public static inline <reified T> T? getValue(com.google.firebase.database.DataSnapshot);
    method public static inline <reified T> T? getValue(com.google.firebase.database.MutableData);
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> values(com.google.firebase.database.Query);
  }

  public class DatabaseReference extends com.google.firebase.database.Query {
    method public com.google.firebase.database.DatabaseReference child(String);
    method public com.google.firebase.database.FirebaseDatabase getDatabase();
    method public String? getKey();
    method public com.google.firebase.database.DatabaseReference? getParent();
    method public com.google.firebase.database.DatabaseReference getRoot();
    method public static void goOffline();
    method public static void goOnline();
    method public com.google.firebase.database.OnDisconnect onDisconnect();
    method public com.google.firebase.database.DatabaseReference push();
    method public com.google.android.gms.tasks.Task<java.lang.Void!> removeValue();
    method public void removeValue(com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public void runTransaction(com.google.firebase.database.Transaction.Handler);
    method public void runTransaction(com.google.firebase.database.Transaction.Handler, boolean);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setPriority(Object?);
    method public void setPriority(Object?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setValue(Object?);
    method public void setValue(Object?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setValue(Object?, Object?);
    method public void setValue(Object?, Object?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> updateChildren(java.util.Map<java.lang.String!,java.lang.Object!>);
    method public void updateChildren(java.util.Map<java.lang.String!,java.lang.Object!>, com.google.firebase.database.DatabaseReference.CompletionListener?);
  }

  public static interface DatabaseReference.CompletionListener {
    method public void onComplete(com.google.firebase.database.DatabaseError?, com.google.firebase.database.DatabaseReference);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Exclude {
  }

  public class FirebaseDatabase {
    method public com.google.firebase.FirebaseApp getApp();
    method public static com.google.firebase.database.FirebaseDatabase getInstance();
    method public static com.google.firebase.database.FirebaseDatabase getInstance(com.google.firebase.FirebaseApp);
    method public static com.google.firebase.database.FirebaseDatabase getInstance(com.google.firebase.FirebaseApp, String);
    method public static com.google.firebase.database.FirebaseDatabase getInstance(String);
    method public com.google.firebase.database.DatabaseReference getReference();
    method public com.google.firebase.database.DatabaseReference getReference(String);
    method public com.google.firebase.database.DatabaseReference getReferenceFromUrl(String);
    method public static String getSdkVersion();
    method public void goOffline();
    method public void goOnline();
    method public void purgeOutstandingWrites();
    method public void setLogLevel(com.google.firebase.database.Logger.Level);
    method public void setPersistenceCacheSizeBytes(long);
    method public void setPersistenceEnabled(boolean);
    method public void useEmulator(String, int);
  }

  public abstract class GenericTypeIndicator<T> {
    ctor public GenericTypeIndicator();
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface IgnoreExtraProperties {
  }

  public interface Logger {
  }

  public enum Logger.Level {
    enum_constant public static final com.google.firebase.database.Logger.Level DEBUG;
    enum_constant public static final com.google.firebase.database.Logger.Level ERROR;
    enum_constant public static final com.google.firebase.database.Logger.Level INFO;
    enum_constant public static final com.google.firebase.database.Logger.Level NONE;
    enum_constant public static final com.google.firebase.database.Logger.Level WARN;
  }

  public class MutableData {
    method public com.google.firebase.database.MutableData child(String);
    method public Iterable<com.google.firebase.database.MutableData!> getChildren();
    method public long getChildrenCount();
    method public String? getKey();
    method public Object? getPriority();
    method public Object? getValue();
    method public <T> T? getValue(com.google.firebase.database.GenericTypeIndicator<T!>);
    method public <T> T? getValue(Class<T!>);
    method public boolean hasChild(String);
    method public boolean hasChildren();
    method public void setPriority(Object?);
    method public void setValue(Object?) throws com.google.firebase.database.DatabaseException;
  }

  public class OnDisconnect {
    method public com.google.android.gms.tasks.Task<java.lang.Void!> cancel();
    method public void cancel(com.google.firebase.database.DatabaseReference.CompletionListener);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> removeValue();
    method public void removeValue(com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setValue(Object?);
    method public void setValue(Object?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setValue(Object?, double);
    method public void setValue(Object?, double, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> setValue(Object?, String?);
    method public void setValue(Object?, String?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public void setValue(Object?, java.util.Map?, com.google.firebase.database.DatabaseReference.CompletionListener?);
    method public com.google.android.gms.tasks.Task<java.lang.Void!> updateChildren(java.util.Map<java.lang.String!,java.lang.Object!>);
    method public void updateChildren(java.util.Map<java.lang.String!,java.lang.Object!>, com.google.firebase.database.DatabaseReference.CompletionListener?);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface PropertyName {
    method public abstract String value();
  }

  public class Query {
    method public com.google.firebase.database.ChildEventListener addChildEventListener(com.google.firebase.database.ChildEventListener);
    method public void addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener);
    method public com.google.firebase.database.ValueEventListener addValueEventListener(com.google.firebase.database.ValueEventListener);
    method public com.google.firebase.database.Query endAt(boolean);
    method public com.google.firebase.database.Query endAt(boolean, String?);
    method public com.google.firebase.database.Query endAt(double);
    method public com.google.firebase.database.Query endAt(double, String?);
    method public com.google.firebase.database.Query endAt(String?);
    method public com.google.firebase.database.Query endAt(String?, String?);
    method public com.google.firebase.database.Query endBefore(boolean);
    method public com.google.firebase.database.Query endBefore(boolean, String?);
    method public com.google.firebase.database.Query endBefore(double);
    method public com.google.firebase.database.Query endBefore(double, String?);
    method public com.google.firebase.database.Query endBefore(String?);
    method public com.google.firebase.database.Query endBefore(String?, String?);
    method public com.google.firebase.database.Query equalTo(boolean);
    method public com.google.firebase.database.Query equalTo(boolean, String?);
    method public com.google.firebase.database.Query equalTo(double);
    method public com.google.firebase.database.Query equalTo(double, String?);
    method public com.google.firebase.database.Query equalTo(String?);
    method public com.google.firebase.database.Query equalTo(String?, String?);
    method public com.google.android.gms.tasks.Task<com.google.firebase.database.DataSnapshot!> get();
    method public com.google.firebase.database.DatabaseReference getRef();
    method public void keepSynced(boolean);
    method public com.google.firebase.database.Query limitToFirst(int);
    method public com.google.firebase.database.Query limitToLast(int);
    method public com.google.firebase.database.Query orderByChild(String);
    method public com.google.firebase.database.Query orderByKey();
    method public com.google.firebase.database.Query orderByPriority();
    method public com.google.firebase.database.Query orderByValue();
    method public void removeEventListener(com.google.firebase.database.ChildEventListener);
    method public void removeEventListener(com.google.firebase.database.ValueEventListener);
    method public com.google.firebase.database.Query startAfter(boolean);
    method public com.google.firebase.database.Query startAfter(boolean, String?);
    method public com.google.firebase.database.Query startAfter(double);
    method public com.google.firebase.database.Query startAfter(double, String?);
    method public com.google.firebase.database.Query startAfter(String?);
    method public com.google.firebase.database.Query startAfter(String?, String?);
    method public com.google.firebase.database.Query startAt(boolean);
    method public com.google.firebase.database.Query startAt(boolean, String?);
    method public com.google.firebase.database.Query startAt(double);
    method public com.google.firebase.database.Query startAt(double, String?);
    method public com.google.firebase.database.Query startAt(String?);
    method public com.google.firebase.database.Query startAt(String?, String?);
  }

  public class ServerValue {
    ctor public ServerValue();
    method public static final Object increment(double);
    method public static final Object increment(long);
    field public static final java.util.Map<java.lang.String!,java.lang.String!> TIMESTAMP;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) public @interface ThrowOnExtraProperties {
  }

  public class Transaction {
    ctor public Transaction();
    method public static com.google.firebase.database.Transaction.Result abort();
    method public static com.google.firebase.database.Transaction.Result success(com.google.firebase.database.MutableData);
  }

  public static interface Transaction.Handler {
    method public com.google.firebase.database.Transaction.Result doTransaction(com.google.firebase.database.MutableData);
    method public void onComplete(com.google.firebase.database.DatabaseError?, boolean, com.google.firebase.database.DataSnapshot?);
  }

  public static class Transaction.Result {
    method public boolean isSuccess();
  }

  public interface ValueEventListener {
    method public void onCancelled(com.google.firebase.database.DatabaseError);
    method public void onDataChange(com.google.firebase.database.DataSnapshot);
  }

}

package com.google.firebase.database.ktx {

  @Deprecated public abstract sealed class ChildEvent {
  }

  @Deprecated public static final class ChildEvent.Added extends com.google.firebase.database.ktx.ChildEvent {
    ctor @Deprecated public ChildEvent.Added(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public com.google.firebase.database.DataSnapshot component1();
    method @Deprecated public String? component2();
    method @Deprecated public com.google.firebase.database.ktx.ChildEvent.Added copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public String? getPreviousChildName();
    method @Deprecated public com.google.firebase.database.DataSnapshot getSnapshot();
    property @Deprecated public final String? previousChildName;
    property @Deprecated public final com.google.firebase.database.DataSnapshot snapshot;
  }

  @Deprecated public static final class ChildEvent.Changed extends com.google.firebase.database.ktx.ChildEvent {
    ctor @Deprecated public ChildEvent.Changed(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public com.google.firebase.database.DataSnapshot component1();
    method @Deprecated public String? component2();
    method @Deprecated public com.google.firebase.database.ktx.ChildEvent.Changed copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public String? getPreviousChildName();
    method @Deprecated public com.google.firebase.database.DataSnapshot getSnapshot();
    property @Deprecated public final String? previousChildName;
    property @Deprecated public final com.google.firebase.database.DataSnapshot snapshot;
  }

  @Deprecated public static final class ChildEvent.Moved extends com.google.firebase.database.ktx.ChildEvent {
    ctor @Deprecated public ChildEvent.Moved(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public com.google.firebase.database.DataSnapshot component1();
    method @Deprecated public String? component2();
    method @Deprecated public com.google.firebase.database.ktx.ChildEvent.Moved copy(com.google.firebase.database.DataSnapshot snapshot, String? previousChildName);
    method @Deprecated public String? getPreviousChildName();
    method @Deprecated public com.google.firebase.database.DataSnapshot getSnapshot();
    property @Deprecated public final String? previousChildName;
    property @Deprecated public final com.google.firebase.database.DataSnapshot snapshot;
  }

  @Deprecated public static final class ChildEvent.Removed extends com.google.firebase.database.ktx.ChildEvent {
    ctor @Deprecated public ChildEvent.Removed(com.google.firebase.database.DataSnapshot snapshot);
    method @Deprecated public com.google.firebase.database.DataSnapshot component1();
    method @Deprecated public com.google.firebase.database.ktx.ChildEvent.Removed copy(com.google.firebase.database.DataSnapshot snapshot);
    method @Deprecated public com.google.firebase.database.DataSnapshot getSnapshot();
    property @Deprecated public final com.google.firebase.database.DataSnapshot snapshot;
  }

  public final class DatabaseKt {
    method @Deprecated public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app);
    method @Deprecated public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.ktx.Firebase, com.google.firebase.FirebaseApp app, String url);
    method @Deprecated public static com.google.firebase.database.FirebaseDatabase database(com.google.firebase.ktx.Firebase, String url);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.database.ktx.ChildEvent> getChildEvents(com.google.firebase.database.Query);
    method @Deprecated public static com.google.firebase.database.FirebaseDatabase getDatabase(com.google.firebase.ktx.Firebase);
    method @Deprecated public static kotlinx.coroutines.flow.Flow<com.google.firebase.database.DataSnapshot> getSnapshots(com.google.firebase.database.Query);
    method @Deprecated public static inline <reified T> T? getValue(com.google.firebase.database.DataSnapshot);
    method @Deprecated public static inline <reified T> T? getValue(com.google.firebase.database.MutableData);
    method @Deprecated public static inline <reified T> kotlinx.coroutines.flow.Flow<T?> values(com.google.firebase.database.Query);
  }

}

