// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import com.google.firebase.gradle.plugins.license.LicenseResolverPlugin

buildscript {
    ext.kotlinVersion = '1.3.72'
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://storage.googleapis.com/android-ci/mvn/'
        }
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:1.3.0'
        classpath 'org.jsoup:jsoup:1.13.1'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'me.tatarka:gradle-retrolambda:3.7.1'
        classpath 'digital.wup:android-maven-publish:3.6.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:9.2.1'
    }
}

apply from: 'sdkProperties.gradle'
apply from: "gradle/errorProne.gradle"

ext {
    playServicesVersion = '16.0.1'
    supportAnnotationsVersion = '28.0.0'
    googleTruthVersion = '0.45'
    grpcVersion = '1.28.0'
    robolectricVersion = '4.3.1'
    protocVersion = '3.11.0'
    javaliteVersion = '3.11.0'
}

apply plugin: com.google.firebase.gradle.plugins.publish.PublishingPlugin
apply plugin: com.google.firebase.gradle.plugins.ci.ContinuousIntegrationPlugin
apply plugin: com.google.firebase.gradle.plugins.ci.SmokeTestsPlugin
apply plugin: com.google.firebase.gradle.plugins.ci.metrics.MetricsPlugin

firebaseContinuousIntegration {
    ignorePaths = [
            /.*\.gitignore$/,
            /.*.md$/,
    ]
}

if(JavaVersion.current() != JavaVersion.VERSION_11){
    throw new GradleException("This build must be run with java 11. You're using ${JavaVersion.current()}.")
}

configure(subprojects) {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven {
            url 'https://storage.googleapis.com/android-ci/mvn/'
        }
    }

    apply plugin: 'com.github.sherter.google-java-format'
    googleJavaFormat {
        toolVersion = '1.7'
    }
    tasks.googleJavaFormat {
        source '.'
        include '**/java/**/*.java'
        exclude '**/generated/**'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/Assert.java'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/ThrowingRunnable.java'
        exclude '**/package-info.java'
    }
    tasks.verifyGoogleJavaFormat {
        source '.'
        include '**/java/**/*.java'
        exclude '**/generated/**'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/Assert.java'
        exclude 'src/testUtil/java/com/google/firebase/firestore/testutil/ThrowingRunnable.java'
        exclude '**/package-info.java'
    }

    apply plugin: "org.jlleitschuh.gradle.ktlint"
}


/**
 * Configure "Preguarding" and Desugaring for the subprojects.
 *
 * <p>Desugaring is enabled with the 'me.tatarka:gradle-retrolambda' plugin as the built-in Android
 * desugaring is not supported for libraries.
 *
 * <p> The way it works is every library subproject that has the android plugin applied and:
 *
 *  <ul>
 *    <li>Contains a file named "preguard.txt" will get proguarded using that file as proguard
 *        configuration in release mode.
 *    <li>Contains a file named "proguard.txt" will ship this file inside its release aar as a
 *        consumer proguard file.
 */
configure(subprojects) {
    def PREGUARD_FILE_NAME = 'preguard.txt'
    def CONSUMER_PROGUARD_FILE_NAME = 'proguard.txt'
    afterEvaluate { Project sub ->

        if (sub.plugins.findPlugin('com.android.library') == null) {
            return
        }

        // Apply the retrolambda plugin
        sub.apply plugin: 'me.tatarka.retrolambda'

        boolean skipPreguard = sub.getProperties().getOrDefault('firebaseSkipPreguard', 'true').toBoolean()
        def defaultPreguard = rootProject.getProperties().getOrDefault('firebaseDefaultPreguardFile', 'default-preguard.txt')

        if(!skipPreguard) {

            sub.android {
                buildTypes {
                    release {
                        // default behavior for minifyEnabled is:
                        // useProguard true
                        // shrinkResources false
                        minifyEnabled true
                        proguardFiles file(defaultPreguard), sub.file(PREGUARD_FILE_NAME)
                    }
                }
            }
        }

        // Ship consumer proguard config if it exists.
        if (sub.file(CONSUMER_PROGUARD_FILE_NAME).exists()) {
            sub.android { buildTypes { release { consumerProguardFiles 'proguard.txt' } } }
        }

        sub.apply plugin: LicenseResolverPlugin
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}
