/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.firebase.vertexai.type

import java.util.Calendar

/**
 * A `Candidate` represents a single response generated by the model for a given request.
 *
 * @property content The actual content generated by the model.
 * @property safetyRatings A list of [SafetyRating]s describing the generated content.
 * @property citationMetadata Metadata about the sources used to generate this content.
 * @property finishReason The reason the model stopped generating content, if it exist.
 */
public class Candidate
internal constructor(
  public val content: Content,
  public val safetyRatings: List<SafetyRating>,
  public val citationMetadata: CitationMetadata?,
  public val finishReason: FinishReason?
)

/**
 * An assessment of the potential harm of some generated content.
 *
 * The rating will be restricted to a particular [category].
 *
 * @property category The category of harm being assessed (e.g., Hate speech).
 * @property probability The likelihood of the content causing harm.
 * @property probabilityScore A numerical score representing the probability of harm, between 0 and
 * 1.
 * @property blocked Indicates whether the content was blocked due to safety concerns.
 * @property severity The severity of the potential harm.
 * @property severityScore A numerical score representing the severity of harm.
 */
public class SafetyRating
internal constructor(
  public val category: HarmCategory,
  public val probability: HarmProbability,
  public val probabilityScore: Float = 0f,
  public val blocked: Boolean? = null,
  public val severity: HarmSeverity? = null,
  public val severityScore: Float? = null
)

/**
 * A collection of source attributions for a piece of content.
 *
 * @property citations A list of individual cited sources and the parts of the content to which they
 * apply.
 */
public class CitationMetadata internal constructor(public val citations: List<Citation>)

/**
 * Represents a citation of content from an external source within the model's output.
 *
 * When the language model generates text that includes content from another source, it should
 * provide a citation to properly attribute the original source. This class encapsulates the
 * metadata associated with that citation.
 *
 * @property title The title of the cited source, if available.
 * @property startIndex The (inclusive) starting index within the model output where the cited
 * content begins.
 * @property endIndex The (exclusive) ending index within the model output where the cited content
 * ends.
 * @property uri The URI of the cited source, if available.
 * @property license The license under which the cited content is distributed under, if available.
 * @property publicationDate The date of publication of the cited source, if available.
 */
public class Citation
internal constructor(
  public val title: String? = null,
  public val startIndex: Int = 0,
  public val endIndex: Int,
  public val uri: String? = null,
  public val license: String? = null,
  public val publicationDate: Calendar? = null
)

/**
 * Represents the reason why the model stopped generating content.
 *
 * @property name The name of the finish reason.
 * @property ordinal The ordinal value of the finish reason.
 */
public class FinishReason private constructor(public val name: String, public val ordinal: Int) {
  public companion object {
    /** A new and not yet supported value. */
    @JvmField public val UNKNOWN: FinishReason = FinishReason("UNKNOWN", 0)

    /** Model finished successfully and stopped. */
    @JvmField public val STOP: FinishReason = FinishReason("STOP", 1)

    /** Model hit the token limit. */
    @JvmField public val MAX_TOKENS: FinishReason = FinishReason("MAX_TOKENS", 2)

    /** [SafetySetting] prevented the model from outputting content. */
    @JvmField public val SAFETY: FinishReason = FinishReason("SAFETY", 3)

    /**
     * The token generation was stopped because the response was flagged for unauthorized citations.
     */
    @JvmField public val RECITATION: FinishReason = FinishReason("RECITATION", 4)

    /** Model stopped for another reason. */
    @JvmField public val OTHER: FinishReason = FinishReason("OTHER", 5)
  }
}
