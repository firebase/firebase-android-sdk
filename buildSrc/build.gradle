// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id "org.gradle.kotlin.kotlin-dsl" version "1.2.6"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
    id 'com.github.sherter.google-java-format' version '0.9'
}

repositories {
    mavenLocal()
    maven {
        url 'https://maven.google.com/'
    }
    jcenter()
    mavenCentral()

    maven {
        url 'https://storage.googleapis.com/android-ci/mvn/'
    }
}

// Refer latest "perf-plugin" released version on https://maven.google.com/web/index.html?q=perf-plugin#com.google.firebase:perf-plugin
// The System property allows us to integrate with an unreleased version from https://bityl.co/3oYt.
// Refer go/fireperf-plugin-test-on-head for more details.
def perfPluginVersion = System.getenv("FIREBASE_PERF_PLUGIN_VERSION") ?: "1.3.5"

googleJavaFormat {
    toolVersion = '1.7'
}

dependencies {
    // Firebase performance plugin, it should be added here because of how gradle dependency
    // resolution works, otherwise it breaks Fireperf Test Apps.
    // See https://github.com/gradle/gradle/issues/12286
    implementation "com.google.firebase:perf-plugin:$perfPluginVersion"

    implementation "com.google.auto.value:auto-value-annotations:1.7"
    annotationProcessor "com.google.auto.value:auto-value:1.6.5"
    implementation 'digital.wup:android-maven-publish:3.6.3'
    implementation 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
    implementation 'org.json:json:20180813'

    implementation "org.eclipse.aether:aether-api:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-util:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-impl:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-connector-basic:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-transport-file:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-transport-http:1.0.0.v20140518"
    implementation "org.eclipse.aether:aether-transport-wagon:1.0.0.v20140518"
    implementation "org.apache.maven:maven-aether-provider:3.1.0"

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation 'org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.17-g013-9b8280a'
    implementation 'com.android.tools.build:gradle:3.4.3'

    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    testImplementation "com.google.truth:truth:1.0.1"
    testImplementation 'commons-io:commons-io:2.6'

}

gradlePlugin {
    plugins {
        licensePlugin {
            id = 'LicenseResolverPlugin'
            implementationClass = 'com.google.firebase.gradle.plugins.license.LicenseResolverPlugin'
        }
        multiProjectReleasePlugin {
            id = 'MultiProjectReleasePlugin'
            implementationClass = 'com.google.firebase.gradle.MultiProjectReleasePlugin'
        }
        publishingPlugin {
            id = 'PublishingPlugin'
            implementationClass = 'com.google.firebase.gradle.plugins.publish.PublishingPlugin'
        }
        firebaseLibraryPlugin {
            id = 'firebase-library'
            implementationClass = 'com.google.firebase.gradle.plugins.FirebaseLibraryPlugin'
        }

        firebaseJavaLibraryPlugin {
            id = "firebase-java-library"
            implementationClass = 'com.google.firebase.gradle.plugins.FirebaseJavaLibraryPlugin'
        }

        firebaseVendorPlugin {
            id = "firebase-vendor"
            implementationClass = 'com.google.firebase.gradle.plugins.VendorPlugin'
        }
    }
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
    enabled = rootProject.properties.get('enablePluginTests', false).toBoolean()
}
